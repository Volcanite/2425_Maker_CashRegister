
Caisse_enregistreuse-teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006264  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080063f4  080063f4  000073f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006510  08006510  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006518  08006518  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006518  08006518  00007518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006520  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  08006588  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08006588  00008310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b61  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d48  00000000  00000000  0001bbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0001e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3d  00000000  00000000  0001fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bcf  00000000  00000000  000209dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fd1  00000000  00000000  000495ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f79fc  00000000  00000000  0005f57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00156f79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005410  00000000  00000000  00156fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0015c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063dc 	.word	0x080063dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080063dc 	.word	0x080063dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b59      	ldr	r3, [pc, #356]	@ (80006dc <MX_GPIO_Init+0x17c>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a58      	ldr	r2, [pc, #352]	@ (80006dc <MX_GPIO_Init+0x17c>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b56      	ldr	r3, [pc, #344]	@ (80006dc <MX_GPIO_Init+0x17c>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	4b53      	ldr	r3, [pc, #332]	@ (80006dc <MX_GPIO_Init+0x17c>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	4a52      	ldr	r2, [pc, #328]	@ (80006dc <MX_GPIO_Init+0x17c>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059a:	4b50      	ldr	r3, [pc, #320]	@ (80006dc <MX_GPIO_Init+0x17c>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b4d      	ldr	r3, [pc, #308]	@ (80006dc <MX_GPIO_Init+0x17c>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	4a4c      	ldr	r2, [pc, #304]	@ (80006dc <MX_GPIO_Init+0x17c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b2:	4b4a      	ldr	r3, [pc, #296]	@ (80006dc <MX_GPIO_Init+0x17c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b47      	ldr	r3, [pc, #284]	@ (80006dc <MX_GPIO_Init+0x17c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a46      	ldr	r2, [pc, #280]	@ (80006dc <MX_GPIO_Init+0x17c>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ca:	4b44      	ldr	r3, [pc, #272]	@ (80006dc <MX_GPIO_Init+0x17c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f001 f868 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80005ea:	483d      	ldr	r0, [pc, #244]	@ (80006e0 <MX_GPIO_Init+0x180>)
 80005ec:	f001 f862 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005fa:	f001 f85b 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	4838      	ldr	r0, [pc, #224]	@ (80006e4 <MX_GPIO_Init+0x184>)
 8000604:	f001 f856 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PC6 PC7 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000608:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4830      	ldr	r0, [pc, #192]	@ (80006e0 <MX_GPIO_Init+0x180>)
 8000620:	f000 fe86 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = green_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000624:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f000 fe76 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000644:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000650:	2301      	movs	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4822      	ldr	r0, [pc, #136]	@ (80006e4 <MX_GPIO_Init+0x184>)
 800065c:	f000 fe68 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000660:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	4819      	ldr	r0, [pc, #100]	@ (80006e0 <MX_GPIO_Init+0x180>)
 800067a:	f000 fe59 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nCS_Pin;
 800067e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nCS_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f000 fe49 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800069e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <MX_GPIO_Init+0x180>)
 80006b4:	f000 fe3c 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4619      	mov	r1, r3
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_GPIO_Init+0x184>)
 80006d0:	f000 fe2e 	bl	8001330 <HAL_GPIO_Init>

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	48000800 	.word	0x48000800
 80006e4:	48000400 	.word	0x48000400

080006e8 <__io_putchar>:
#else
#define PUTCHAR_PROTOYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006f0:	1d39      	adds	r1, r7, #4
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f6:	2201      	movs	r2, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <__io_putchar+0x20>)
 80006fa:	f003 fe13 	bl	8004324 <HAL_UART_Transmit>
	return ch;
 80006fe:	687b      	ldr	r3, [r7, #4]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000138 	.word	0x20000138

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b0c8      	sub	sp, #288	@ 0x120
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	uint8_t buff[255];
	uint8_t uid[MIFARE_UID_MAX_LENGTH];
	int32_t uid_len = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fbe1 	bl	8000ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f84e 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff ff1e 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000724:	f000 fb1e 	bl	8000d64 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000728:	f000 fa54 	bl	8000bd4 <MX_TIM2_Init>
  MX_SPI2_Init();
 800072c:	f000 f89e 	bl	800086c <MX_SPI2_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
	  if(flag==1){
		  HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
		  flag=0;*/
	   uint8_t testByte[10] = {0xAA, 0x10, 0x20, 0xAA, 0x10, 0x20, 0xAA, 0x10, 0x20, 0xAA}; // Octet à envoyer
 8000730:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000734:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000738:	4a1a      	ldr	r2, [pc, #104]	@ (80007a4 <main+0x98>)
 800073a:	ca07      	ldmia	r2, {r0, r1, r2}
 800073c:	c303      	stmia	r3!, {r0, r1}
 800073e:	801a      	strh	r2, [r3, #0]
	   uint8_t receivedByte = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	    // Envoi et réception via SPI
//	    SPI_TransmitReceive(testByte, &receivedByte);

	    // Vérifier la réponse
	    printf("Octet envoyé: 0x%02X, Octet reçu: 0x%02X\r\n", testByte, receivedByte);
 8000746:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4816      	ldr	r0, [pc, #88]	@ (80007a8 <main+0x9c>)
 8000750:	f004 ff78 	bl	8005644 <iprintf>

	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8000754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000758:	4814      	ldr	r0, [pc, #80]	@ (80007ac <main+0xa0>)
 800075a:	f000 ff93 	bl	8001684 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <main+0x60>
	        printf("IRQ est à LOW : le PN532 a une donnée prête.\r\n");
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <main+0xa4>)
 8000766:	f004 ffd5 	bl	8005714 <puts>
 800076a:	e002      	b.n	8000772 <main+0x66>
	    } else {
	        printf("IRQ est à HIGH : le PN532 ne signale rien.\r\n");
 800076c:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <main+0xa8>)
 800076e:	f004 ffd1 	bl	8005714 <puts>
	    }

	    HAL_Delay(1000); // Petite pause pour éviter de surcharger le terminal
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f000 fc27 	bl	8000fc8 <HAL_Delay>

	    HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 ff96 	bl	80016b4 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi2, testByte, 10, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	220a      	movs	r2, #10
 800078e:	480a      	ldr	r0, [pc, #40]	@ (80007b8 <main+0xac>)
 8000790:	f002 fb6b 	bl	8002e6a <HAL_SPI_Transmit>
	    HAL_GPIO_WritePin(nCS_GPIO_Port, nCS_Pin, SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800079a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800079e:	f000 ff89 	bl	80016b4 <HAL_GPIO_WritePin>
  {
 80007a2:	e7c5      	b.n	8000730 <main+0x24>
 80007a4:	08006488 	.word	0x08006488
 80007a8:	080063f4 	.word	0x080063f4
 80007ac:	48000800 	.word	0x48000800
 80007b0:	08006424 	.word	0x08006424
 80007b4:	08006458 	.word	0x08006458
 80007b8:	20000084 	.word	0x20000084

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	@ 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	@ 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 f882 	bl	80058d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007e2:	f000 ff8d 	bl	8001700 <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 f837 	bl	800085e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2310      	movs	r3, #16
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800080a:	230a      	movs	r3, #10
 800080c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080e:	2307      	movs	r3, #7
 8000810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ffc4 	bl	80017ac <HAL_RCC_OscConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800082a:	f000 f818 	bl	800085e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082e:	230f      	movs	r3, #15
 8000830:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	2104      	movs	r1, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fb8c 	bl	8001f64 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000852:	f000 f804 	bl	800085e <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	@ 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000862:	b672      	cpsid	i
}
 8000864:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000866:	bf00      	nop
 8000868:	e7fd      	b.n	8000866 <Error_Handler+0x8>
	...

0800086c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000870:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <MX_SPI2_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	@ (80008e4 <MX_SPI2_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <MX_SPI2_Init+0x74>)
 8000878:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800087c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_SPI2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <MX_SPI2_Init+0x74>)
 8000886:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800088a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_SPI2_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_SPI2_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_SPI2_Init+0x74>)
 800089a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008a2:	2238      	movs	r2, #56	@ 0x38
 80008a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008ba:	2207      	movs	r2, #7
 80008bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008c6:	2208      	movs	r2, #8
 80008c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_SPI2_Init+0x74>)
 80008cc:	f002 fa2a 	bl	8002d24 <HAL_SPI_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80008d6:	f7ff ffc2 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000084 	.word	0x20000084
 80008e4:	40003800 	.word	0x40003800

080008e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a25      	ldr	r2, [pc, #148]	@ (800099c <HAL_SPI_MspInit+0xb4>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d144      	bne.n	8000994 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800090a:	4b25      	ldr	r3, [pc, #148]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	4a24      	ldr	r2, [pc, #144]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6593      	str	r3, [r2, #88]	@ 0x58
 8000916:	4b22      	ldr	r3, [pc, #136]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000926:	4a1e      	ldr	r2, [pc, #120]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092e:	4b1c      	ldr	r3, [pc, #112]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093e:	4a18      	ldr	r2, [pc, #96]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <HAL_SPI_MspInit+0xb8>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	230c      	movs	r3, #12
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000962:	2305      	movs	r3, #5
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <HAL_SPI_MspInit+0xbc>)
 800096e:	f000 fcdf 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000972:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000984:	2305      	movs	r3, #5
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <HAL_SPI_MspInit+0xc0>)
 8000990:	f000 fcce 	bl	8001330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40003800 	.word	0x40003800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000800 	.word	0x48000800
 80009a8:	48000400 	.word	0x48000400

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <NMI_Handler+0x4>

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4a:	f000 fa9d 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <USART2_IRQHandler+0x10>)
 8000a5a:	f003 fced 	bl	8004438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000138 	.word	0x20000138

08000a68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4601      	mov	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
  }

  return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e009      	b.n	8000ac8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe13 	bl	80006e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf1      	blt.n	8000ab4 <_write+0x12>
  }
  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:

int _close(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b02:	605a      	str	r2, [r3, #4]
  return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_isatty>:

int _isatty(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f004 fefc 	bl	8005970 <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20018000 	.word	0x20018000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	200000e8 	.word	0x200000e8
 8000bac:	20000310 	.word	0x20000310

08000bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c06:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2e:	4823      	ldr	r0, [pc, #140]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c30:	f002 fbf6 	bl	8003420 <HAL_TIM_Base_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c3a:	f7ff fe10 	bl	800085e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481c      	ldr	r0, [pc, #112]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c4c:	f002 fdb4 	bl	80037b8 <HAL_TIM_ConfigClockSource>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c56:	f7ff fe02 	bl	800085e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c5a:	4818      	ldr	r0, [pc, #96]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c5c:	f002 fc37 	bl	80034ce <HAL_TIM_PWM_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c66:	f7ff fdfa 	bl	800085e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4810      	ldr	r0, [pc, #64]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c7a:	f003 fa7d 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c84:	f7ff fdeb 	bl	800085e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	@ 0x60
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000ca0:	f002 fc76 	bl	8003590 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000caa:	f7ff fdd8 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cae:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000cb0:	f000 f824 	bl	8000cfc <HAL_TIM_MspPostInit>

}
 8000cb4:	bf00      	nop
 8000cb6:	3738      	adds	r7, #56	@ 0x38
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200000ec 	.word	0x200000ec

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cd0:	d10b      	bne.n	8000cea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40021000 	.word	0x40021000

08000cfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d1c:	d11c      	bne.n	8000d58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <HAL_TIM_MspPostInit+0x64>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a0f      	ldr	r2, [pc, #60]	@ (8000d60 <HAL_TIM_MspPostInit+0x64>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_TIM_MspPostInit+0x64>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d54:	f000 faec 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d68:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d6a:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <MX_USART2_UART_Init+0x5c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_USART2_UART_Init+0x58>)
 8000da8:	f003 fa6e 	bl	8004288 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db2:	f7ff fd54 	bl	800085e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000138 	.word	0x20000138
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ac      	sub	sp, #176	@ 0xb0
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2288      	movs	r2, #136	@ 0x88
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 fd75 	bl	80058d4 <memset>
  if(uartHandle->Instance==USART2)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a25      	ldr	r2, [pc, #148]	@ (8000e84 <HAL_UART_MspInit+0xc0>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d143      	bne.n	8000e7c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fad3 	bl	80023ac <HAL_RCCEx_PeriphCLKConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e0c:	f7ff fd27 	bl	800085e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e14:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2c:	4a16      	ldr	r2, [pc, #88]	@ (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <HAL_UART_MspInit+0xc4>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e40:	230c      	movs	r3, #12
 8000e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f000 fa62 	bl	8001330 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2026      	movs	r0, #38	@ 0x26
 8000e72:	f000 f9a8 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e76:	2026      	movs	r0, #38	@ 0x26
 8000e78:	f000 f9c1 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	37b0      	adds	r7, #176	@ 0xb0
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000

08000e8c <Reset_Handler>:
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopForever+0x2>
 8000e90:	f7ff fe8e 	bl	8000bb0 <SystemInit>
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopForever+0x6>)
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopForever+0xa>)
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopForever+0xe>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:
 8000e9e:	58d4      	ldr	r4, [r2, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:
 8000ea4:	18c4      	adds	r4, r0, r3
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopForever+0x12>)
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopForever+0x16>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:
 8000eb6:	42a2      	cmp	r2, r4
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>
 8000eba:	f004 fd5f 	bl	800597c <__libc_init_array>
 8000ebe:	f7ff fc25 	bl	800070c <main>

08000ec2 <LoopForever>:
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
 8000ec4:	20018000 	.word	0x20018000
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000068 	.word	0x20000068
 8000ed0:	08006520 	.word	0x08006520
 8000ed4:	20000068 	.word	0x20000068
 8000ed8:	20000310 	.word	0x20000310

08000edc <ADC1_2_IRQHandler>:
 8000edc:	e7fe      	b.n	8000edc <ADC1_2_IRQHandler>

08000ede <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f961 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f80e 	bl	8000f10 <HAL_InitTick>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	e001      	b.n	8000f04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f00:	f7ff fd54 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <HAL_InitTick+0x6c>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d023      	beq.n	8000f6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f24:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <HAL_InitTick+0x70>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_InitTick+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f96d 	bl	800121a <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d809      	bhi.n	8000f60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f54:	f000 f937 	bl	80011c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_InitTick+0x74>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e004      	b.n	8000f70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e001      	b.n	8000f70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x20>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x24>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <HAL_IncTick+0x24>)
 8000f9a:	6013      	str	r3, [r2, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200001c0 	.word	0x200001c0

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <HAL_GetTick+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	200001c0 	.word	0x200001c0

08000fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd0:	f7ff ffee 	bl	8000fb0 <HAL_GetTick>
 8000fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fe0:	d005      	beq.n	8000fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_Delay+0x44>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4413      	add	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fee:	bf00      	nop
 8000ff0:	f7ff ffde 	bl	8000fb0 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <HAL_Delay+0x28>
  {
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	@ (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	@ (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	@ (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	@ (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	@ 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	@ 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001232:	b480      	push	{r7}
 8001234:	b085      	sub	sp, #20
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d008      	beq.n	800125c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2204      	movs	r2, #4
 800124e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e022      	b.n	80012a2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 020e 	bic.w	r2, r2, #14
 800126a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001280:	f003 021c 	and.w	r2, r3, #28
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d005      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2204      	movs	r2, #4
 80012ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e029      	b.n	8001326 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 020e 	bic.w	r2, r2, #14
 80012e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0201 	bic.w	r2, r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f003 021c 	and.w	r2, r3, #28
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	4798      	blx	r3
    }
  }
  return status;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133e:	e17f      	b.n	8001640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2101      	movs	r1, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa01 f303 	lsl.w	r3, r1, r3
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8171 	beq.w	800163a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_GPIO_Init+0x40>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d118      	bne.n	8001410 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b03      	cmp	r3, #3
 800141a:	d017      	beq.n	800144c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	6939      	ldr	r1, [r7, #16]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80ac 	beq.w	800163a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001660 <HAL_GPIO_Init+0x330>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001660 <HAL_GPIO_Init+0x330>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001660 <HAL_GPIO_Init+0x330>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001664 <HAL_GPIO_Init+0x334>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001524:	d025      	beq.n	8001572 <HAL_GPIO_Init+0x242>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4f      	ldr	r2, [pc, #316]	@ (8001668 <HAL_GPIO_Init+0x338>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d01f      	beq.n	800156e <HAL_GPIO_Init+0x23e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4e      	ldr	r2, [pc, #312]	@ (800166c <HAL_GPIO_Init+0x33c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d019      	beq.n	800156a <HAL_GPIO_Init+0x23a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4d      	ldr	r2, [pc, #308]	@ (8001670 <HAL_GPIO_Init+0x340>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d013      	beq.n	8001566 <HAL_GPIO_Init+0x236>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4c      	ldr	r2, [pc, #304]	@ (8001674 <HAL_GPIO_Init+0x344>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d00d      	beq.n	8001562 <HAL_GPIO_Init+0x232>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4b      	ldr	r2, [pc, #300]	@ (8001678 <HAL_GPIO_Init+0x348>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d007      	beq.n	800155e <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4a      	ldr	r2, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x34c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d101      	bne.n	800155a <HAL_GPIO_Init+0x22a>
 8001556:	2306      	movs	r3, #6
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155a:	2307      	movs	r3, #7
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x244>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x244>
 8001572:	2300      	movs	r3, #0
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001584:	4937      	ldr	r1, [pc, #220]	@ (8001664 <HAL_GPIO_Init+0x334>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001592:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <HAL_GPIO_Init+0x350>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015b6:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015bc:	4b30      	ldr	r3, [pc, #192]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e0:	4a27      	ldr	r2, [pc, #156]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015e6:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <HAL_GPIO_Init+0x350>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160a:	4a1d      	ldr	r2, [pc, #116]	@ (8001680 <HAL_GPIO_Init+0x350>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_GPIO_Init+0x350>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001634:	4a12      	ldr	r2, [pc, #72]	@ (8001680 <HAL_GPIO_Init+0x350>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	f47f ae78 	bne.w	8001340 <HAL_GPIO_Init+0x10>
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016e8:	4b04      	ldr	r3, [pc, #16]	@ (80016fc <HAL_PWREx_GetVoltageRange+0x18>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40007000 	.word	0x40007000

08001700 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800170e:	d130      	bne.n	8001772 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001710:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800171c:	d038      	beq.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800171e:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001726:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001728:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2232      	movs	r2, #50	@ 0x32
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	4a1b      	ldr	r2, [pc, #108]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9b      	lsrs	r3, r3, #18
 8001740:	3301      	adds	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001744:	e002      	b.n	800174c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3b01      	subs	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001758:	d102      	bne.n	8001760 <HAL_PWREx_ControlVoltageScaling+0x60>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f2      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001760:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800176c:	d110      	bne.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e00f      	b.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800177a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800177e:	d007      	beq.n	8001790 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001780:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001788:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40007000 	.word	0x40007000
 80017a4:	20000000 	.word	0x20000000
 80017a8:	431bde83 	.word	0x431bde83

080017ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e3ca      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017be:	4b97      	ldr	r3, [pc, #604]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c8:	4b94      	ldr	r3, [pc, #592]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80e4 	beq.w	80019a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d007      	beq.n	80017f6 <HAL_RCC_OscConfig+0x4a>
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	f040 808b 	bne.w	8001904 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	f040 8087 	bne.w	8001904 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017f6:	4b89      	ldr	r3, [pc, #548]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x62>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e3a2      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	4b82      	ldr	r3, [pc, #520]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <HAL_RCC_OscConfig+0x7c>
 800181e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001826:	e005      	b.n	8001834 <HAL_RCC_OscConfig+0x88>
 8001828:	4b7c      	ldr	r3, [pc, #496]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001834:	4293      	cmp	r3, r2
 8001836:	d223      	bcs.n	8001880 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fd55 	bl	80022ec <RCC_SetFlashLatencyFromMSIRange>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e383      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184c:	4b73      	ldr	r3, [pc, #460]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a72      	ldr	r2, [pc, #456]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b70      	ldr	r3, [pc, #448]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	496d      	ldr	r1, [pc, #436]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4968      	ldr	r1, [pc, #416]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
 800187e:	e025      	b.n	80018cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	4b66      	ldr	r3, [pc, #408]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a65      	ldr	r2, [pc, #404]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4960      	ldr	r1, [pc, #384]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	495b      	ldr	r1, [pc, #364]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fd15 	bl	80022ec <RCC_SetFlashLatencyFromMSIRange>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e343      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018cc:	f000 fc4a 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b52      	ldr	r3, [pc, #328]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	4950      	ldr	r1, [pc, #320]	@ (8001a20 <HAL_RCC_OscConfig+0x274>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a24 <HAL_RCC_OscConfig+0x278>)
 80018ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001a28 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fb0d 	bl	8000f10 <HAL_InitTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d052      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	e327      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d032      	beq.n	8001972 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800190c:	4b43      	ldr	r3, [pc, #268]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a42      	ldr	r2, [pc, #264]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001918:	f7ff fb4a 	bl	8000fb0 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001920:	f7ff fb46 	bl	8000fb0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e310      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001932:	4b3a      	ldr	r3, [pc, #232]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193e:	4b37      	ldr	r3, [pc, #220]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a36      	ldr	r2, [pc, #216]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	4931      	ldr	r1, [pc, #196]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	492c      	ldr	r1, [pc, #176]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
 8001970:	e01a      	b.n	80019a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001972:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a29      	ldr	r2, [pc, #164]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800197e:	f7ff fb17 	bl	8000fb0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001986:	f7ff fb13 	bl	8000fb0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e2dd      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x1da>
 80019a4:	e000      	b.n	80019a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d074      	beq.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d005      	beq.n	80019c6 <HAL_RCC_OscConfig+0x21a>
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d10e      	bne.n	80019de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d064      	beq.n	8001a9c <HAL_RCC_OscConfig+0x2f0>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d160      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e2ba      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x24a>
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e026      	b.n	8001a44 <HAL_RCC_OscConfig+0x298>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019fe:	d115      	bne.n	8001a2c <HAL_RCC_OscConfig+0x280>
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001a06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a02      	ldr	r2, [pc, #8]	@ (8001a1c <HAL_RCC_OscConfig+0x270>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e014      	b.n	8001a44 <HAL_RCC_OscConfig+0x298>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	08006494 	.word	0x08006494
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	4ba0      	ldr	r3, [pc, #640]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a9f      	ldr	r2, [pc, #636]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b9d      	ldr	r3, [pc, #628]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a9c      	ldr	r2, [pc, #624]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fab0 	bl	8000fb0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff faac 	bl	8000fb0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e276      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a66:	4b92      	ldr	r3, [pc, #584]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x2a8>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fa9c 	bl	8000fb0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fa98 	bl	8000fb0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e262      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a8e:	4b88      	ldr	r3, [pc, #544]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2d0>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d060      	beq.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x310>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d119      	bne.n	8001aea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d116      	bne.n	8001aea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001abc:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x328>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e23f      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	4973      	ldr	r1, [pc, #460]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	e040      	b.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d023      	beq.n	8001b3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af2:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afe:	f7ff fa57 	bl	8000fb0 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fa53 	bl	8000fb0 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e21d      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b18:	4b65      	ldr	r3, [pc, #404]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b62      	ldr	r3, [pc, #392]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	495f      	ldr	r1, [pc, #380]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	e018      	b.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b46:	f7ff fa33 	bl	8000fb0 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fa2f 	bl	8000fb0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1f9      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b60:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d03c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01c      	beq.n	8001bba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b80:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b86:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff fa0e 	bl	8000fb0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff fa0a 	bl	8000fb0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1d4      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001baa:	4b41      	ldr	r3, [pc, #260]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ef      	beq.n	8001b98 <HAL_RCC_OscConfig+0x3ec>
 8001bb8:	e01b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff f9f1 	bl	8000fb0 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f9ed 	bl	8000fb0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1b7      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be4:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1ef      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80a6 	beq.w	8001d4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c04:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c10:	4b27      	ldr	r3, [pc, #156]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	4a26      	ldr	r2, [pc, #152]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1c:	4b24      	ldr	r3, [pc, #144]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_RCC_OscConfig+0x508>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d118      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_RCC_OscConfig+0x508>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <HAL_RCC_OscConfig+0x508>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c44:	f7ff f9b4 	bl	8000fb0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4c:	f7ff f9b0 	bl	8000fb0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e17a      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_RCC_OscConfig+0x508>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4d8>
 8001c72:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c82:	e029      	b.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d115      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x50c>
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c92:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca2:	4a03      	ldr	r2, [pc, #12]	@ (8001cb0 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x52c>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	4b9c      	ldr	r3, [pc, #624]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbe:	4a9b      	ldr	r2, [pc, #620]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cc8:	4b98      	ldr	r3, [pc, #608]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cce:	4a97      	ldr	r2, [pc, #604]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d016      	beq.n	8001d0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f966 	bl	8000fb0 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f962 	bl	8000fb0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e12a      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ed      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x53c>
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f94f 	bl	8000fb0 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff f94b 	bl	8000fb0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e113      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d2c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ed      	bne.n	8001d16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3a:	7ffb      	ldrb	r3, [r7, #31]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d40:	4b7a      	ldr	r3, [pc, #488]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a79      	ldr	r2, [pc, #484]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001d46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 80fe 	beq.w	8001f52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	f040 80d0 	bne.w	8001f00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d60:	4b72      	ldr	r3, [pc, #456]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d130      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d127      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d11f      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001da0:	2a07      	cmp	r2, #7
 8001da2:	bf14      	ite	ne
 8001da4:	2201      	movne	r2, #1
 8001da6:	2200      	moveq	r2, #0
 8001da8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d113      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	085b      	lsrs	r3, r3, #1
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d06e      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d069      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001de8:	4b50      	ldr	r3, [pc, #320]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0ad      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001df8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e04:	f7ff f8d4 	bl	8000fb0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f8d0 	bl	8000fb0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e09a      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1e:	4b43      	ldr	r3, [pc, #268]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2a:	4b40      	ldr	r3, [pc, #256]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4b40      	ldr	r3, [pc, #256]	@ (8001f30 <HAL_RCC_OscConfig+0x784>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e44:	0212      	lsls	r2, r2, #8
 8001e46:	4311      	orrs	r1, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e4c:	0852      	lsrs	r2, r2, #1
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	0552      	lsls	r2, r2, #21
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e58:	0852      	lsrs	r2, r2, #1
 8001e5a:	3a01      	subs	r2, #1
 8001e5c:	0652      	lsls	r2, r2, #25
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e64:	0912      	lsrs	r2, r2, #4
 8001e66:	0452      	lsls	r2, r2, #17
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	4930      	ldr	r1, [pc, #192]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e70:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e88:	f7ff f892 	bl	8000fb0 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff f88e 	bl	8000fb0 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e058      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	4b22      	ldr	r3, [pc, #136]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eae:	e050      	b.n	8001f52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e04f      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d148      	bne.n	8001f52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ecc:	4b17      	ldr	r3, [pc, #92]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a16      	ldr	r2, [pc, #88]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed8:	f7ff f86a 	bl	8000fb0 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f866 	bl	8000fb0 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e030      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x734>
 8001efe:	e028      	b.n	8001f52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d023      	beq.n	8001f4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_RCC_OscConfig+0x780>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7ff f84d 	bl	8000fb0 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e00c      	b.n	8001f34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff f849 	bl	8000fb0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d905      	bls.n	8001f34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e013      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_OscConfig+0x7b0>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ec      	bne.n	8001f1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_RCC_OscConfig+0x7b0>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4905      	ldr	r1, [pc, #20]	@ (8001f5c <HAL_RCC_OscConfig+0x7b0>)
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_RCC_OscConfig+0x7b4>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
 8001f4c:	e001      	b.n	8001f52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	feeefffc 	.word	0xfeeefffc

08001f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0e7      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b75      	ldr	r3, [pc, #468]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b72      	ldr	r3, [pc, #456]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4970      	ldr	r1, [pc, #448]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b6e      	ldr	r3, [pc, #440]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0cf      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	4b66      	ldr	r3, [pc, #408]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d908      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b63      	ldr	r3, [pc, #396]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4960      	ldr	r1, [pc, #384]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d04c      	beq.n	800207c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	4b5a      	ldr	r3, [pc, #360]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d121      	bne.n	800203a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e0a6      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002002:	4b54      	ldr	r3, [pc, #336]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d115      	bne.n	800203a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e09a      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201a:	4b4e      	ldr	r3, [pc, #312]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e08e      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202a:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e086      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203a:	4b46      	ldr	r3, [pc, #280]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f023 0203 	bic.w	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4943      	ldr	r1, [pc, #268]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800204c:	f7fe ffb0 	bl	8000fb0 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	e00a      	b.n	800206a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002054:	f7fe ffac 	bl	8000fb0 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e06e      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	4b3a      	ldr	r3, [pc, #232]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 020c 	and.w	r2, r3, #12
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	429a      	cmp	r2, r3
 800207a:	d1eb      	bne.n	8002054 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4b31      	ldr	r3, [pc, #196]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002094:	429a      	cmp	r2, r3
 8002096:	d208      	bcs.n	80020aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b2e      	ldr	r3, [pc, #184]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	492b      	ldr	r1, [pc, #172]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d210      	bcs.n	80020da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b8:	4b25      	ldr	r3, [pc, #148]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 0207 	bic.w	r2, r3, #7
 80020c0:	4923      	ldr	r1, [pc, #140]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c8:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <HAL_RCC_ClockConfig+0x1ec>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e036      	b.n	8002148 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4918      	ldr	r1, [pc, #96]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4910      	ldr	r1, [pc, #64]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002118:	f000 f824 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	490b      	ldr	r1, [pc, #44]	@ (8002158 <HAL_RCC_ClockConfig+0x1f4>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_RCC_ClockConfig+0x1f8>)
 8002136:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1fc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fee7 	bl	8000f10 <HAL_InitTick>
 8002142:	4603      	mov	r3, r0
 8002144:	72fb      	strb	r3, [r7, #11]

  return status;
 8002146:	7afb      	ldrb	r3, [r7, #11]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	08006494 	.word	0x08006494
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002172:	4b3e      	ldr	r3, [pc, #248]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217c:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x34>
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d121      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d11e      	bne.n	80021d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002198:	4b34      	ldr	r3, [pc, #208]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021a4:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e005      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021b4:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021dc:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x110>)
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	e004      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021e8:	4b23      	ldr	r3, [pc, #140]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d134      	bne.n	800225c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021f2:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d003      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0xa6>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d003      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0xac>
 8002208:	e005      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x110>)
 800220c:	617b      	str	r3, [r7, #20]
      break;
 800220e:	e005      	b.n	800221c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x114>)
 8002212:	617b      	str	r3, [r7, #20]
      break;
 8002214:	e002      	b.n	800221c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	617b      	str	r3, [r7, #20]
      break;
 800221a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	3301      	adds	r3, #1
 8002228:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	fb03 f202 	mul.w	r2, r3, r2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_RCC_GetSysClockFreq+0x108>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	0e5b      	lsrs	r3, r3, #25
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	3301      	adds	r3, #1
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800225c:	69bb      	ldr	r3, [r7, #24]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	080064ac 	.word	0x080064ac
 8002274:	00f42400 	.word	0x00f42400
 8002278:	007a1200 	.word	0x007a1200

0800227c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <HAL_RCC_GetHCLKFreq+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002298:	f7ff fff0 	bl	800227c <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4904      	ldr	r1, [pc, #16]	@ (80022bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	080064a4 	.word	0x080064a4

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022c4:	f7ff ffda 	bl	800227c <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4904      	ldr	r1, [pc, #16]	@ (80022e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	080064a4 	.word	0x080064a4

080022ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022f8:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002304:	f7ff f9ee 	bl	80016e4 <HAL_PWREx_GetVoltageRange>
 8002308:	6178      	str	r0, [r7, #20]
 800230a:	e014      	b.n	8002336 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	4a24      	ldr	r2, [pc, #144]	@ (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	@ 0x58
 8002318:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002324:	f7ff f9de 	bl	80016e4 <HAL_PWREx_GetVoltageRange>
 8002328:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	4a1d      	ldr	r2, [pc, #116]	@ (80023a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800233c:	d10b      	bne.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b80      	cmp	r3, #128	@ 0x80
 8002342:	d919      	bls.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2ba0      	cmp	r3, #160	@ 0xa0
 8002348:	d902      	bls.n	8002350 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800234a:	2302      	movs	r3, #2
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e013      	b.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002350:	2301      	movs	r3, #1
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	e010      	b.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b80      	cmp	r3, #128	@ 0x80
 800235a:	d902      	bls.n	8002362 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800235c:	2303      	movs	r3, #3
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	e00a      	b.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b80      	cmp	r3, #128	@ 0x80
 8002366:	d102      	bne.n	800236e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002368:	2302      	movs	r3, #2
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	e004      	b.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b70      	cmp	r3, #112	@ 0x70
 8002372:	d101      	bne.n	8002378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002374:	2301      	movs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 0207 	bic.w	r2, r3, #7
 8002380:	4909      	ldr	r1, [pc, #36]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002388:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	429a      	cmp	r2, r3
 8002394:	d001      	beq.n	800239a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40022000 	.word	0x40022000

080023ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b4:	2300      	movs	r3, #0
 80023b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023b8:	2300      	movs	r3, #0
 80023ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d041      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023d0:	d02a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023d6:	d824      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023dc:	d008      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023e2:	d81e      	bhi.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ec:	d010      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023ee:	e018      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f0:	4b86      	ldr	r3, [pc, #536]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a85      	ldr	r2, [pc, #532]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023fc:	e015      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f000 fabb 	bl	8002980 <RCCEx_PLLSAI1_Config>
 800240a:	4603      	mov	r3, r0
 800240c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800240e:	e00c      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3320      	adds	r3, #32
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fba6 	bl	8002b68 <RCCEx_PLLSAI2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002420:	e003      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	74fb      	strb	r3, [r7, #19]
      break;
 8002426:	e000      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002430:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800243e:	4973      	ldr	r1, [pc, #460]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002446:	e001      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d041      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800245c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002460:	d02a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002462:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002466:	d824      	bhi.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800246c:	d008      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800246e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002472:	d81e      	bhi.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800247c:	d010      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800247e:	e018      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002480:	4b62      	ldr	r3, [pc, #392]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4a61      	ldr	r2, [pc, #388]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800248c:	e015      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fa73 	bl	8002980 <RCCEx_PLLSAI1_Config>
 800249a:	4603      	mov	r3, r0
 800249c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800249e:	e00c      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3320      	adds	r3, #32
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fb5e 	bl	8002b68 <RCCEx_PLLSAI2_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b0:	e003      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	74fb      	strb	r3, [r7, #19]
      break;
 80024b6:	e000      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024c0:	4b52      	ldr	r3, [pc, #328]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ce:	494f      	ldr	r1, [pc, #316]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024d6:	e001      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a0 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024ee:	4b47      	ldr	r3, [pc, #284]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b41      	ldr	r3, [pc, #260]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a40      	ldr	r2, [pc, #256]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002510:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002520:	4b3b      	ldr	r3, [pc, #236]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a3a      	ldr	r2, [pc, #232]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800252c:	f7fe fd40 	bl	8000fb0 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002532:	e009      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7fe fd3c 	bl	8000fb0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d902      	bls.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	74fb      	strb	r3, [r7, #19]
        break;
 8002546:	e005      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ef      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d15c      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800255a:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01f      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	d019      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002578:	4b24      	ldr	r3, [pc, #144]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002582:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002584:	4b21      	ldr	r3, [pc, #132]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	4a20      	ldr	r2, [pc, #128]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002594:	4b1d      	ldr	r3, [pc, #116]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259a:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a4:	4a19      	ldr	r2, [pc, #100]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe fcfb 	bl	8000fb0 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025bc:	e00b      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025be:	f7fe fcf7 	bl	8000fb0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d902      	bls.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	74fb      	strb	r3, [r7, #19]
            break;
 80025d4:	e006      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ec      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10c      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ea:	4b08      	ldr	r3, [pc, #32]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002602:	e009      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
 8002608:	e006      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7c7b      	ldrb	r3, [r7, #17]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b9e      	ldr	r3, [pc, #632]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002622:	4a9d      	ldr	r2, [pc, #628]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002636:	4b98      	ldr	r3, [pc, #608]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002644:	4994      	ldr	r1, [pc, #592]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002658:	4b8f      	ldr	r3, [pc, #572]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f023 020c 	bic.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002666:	498c      	ldr	r1, [pc, #560]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267a:	4b87      	ldr	r3, [pc, #540]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002680:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	4983      	ldr	r1, [pc, #524]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4b7e      	ldr	r3, [pc, #504]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	497b      	ldr	r1, [pc, #492]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026be:	4b76      	ldr	r3, [pc, #472]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026cc:	4972      	ldr	r1, [pc, #456]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	496a      	ldr	r1, [pc, #424]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002702:	4b65      	ldr	r3, [pc, #404]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002708:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002710:	4961      	ldr	r1, [pc, #388]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002724:	4b5c      	ldr	r3, [pc, #368]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002732:	4959      	ldr	r1, [pc, #356]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	4b54      	ldr	r3, [pc, #336]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002754:	4950      	ldr	r1, [pc, #320]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002768:	4b4b      	ldr	r3, [pc, #300]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	4948      	ldr	r1, [pc, #288]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800278a:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002798:	493f      	ldr	r1, [pc, #252]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d028      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ba:	4937      	ldr	r1, [pc, #220]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ca:	d106      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027cc:	4b32      	ldr	r3, [pc, #200]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a31      	ldr	r2, [pc, #196]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027d6:	60d3      	str	r3, [r2, #12]
 80027d8:	e011      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e2:	d10c      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3304      	adds	r3, #4
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f8c8 	bl	8002980 <RCCEx_PLLSAI1_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027f4:	7cfb      	ldrb	r3, [r7, #19]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027fa:	7cfb      	ldrb	r3, [r7, #19]
 80027fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d028      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800280a:	4b23      	ldr	r3, [pc, #140]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	491f      	ldr	r1, [pc, #124]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002828:	d106      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282a:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4a1a      	ldr	r2, [pc, #104]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002834:	60d3      	str	r3, [r2, #12]
 8002836:	e011      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002840:	d10c      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f000 f899 	bl	8002980 <RCCEx_PLLSAI1_Config>
 800284e:	4603      	mov	r3, r0
 8002850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d02b      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	4908      	ldr	r1, [pc, #32]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002886:	d109      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a02      	ldr	r2, [pc, #8]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002892:	60d3      	str	r3, [r2, #12]
 8002894:	e014      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2101      	movs	r1, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f000 f867 	bl	8002980 <RCCEx_PLLSAI1_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02f      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028cc:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028da:	4928      	ldr	r1, [pc, #160]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ea:	d10d      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3304      	adds	r3, #4
 80028f0:	2102      	movs	r1, #2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f844 	bl	8002980 <RCCEx_PLLSAI1_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d014      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002902:	7cfb      	ldrb	r3, [r7, #19]
 8002904:	74bb      	strb	r3, [r7, #18]
 8002906:	e011      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800290c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002910:	d10c      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3320      	adds	r3, #32
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f000 f925 	bl	8002b68 <RCCEx_PLLSAI2_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002938:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002946:	490d      	ldr	r1, [pc, #52]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800296a:	4904      	ldr	r1, [pc, #16]	@ (800297c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002972:	7cbb      	ldrb	r3, [r7, #18]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000

08002980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298e:	4b75      	ldr	r3, [pc, #468]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d018      	beq.n	80029cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800299a:	4b72      	ldr	r3, [pc, #456]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0203 	and.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d10d      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
       ||
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
       ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d047      	beq.n	8002a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e044      	b.n	8002a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d018      	beq.n	8002a06 <RCCEx_PLLSAI1_Config+0x86>
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d825      	bhi.n	8002a24 <RCCEx_PLLSAI1_Config+0xa4>
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d002      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0x62>
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d009      	beq.n	80029f4 <RCCEx_PLLSAI1_Config+0x74>
 80029e0:	e020      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029e2:	4b60      	ldr	r3, [pc, #384]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d11d      	bne.n	8002a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f2:	e01a      	b.n	8002a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f4:	4b5b      	ldr	r3, [pc, #364]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d116      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a04:	e013      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a06:	4b57      	ldr	r3, [pc, #348]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a12:	4b54      	ldr	r3, [pc, #336]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a22:	e006      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e004      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e002      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e000      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	4944      	ldr	r1, [pc, #272]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d17d      	bne.n	8002b58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a5c:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a40      	ldr	r2, [pc, #256]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a68:	f7fe faa2 	bl	8000fb0 <HAL_GetTick>
 8002a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a6e:	e009      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a70:	f7fe fa9e 	bl	8000fb0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d902      	bls.n	8002a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	73fb      	strb	r3, [r7, #15]
        break;
 8002a82:	e005      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a84:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ef      	bne.n	8002a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d160      	bne.n	8002b58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a9c:	4b31      	ldr	r3, [pc, #196]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6892      	ldr	r2, [r2, #8]
 8002aac:	0211      	lsls	r1, r2, #8
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68d2      	ldr	r2, [r2, #12]
 8002ab2:	0912      	lsrs	r2, r2, #4
 8002ab4:	0452      	lsls	r2, r2, #17
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	492a      	ldr	r1, [pc, #168]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	610b      	str	r3, [r1, #16]
 8002abe:	e027      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d112      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ac6:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ace:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6892      	ldr	r2, [r2, #8]
 8002ad6:	0211      	lsls	r1, r2, #8
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6912      	ldr	r2, [r2, #16]
 8002adc:	0852      	lsrs	r2, r2, #1
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0552      	lsls	r2, r2, #21
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	491f      	ldr	r1, [pc, #124]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	610b      	str	r3, [r1, #16]
 8002aea:	e011      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002af4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6892      	ldr	r2, [r2, #8]
 8002afc:	0211      	lsls	r1, r2, #8
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6952      	ldr	r2, [r2, #20]
 8002b02:	0852      	lsrs	r2, r2, #1
 8002b04:	3a01      	subs	r2, #1
 8002b06:	0652      	lsls	r2, r2, #25
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	4916      	ldr	r1, [pc, #88]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b10:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a13      	ldr	r2, [pc, #76]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fa48 	bl	8000fb0 <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b22:	e009      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b24:	f7fe fa44 	bl	8000fb0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	73fb      	strb	r3, [r7, #15]
          break;
 8002b36:	e005      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ef      	beq.n	8002b24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4904      	ldr	r1, [pc, #16]	@ (8002b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000

08002b68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b76:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d018      	beq.n	8002bb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b82:	4b67      	ldr	r3, [pc, #412]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10d      	bne.n	8002bae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
       ||
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b9a:	4b61      	ldr	r3, [pc, #388]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d047      	beq.n	8002c3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e044      	b.n	8002c3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d018      	beq.n	8002bee <RCCEx_PLLSAI2_Config+0x86>
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d825      	bhi.n	8002c0c <RCCEx_PLLSAI2_Config+0xa4>
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d002      	beq.n	8002bca <RCCEx_PLLSAI2_Config+0x62>
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d009      	beq.n	8002bdc <RCCEx_PLLSAI2_Config+0x74>
 8002bc8:	e020      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bca:	4b55      	ldr	r3, [pc, #340]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d11d      	bne.n	8002c12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bda:	e01a      	b.n	8002c12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bdc:	4b50      	ldr	r3, [pc, #320]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d116      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bec:	e013      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bee:	4b4c      	ldr	r3, [pc, #304]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bfa:	4b49      	ldr	r3, [pc, #292]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c0a:	e006      	b.n	8002c1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c10:	e004      	b.n	8002c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10d      	bne.n	8002c3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c22:	4b3f      	ldr	r3, [pc, #252]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	430b      	orrs	r3, r1
 8002c38:	4939      	ldr	r1, [pc, #228]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d167      	bne.n	8002d14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c44:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a35      	ldr	r2, [pc, #212]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c50:	f7fe f9ae 	bl	8000fb0 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c56:	e009      	b.n	8002c6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c58:	f7fe f9aa 	bl	8000fb0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d902      	bls.n	8002c6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	73fb      	strb	r3, [r7, #15]
        break;
 8002c6a:	e005      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ef      	bne.n	8002c58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d14a      	bne.n	8002d14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c84:	4b26      	ldr	r3, [pc, #152]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6892      	ldr	r2, [r2, #8]
 8002c94:	0211      	lsls	r1, r2, #8
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68d2      	ldr	r2, [r2, #12]
 8002c9a:	0912      	lsrs	r2, r2, #4
 8002c9c:	0452      	lsls	r2, r2, #17
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	491f      	ldr	r1, [pc, #124]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	614b      	str	r3, [r1, #20]
 8002ca6:	e011      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	0211      	lsls	r1, r2, #8
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6912      	ldr	r2, [r2, #16]
 8002cbe:	0852      	lsrs	r2, r2, #1
 8002cc0:	3a01      	subs	r2, #1
 8002cc2:	0652      	lsls	r2, r2, #25
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	4916      	ldr	r1, [pc, #88]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ccc:	4b14      	ldr	r3, [pc, #80]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe f96a 	bl	8000fb0 <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cde:	e009      	b.n	8002cf4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce0:	f7fe f966 	bl	8000fb0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf2:	e005      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ef      	beq.n	8002ce0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4904      	ldr	r1, [pc, #16]	@ (8002d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e095      	b.n	8002e62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d46:	d009      	beq.n	8002d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	61da      	str	r2, [r3, #28]
 8002d4e:	e005      	b.n	8002d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd fdb6 	bl	80008e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d9c:	d902      	bls.n	8002da4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e002      	b.n	8002daa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002da4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002db2:	d007      	beq.n	8002dc4 <HAL_SPI_Init+0xa0>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e06:	ea42 0103 	orr.w	r1, r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	f003 0204 	and.w	r2, r3, #4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e40:	ea42 0103 	orr.w	r1, r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b088      	sub	sp, #32
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7a:	f7fe f899 	bl	8000fb0 <HAL_GetTick>
 8002e7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e90:	2302      	movs	r3, #2
 8002e92:	e15c      	b.n	800314e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_Transmit+0x36>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e154      	b.n	800314e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_SPI_Transmit+0x48>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e14d      	b.n	800314e <HAL_SPI_Transmit+0x2e4>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f04:	d10f      	bne.n	8002f26 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b40      	cmp	r3, #64	@ 0x40
 8002f32:	d007      	beq.n	8002f44 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f4c:	d952      	bls.n	8002ff4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_SPI_Transmit+0xf2>
 8002f56:	8b7b      	ldrh	r3, [r7, #26]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d145      	bne.n	8002fe8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f80:	e032      	b.n	8002fe8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d112      	bne.n	8002fb6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	1c9a      	adds	r2, r3, #2
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fb4:	e018      	b.n	8002fe8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb6:	f7fd fffb 	bl	8000fb0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d803      	bhi.n	8002fce <HAL_SPI_Transmit+0x164>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x16a>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0b2      	b.n	800314e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c7      	bne.n	8002f82 <HAL_SPI_Transmit+0x118>
 8002ff2:	e083      	b.n	80030fc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_SPI_Transmit+0x198>
 8002ffc:	8b7b      	ldrh	r3, [r7, #26]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d177      	bne.n	80030f2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d912      	bls.n	8003032 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	1c9a      	adds	r2, r3, #2
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b02      	subs	r3, #2
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003030:	e05f      	b.n	80030f2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	7812      	ldrb	r2, [r2, #0]
 800303e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003058:	e04b      	b.n	80030f2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d12b      	bne.n	80030c0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d912      	bls.n	8003098 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003076:	881a      	ldrh	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	1c9a      	adds	r2, r3, #2
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b02      	subs	r3, #2
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003096:	e02c      	b.n	80030f2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030be:	e018      	b.n	80030f2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c0:	f7fd ff76 	bl	8000fb0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d803      	bhi.n	80030d8 <HAL_SPI_Transmit+0x26e>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030d6:	d102      	bne.n	80030de <HAL_SPI_Transmit+0x274>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e02d      	b.n	800314e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ae      	bne.n	800305a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f947 	bl	8003394 <SPI_EndRxTxTransaction>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800314c:	2300      	movs	r3, #0
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003168:	f7fd ff22 	bl	8000fb0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	4413      	add	r3, r2
 8003176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003178:	f7fd ff1a 	bl	8000fb0 <HAL_GetTick>
 800317c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800317e:	4b39      	ldr	r3, [pc, #228]	@ (8003264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	015b      	lsls	r3, r3, #5
 8003184:	0d1b      	lsrs	r3, r3, #20
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800318e:	e054      	b.n	800323a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003196:	d050      	beq.n	800323a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003198:	f7fd ff0a 	bl	8000fb0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d902      	bls.n	80031ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d13d      	bne.n	800322a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031c6:	d111      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d0:	d004      	beq.n	80031dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031da:	d107      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031f4:	d10f      	bne.n	8003216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e017      	b.n	800325a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	3b01      	subs	r3, #1
 8003238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	429a      	cmp	r2, r3
 8003248:	bf0c      	ite	eq
 800324a:	2301      	moveq	r3, #1
 800324c:	2300      	movne	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	429a      	cmp	r2, r3
 8003256:	d19b      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000

08003268 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	@ 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800327a:	f7fd fe99 	bl	8000fb0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4413      	add	r3, r2
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800328a:	f7fd fe91 	bl	8000fb0 <HAL_GetTick>
 800328e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003298:	4b3d      	ldr	r3, [pc, #244]	@ (8003390 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00da      	lsls	r2, r3, #3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	0d1b      	lsrs	r3, r3, #20
 80032a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032b0:	e060      	b.n	8003374 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80032b8:	d107      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032d0:	d050      	beq.n	8003374 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032d2:	f7fd fe6d 	bl	8000fb0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032de:	429a      	cmp	r2, r3
 80032e0:	d902      	bls.n	80032e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d13d      	bne.n	8003364 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003300:	d111      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800330a:	d004      	beq.n	8003316 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003314:	d107      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003324:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800332e:	d10f      	bne.n	8003350 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800334e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e010      	b.n	8003386 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	3b01      	subs	r3, #1
 8003372:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d196      	bne.n	80032b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3728      	adds	r7, #40	@ 0x28
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000000 	.word	0x20000000

08003394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7ff ff5b 	bl	8003268 <SPI_WaitFifoStateUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d007      	beq.n	80033c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e027      	b.n	8003418 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2180      	movs	r1, #128	@ 0x80
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff fec0 	bl	8003158 <SPI_WaitFlagStateUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e014      	b.n	8003418 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff ff34 	bl	8003268 <SPI_WaitFifoStateUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e000      	b.n	8003418 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e049      	b.n	80034c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fc3a 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fa74 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e049      	b.n	8003574 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f841 	bl	800357c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f000 fa1d 	bl	800394c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e0ff      	b.n	80037ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b14      	cmp	r3, #20
 80035ba:	f200 80f0 	bhi.w	800379e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035be:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c4:	08003619 	.word	0x08003619
 80035c8:	0800379f 	.word	0x0800379f
 80035cc:	0800379f 	.word	0x0800379f
 80035d0:	0800379f 	.word	0x0800379f
 80035d4:	08003659 	.word	0x08003659
 80035d8:	0800379f 	.word	0x0800379f
 80035dc:	0800379f 	.word	0x0800379f
 80035e0:	0800379f 	.word	0x0800379f
 80035e4:	0800369b 	.word	0x0800369b
 80035e8:	0800379f 	.word	0x0800379f
 80035ec:	0800379f 	.word	0x0800379f
 80035f0:	0800379f 	.word	0x0800379f
 80035f4:	080036db 	.word	0x080036db
 80035f8:	0800379f 	.word	0x0800379f
 80035fc:	0800379f 	.word	0x0800379f
 8003600:	0800379f 	.word	0x0800379f
 8003604:	0800371d 	.word	0x0800371d
 8003608:	0800379f 	.word	0x0800379f
 800360c:	0800379f 	.word	0x0800379f
 8003610:	0800379f 	.word	0x0800379f
 8003614:	0800375d 	.word	0x0800375d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fa3a 	bl	8003a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0208 	orr.w	r2, r2, #8
 8003632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0204 	bic.w	r2, r2, #4
 8003642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6999      	ldr	r1, [r3, #24]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	619a      	str	r2, [r3, #24]
      break;
 8003656:	e0a5      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 faaa 	bl	8003bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	619a      	str	r2, [r3, #24]
      break;
 8003698:	e084      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fb13 	bl	8003ccc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f042 0208 	orr.w	r2, r2, #8
 80036b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0204 	bic.w	r2, r2, #4
 80036c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69d9      	ldr	r1, [r3, #28]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	61da      	str	r2, [r3, #28]
      break;
 80036d8:	e064      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fb7b 	bl	8003ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	021a      	lsls	r2, r3, #8
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	61da      	str	r2, [r3, #28]
      break;
 800371a:	e043      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fbc4 	bl	8003eb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800375a:	e023      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fc08 	bl	8003f78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003786:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800379c:	e002      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
      break;
 80037a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop

080037b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIM_ConfigClockSource+0x1c>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0b6      	b.n	8003942 <HAL_TIM_ConfigClockSource+0x18a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003810:	d03e      	beq.n	8003890 <HAL_TIM_ConfigClockSource+0xd8>
 8003812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003816:	f200 8087 	bhi.w	8003928 <HAL_TIM_ConfigClockSource+0x170>
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800381e:	f000 8086 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x176>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003826:	d87f      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003828:	2b70      	cmp	r3, #112	@ 0x70
 800382a:	d01a      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0xaa>
 800382c:	2b70      	cmp	r3, #112	@ 0x70
 800382e:	d87b      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003830:	2b60      	cmp	r3, #96	@ 0x60
 8003832:	d050      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x11e>
 8003834:	2b60      	cmp	r3, #96	@ 0x60
 8003836:	d877      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003838:	2b50      	cmp	r3, #80	@ 0x50
 800383a:	d03c      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xfe>
 800383c:	2b50      	cmp	r3, #80	@ 0x50
 800383e:	d873      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003840:	2b40      	cmp	r3, #64	@ 0x40
 8003842:	d058      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x13e>
 8003844:	2b40      	cmp	r3, #64	@ 0x40
 8003846:	d86f      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003848:	2b30      	cmp	r3, #48	@ 0x30
 800384a:	d064      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15e>
 800384c:	2b30      	cmp	r3, #48	@ 0x30
 800384e:	d86b      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003850:	2b20      	cmp	r3, #32
 8003852:	d060      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15e>
 8003854:	2b20      	cmp	r3, #32
 8003856:	d867      	bhi.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05c      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15e>
 800385c:	2b10      	cmp	r3, #16
 800385e:	d05a      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0x15e>
 8003860:	e062      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003872:	f000 fc61 	bl	8004138 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	609a      	str	r2, [r3, #8]
      break;
 800388e:	e04f      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038a0:	f000 fc4a 	bl	8004138 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038b2:	609a      	str	r2, [r3, #8]
      break;
 80038b4:	e03c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 fbbe 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2150      	movs	r1, #80	@ 0x50
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fc17 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 80038d4:	e02c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fbdd 	bl	80040a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2160      	movs	r1, #96	@ 0x60
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fc07 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 80038f4:	e01c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	461a      	mov	r2, r3
 8003904:	f000 fb9e 	bl	8004044 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2140      	movs	r1, #64	@ 0x40
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fbf7 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 8003914:	e00c      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4619      	mov	r1, r3
 8003920:	4610      	mov	r0, r2
 8003922:	f000 fbee 	bl	8004102 <TIM_ITRx_SetConfig>
      break;
 8003926:	e003      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e000      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800392e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003940:	7bfb      	ldrb	r3, [r7, #15]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a46      	ldr	r2, [pc, #280]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a43      	ldr	r2, [pc, #268]	@ (8003a7c <TIM_Base_SetConfig+0x130>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a42      	ldr	r2, [pc, #264]	@ (8003a80 <TIM_Base_SetConfig+0x134>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a41      	ldr	r2, [pc, #260]	@ (8003a84 <TIM_Base_SetConfig+0x138>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a40      	ldr	r2, [pc, #256]	@ (8003a88 <TIM_Base_SetConfig+0x13c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a35      	ldr	r2, [pc, #212]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a32      	ldr	r2, [pc, #200]	@ (8003a7c <TIM_Base_SetConfig+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a31      	ldr	r2, [pc, #196]	@ (8003a80 <TIM_Base_SetConfig+0x134>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a30      	ldr	r2, [pc, #192]	@ (8003a84 <TIM_Base_SetConfig+0x138>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a88 <TIM_Base_SetConfig+0x13c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a8c <TIM_Base_SetConfig+0x140>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003a90 <TIM_Base_SetConfig+0x144>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0x9a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a94 <TIM_Base_SetConfig+0x148>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <TIM_Base_SetConfig+0x12c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00f      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a18      	ldr	r2, [pc, #96]	@ (8003a88 <TIM_Base_SetConfig+0x13c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <TIM_Base_SetConfig+0x140>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a16      	ldr	r2, [pc, #88]	@ (8003a90 <TIM_Base_SetConfig+0x144>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0xf8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a15      	ldr	r2, [pc, #84]	@ (8003a94 <TIM_Base_SetConfig+0x148>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d103      	bne.n	8003a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f023 0201 	bic.w	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	611a      	str	r2, [r3, #16]
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40012c00 	.word	0x40012c00
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40013400 	.word	0x40013400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40014400 	.word	0x40014400
 8003a94:	40014800 	.word	0x40014800

08003a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 0201 	bic.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 0302 	bic.w	r3, r3, #2
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba4 <TIM_OC1_SetConfig+0x10c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00f      	beq.n	8003b18 <TIM_OC1_SetConfig+0x80>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba8 <TIM_OC1_SetConfig+0x110>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <TIM_OC1_SetConfig+0x80>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2a      	ldr	r2, [pc, #168]	@ (8003bac <TIM_OC1_SetConfig+0x114>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d007      	beq.n	8003b18 <TIM_OC1_SetConfig+0x80>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a29      	ldr	r2, [pc, #164]	@ (8003bb0 <TIM_OC1_SetConfig+0x118>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_OC1_SetConfig+0x80>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a28      	ldr	r2, [pc, #160]	@ (8003bb4 <TIM_OC1_SetConfig+0x11c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10c      	bne.n	8003b32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0308 	bic.w	r3, r3, #8
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <TIM_OC1_SetConfig+0x10c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00f      	beq.n	8003b5a <TIM_OC1_SetConfig+0xc2>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <TIM_OC1_SetConfig+0x110>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_OC1_SetConfig+0xc2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <TIM_OC1_SetConfig+0x114>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_OC1_SetConfig+0xc2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a18      	ldr	r2, [pc, #96]	@ (8003bb0 <TIM_OC1_SetConfig+0x118>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC1_SetConfig+0xc2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a17      	ldr	r2, [pc, #92]	@ (8003bb4 <TIM_OC1_SetConfig+0x11c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d111      	bne.n	8003b7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	621a      	str	r2, [r3, #32]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800

08003bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f023 0210 	bic.w	r2, r3, #16
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0320 	bic.w	r3, r3, #32
 8003c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a28      	ldr	r2, [pc, #160]	@ (8003cb8 <TIM_OC2_SetConfig+0x100>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC2_SetConfig+0x6c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a27      	ldr	r2, [pc, #156]	@ (8003cbc <TIM_OC2_SetConfig+0x104>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10d      	bne.n	8003c40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <TIM_OC2_SetConfig+0x100>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00f      	beq.n	8003c68 <TIM_OC2_SetConfig+0xb0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <TIM_OC2_SetConfig+0x104>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_OC2_SetConfig+0xb0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <TIM_OC2_SetConfig+0x108>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_OC2_SetConfig+0xb0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <TIM_OC2_SetConfig+0x10c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_OC2_SetConfig+0xb0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <TIM_OC2_SetConfig+0x110>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d113      	bne.n	8003c90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800

08003ccc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <TIM_OC3_SetConfig+0xfc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC3_SetConfig+0x6a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <TIM_OC3_SetConfig+0x100>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10d      	bne.n	8003d52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc8 <TIM_OC3_SetConfig+0xfc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_OC3_SetConfig+0xae>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <TIM_OC3_SetConfig+0x100>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_OC3_SetConfig+0xae>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd0 <TIM_OC3_SetConfig+0x104>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_OC3_SetConfig+0xae>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a19      	ldr	r2, [pc, #100]	@ (8003dd4 <TIM_OC3_SetConfig+0x108>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_OC3_SetConfig+0xae>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a18      	ldr	r2, [pc, #96]	@ (8003dd8 <TIM_OC3_SetConfig+0x10c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d113      	bne.n	8003da2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	621a      	str	r2, [r3, #32]
}
 8003dbc:	bf00      	nop
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800

08003ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	031b      	lsls	r3, r3, #12
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	@ (8003e9c <TIM_OC4_SetConfig+0xc0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00f      	beq.n	8003e60 <TIM_OC4_SetConfig+0x84>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <TIM_OC4_SetConfig+0xc4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <TIM_OC4_SetConfig+0x84>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <TIM_OC4_SetConfig+0xc8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <TIM_OC4_SetConfig+0x84>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <TIM_OC4_SetConfig+0xcc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_OC4_SetConfig+0x84>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	@ (8003eac <TIM_OC4_SetConfig+0xd0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	019b      	lsls	r3, r3, #6
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ef4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a17      	ldr	r2, [pc, #92]	@ (8003f64 <TIM_OC5_SetConfig+0xb4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00f      	beq.n	8003f2a <TIM_OC5_SetConfig+0x7a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <TIM_OC5_SetConfig+0xb8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_OC5_SetConfig+0x7a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a15      	ldr	r2, [pc, #84]	@ (8003f6c <TIM_OC5_SetConfig+0xbc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC5_SetConfig+0x7a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <TIM_OC5_SetConfig+0xc0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC5_SetConfig+0x7a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <TIM_OC5_SetConfig+0xc4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d109      	bne.n	8003f3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	621a      	str	r2, [r3, #32]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40013400 	.word	0x40013400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800

08003f78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	051b      	lsls	r3, r3, #20
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <TIM_OC6_SetConfig+0xb8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_OC6_SetConfig+0x7c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <TIM_OC6_SetConfig+0xbc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_OC6_SetConfig+0x7c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <TIM_OC6_SetConfig+0xc0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_OC6_SetConfig+0x7c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a15      	ldr	r2, [pc, #84]	@ (800403c <TIM_OC6_SetConfig+0xc4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_OC6_SetConfig+0x7c>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <TIM_OC6_SetConfig+0xc8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d109      	bne.n	8004008 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40013400 	.word	0x40013400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0201 	bic.w	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800406e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 030a 	bic.w	r3, r3, #10
 8004080:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
 8004088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b087      	sub	sp, #28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f023 0210 	bic.w	r2, r3, #16
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	031b      	lsls	r3, r3, #12
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	f043 0307 	orr.w	r3, r3, #7
 8004124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004152:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	021a      	lsls	r2, r3, #8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	431a      	orrs	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e068      	b.n	8004262 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2d      	ldr	r2, [pc, #180]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d108      	bne.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d018      	beq.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1a      	ldr	r2, [pc, #104]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a18      	ldr	r2, [pc, #96]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10c      	bne.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800423c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	4313      	orrs	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40013400 	.word	0x40013400
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40014000 	.word	0x40014000

08004288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e040      	b.n	800431c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fc fd8a 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2224      	movs	r2, #36	@ 0x24
 80042b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0201 	bic.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fe90 	bl	8004ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fbd5 	bl	8004a84 <UART_SetConfig>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e01b      	b.n	800431c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 ff0f 	bl	8005138 <UART_CheckIdleState>
 800431a:	4603      	mov	r3, r0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08a      	sub	sp, #40	@ 0x28
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004338:	2b20      	cmp	r3, #32
 800433a:	d177      	bne.n	800442c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_UART_Transmit+0x24>
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e070      	b.n	800442e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2221      	movs	r2, #33	@ 0x21
 8004358:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800435a:	f7fc fe29 	bl	8000fb0 <HAL_GetTick>
 800435e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004378:	d108      	bne.n	800438c <HAL_UART_Transmit+0x68>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e003      	b.n	8004394 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004394:	e02f      	b.n	80043f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	@ 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 ff71 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e03b      	b.n	800442e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10b      	bne.n	80043d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c8:	b292      	uxth	r2, r2
 80043ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	3302      	adds	r3, #2
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e007      	b.n	80043e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1c9      	bne.n	8004396 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	2140      	movs	r1, #64	@ 0x40
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 ff3b 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e005      	b.n	800442e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3720      	adds	r7, #32
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b0ba      	sub	sp, #232	@ 0xe8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800445e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004462:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004466:	4013      	ands	r3, r2
 8004468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800446c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d115      	bne.n	80044a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00f      	beq.n	80044a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 82ca 	beq.w	8004a2a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
      }
      return;
 800449e:	e2c4      	b.n	8004a2a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80044a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8117 	beq.w	80046d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80044b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80044ba:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_UART_IRQHandler+0x298>)
 80044bc:	4013      	ands	r3, r2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 810a 	beq.w	80046d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d011      	beq.n	80044f4 <HAL_UART_IRQHandler+0xbc>
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2201      	movs	r2, #1
 80044e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ea:	f043 0201 	orr.w	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d011      	beq.n	8004524 <HAL_UART_IRQHandler+0xec>
 8004500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2202      	movs	r2, #2
 8004512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800451a:	f043 0204 	orr.w	r2, r3, #4
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d011      	beq.n	8004554 <HAL_UART_IRQHandler+0x11c>
 8004530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2204      	movs	r2, #4
 8004542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454a:	f043 0202 	orr.w	r2, r3, #2
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d017      	beq.n	8004590 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800456c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004570:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2208      	movs	r2, #8
 800457e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004586:	f043 0208 	orr.w	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <HAL_UART_IRQHandler+0x18a>
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8230 	beq.w	8004a2e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d2:	f003 0320 	and.w	r3, r3, #32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d007      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460a:	2b40      	cmp	r3, #64	@ 0x40
 800460c:	d005      	beq.n	800461a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800460e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004612:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004616:	2b00      	cmp	r3, #0
 8004618:	d04f      	beq.n	80046ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fea1 	bl	8005362 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b40      	cmp	r3, #64	@ 0x40
 800462c:	d141      	bne.n	80046b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800464c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800465a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800465e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1d9      	bne.n	800462e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467e:	2b00      	cmp	r3, #0
 8004680:	d013      	beq.n	80046aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004686:	4a13      	ldr	r2, [pc, #76]	@ (80046d4 <HAL_UART_IRQHandler+0x29c>)
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc fe0d 	bl	80012ae <HAL_DMA_Abort_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d017      	beq.n	80046ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046a4:	4610      	mov	r0, r2
 80046a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	e00f      	b.n	80046ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9d4 	bl	8004a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	e00b      	b.n	80046ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9d0 	bl	8004a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b8:	e007      	b.n	80046ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9cc 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80046c8:	e1b1      	b.n	8004a2e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ca:	bf00      	nop
    return;
 80046cc:	e1af      	b.n	8004a2e <HAL_UART_IRQHandler+0x5f6>
 80046ce:	bf00      	nop
 80046d0:	04000120 	.word	0x04000120
 80046d4:	0800542b 	.word	0x0800542b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f040 816a 	bne.w	80049b6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8163 	beq.w	80049b6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 815c 	beq.w	80049b6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2210      	movs	r2, #16
 8004704:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004710:	2b40      	cmp	r3, #64	@ 0x40
 8004712:	f040 80d4 	bne.w	80048be <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004722:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80ad 	beq.w	8004886 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004736:	429a      	cmp	r2, r3
 8004738:	f080 80a5 	bcs.w	8004886 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004742:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	f040 8086 	bne.w	8004864 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800476c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004782:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004786:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800478e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800479a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1da      	bne.n	8004758 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80047b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80047ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80047ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80047d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e1      	bne.n	80047a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004802:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004804:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004808:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e3      	bne.n	80047de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004834:	f023 0310 	bic.w	r3, r3, #16
 8004838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004846:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004848:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800484c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e4      	bne.n	8004824 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	4618      	mov	r0, r3
 8004860:	f7fc fce7 	bl	8001232 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004876:	b29b      	uxth	r3, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	b29b      	uxth	r3, r3
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8f4 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004884:	e0d5      	b.n	8004a32 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800488c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004890:	429a      	cmp	r2, r3
 8004892:	f040 80ce 	bne.w	8004a32 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	f040 80c5 	bne.w	8004a32 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8d8 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
      return;
 80048bc:	e0b9      	b.n	8004a32 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80ab 	beq.w	8004a36 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80048e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a6 	beq.w	8004a36 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800490c:	647b      	str	r3, [r7, #68]	@ 0x44
 800490e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800491a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e4      	bne.n	80048ea <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	623b      	str	r3, [r7, #32]
   return(result);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3308      	adds	r3, #8
 8004940:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004944:	633a      	str	r2, [r7, #48]	@ 0x30
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800494a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e3      	bne.n	8004920 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	60fb      	str	r3, [r7, #12]
   return(result);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	69b9      	ldr	r1, [r7, #24]
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	617b      	str	r3, [r7, #20]
   return(result);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e4      	bne.n	800496c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f85c 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049b4:	e03f      	b.n	8004a36 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00e      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5a8>
 80049c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80049d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fd66 	bl	80054aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049de:	e02d      	b.n	8004a3c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00e      	beq.n	8004a0a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01c      	beq.n	8004a3a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
    }
    return;
 8004a08:	e017      	b.n	8004a3a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d012      	beq.n	8004a3c <HAL_UART_IRQHandler+0x604>
 8004a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fd17 	bl	8005456 <UART_EndTransmit_IT>
    return;
 8004a28:	e008      	b.n	8004a3c <HAL_UART_IRQHandler+0x604>
      return;
 8004a2a:	bf00      	nop
 8004a2c:	e006      	b.n	8004a3c <HAL_UART_IRQHandler+0x604>
    return;
 8004a2e:	bf00      	nop
 8004a30:	e004      	b.n	8004a3c <HAL_UART_IRQHandler+0x604>
      return;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_UART_IRQHandler+0x604>
      return;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_UART_IRQHandler+0x604>
    return;
 8004a3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a3c:	37e8      	adds	r7, #232	@ 0xe8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b08a      	sub	sp, #40	@ 0x28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4ba4      	ldr	r3, [pc, #656]	@ (8004d44 <UART_SetConfig+0x2c0>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a99      	ldr	r2, [pc, #612]	@ (8004d48 <UART_SetConfig+0x2c4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aec:	4313      	orrs	r3, r2
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a90      	ldr	r2, [pc, #576]	@ (8004d4c <UART_SetConfig+0x2c8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d126      	bne.n	8004b5c <UART_SetConfig+0xd8>
 8004b0e:	4b90      	ldr	r3, [pc, #576]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b03      	cmp	r3, #3
 8004b1a:	d81b      	bhi.n	8004b54 <UART_SetConfig+0xd0>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0xa0>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b45 	.word	0x08004b45
 8004b2c:	08004b3d 	.word	0x08004b3d
 8004b30:	08004b4d 	.word	0x08004b4d
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e116      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e112      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4a:	e10e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b52:	e10a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b5a:	e106      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a7c      	ldr	r2, [pc, #496]	@ (8004d54 <UART_SetConfig+0x2d0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d138      	bne.n	8004bd8 <UART_SetConfig+0x154>
 8004b66:	4b7a      	ldr	r3, [pc, #488]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	2b0c      	cmp	r3, #12
 8004b72:	d82d      	bhi.n	8004bd0 <UART_SetConfig+0x14c>
 8004b74:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <UART_SetConfig+0xf8>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bd1 	.word	0x08004bd1
 8004b84:	08004bd1 	.word	0x08004bd1
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bc1 	.word	0x08004bc1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bd1 	.word	0x08004bd1
 8004b98:	08004bd1 	.word	0x08004bd1
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb6:	e0d8      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	e0d4      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc6:	e0d0      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e0cc      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e0c8      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d58 <UART_SetConfig+0x2d4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d125      	bne.n	8004c2e <UART_SetConfig+0x1aa>
 8004be2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bec:	2b30      	cmp	r3, #48	@ 0x30
 8004bee:	d016      	beq.n	8004c1e <UART_SetConfig+0x19a>
 8004bf0:	2b30      	cmp	r3, #48	@ 0x30
 8004bf2:	d818      	bhi.n	8004c26 <UART_SetConfig+0x1a2>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d00a      	beq.n	8004c0e <UART_SetConfig+0x18a>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d814      	bhi.n	8004c26 <UART_SetConfig+0x1a2>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <UART_SetConfig+0x182>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d008      	beq.n	8004c16 <UART_SetConfig+0x192>
 8004c04:	e00f      	b.n	8004c26 <UART_SetConfig+0x1a2>
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0c:	e0ad      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c14:	e0a9      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c16:	2304      	movs	r3, #4
 8004c18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1c:	e0a5      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c24:	e0a1      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c26:	2310      	movs	r3, #16
 8004c28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2c:	e09d      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a4a      	ldr	r2, [pc, #296]	@ (8004d5c <UART_SetConfig+0x2d8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d125      	bne.n	8004c84 <UART_SetConfig+0x200>
 8004c38:	4b45      	ldr	r3, [pc, #276]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c42:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c44:	d016      	beq.n	8004c74 <UART_SetConfig+0x1f0>
 8004c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c48:	d818      	bhi.n	8004c7c <UART_SetConfig+0x1f8>
 8004c4a:	2b80      	cmp	r3, #128	@ 0x80
 8004c4c:	d00a      	beq.n	8004c64 <UART_SetConfig+0x1e0>
 8004c4e:	2b80      	cmp	r3, #128	@ 0x80
 8004c50:	d814      	bhi.n	8004c7c <UART_SetConfig+0x1f8>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <UART_SetConfig+0x1d8>
 8004c56:	2b40      	cmp	r3, #64	@ 0x40
 8004c58:	d008      	beq.n	8004c6c <UART_SetConfig+0x1e8>
 8004c5a:	e00f      	b.n	8004c7c <UART_SetConfig+0x1f8>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c62:	e082      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c64:	2302      	movs	r3, #2
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6a:	e07e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c72:	e07a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e076      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e072      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a35      	ldr	r2, [pc, #212]	@ (8004d60 <UART_SetConfig+0x2dc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d12a      	bne.n	8004ce4 <UART_SetConfig+0x260>
 8004c8e:	4b30      	ldr	r3, [pc, #192]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c9c:	d01a      	beq.n	8004cd4 <UART_SetConfig+0x250>
 8004c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca2:	d81b      	bhi.n	8004cdc <UART_SetConfig+0x258>
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca8:	d00c      	beq.n	8004cc4 <UART_SetConfig+0x240>
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cae:	d815      	bhi.n	8004cdc <UART_SetConfig+0x258>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <UART_SetConfig+0x238>
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb8:	d008      	beq.n	8004ccc <UART_SetConfig+0x248>
 8004cba:	e00f      	b.n	8004cdc <UART_SetConfig+0x258>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	e052      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cca:	e04e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd2:	e04a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cda:	e046      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce2:	e042      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a17      	ldr	r2, [pc, #92]	@ (8004d48 <UART_SetConfig+0x2c4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d13a      	bne.n	8004d64 <UART_SetConfig+0x2e0>
 8004cee:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <UART_SetConfig+0x2cc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cfc:	d01a      	beq.n	8004d34 <UART_SetConfig+0x2b0>
 8004cfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d02:	d81b      	bhi.n	8004d3c <UART_SetConfig+0x2b8>
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d08:	d00c      	beq.n	8004d24 <UART_SetConfig+0x2a0>
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d0e:	d815      	bhi.n	8004d3c <UART_SetConfig+0x2b8>
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <UART_SetConfig+0x298>
 8004d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d18:	d008      	beq.n	8004d2c <UART_SetConfig+0x2a8>
 8004d1a:	e00f      	b.n	8004d3c <UART_SetConfig+0x2b8>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d22:	e022      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d24:	2302      	movs	r3, #2
 8004d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2a:	e01e      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d32:	e01a      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d34:	2308      	movs	r3, #8
 8004d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3a:	e016      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d42:	e012      	b.n	8004d6a <UART_SetConfig+0x2e6>
 8004d44:	efff69f3 	.word	0xefff69f3
 8004d48:	40008000 	.word	0x40008000
 8004d4c:	40013800 	.word	0x40013800
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40004400 	.word	0x40004400
 8004d58:	40004800 	.word	0x40004800
 8004d5c:	40004c00 	.word	0x40004c00
 8004d60:	40005000 	.word	0x40005000
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a9f      	ldr	r2, [pc, #636]	@ (8004fec <UART_SetConfig+0x568>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d17a      	bne.n	8004e6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d824      	bhi.n	8004dc6 <UART_SetConfig+0x342>
 8004d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <UART_SetConfig+0x300>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004dc7 	.word	0x08004dc7
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004dc7 	.word	0x08004dc7
 8004d94:	08004db7 	.word	0x08004db7
 8004d98:	08004dc7 	.word	0x08004dc7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dc7 	.word	0x08004dc7
 8004da4:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fd fa74 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e010      	b.n	8004dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff0 <UART_SetConfig+0x56c>)
 8004db2:	61fb      	str	r3, [r7, #28]
        break;
 8004db4:	e00d      	b.n	8004dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fd f9d5 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8004dba:	61f8      	str	r0, [r7, #28]
        break;
 8004dbc:	e009      	b.n	8004dd2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e005      	b.n	8004dd2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80fb 	beq.w	8004fd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d305      	bcc.n	8004df6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004df0:	69fa      	ldr	r2, [r7, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d903      	bls.n	8004dfe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dfc:	e0e8      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	2200      	movs	r2, #0
 8004e02:	461c      	mov	r4, r3
 8004e04:	4615      	mov	r5, r2
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	022b      	lsls	r3, r5, #8
 8004e10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e14:	0222      	lsls	r2, r4, #8
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	6849      	ldr	r1, [r1, #4]
 8004e1a:	0849      	lsrs	r1, r1, #1
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	4688      	mov	r8, r1
 8004e20:	4681      	mov	r9, r0
 8004e22:	eb12 0a08 	adds.w	sl, r2, r8
 8004e26:	eb43 0b09 	adc.w	fp, r3, r9
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e38:	4650      	mov	r0, sl
 8004e3a:	4659      	mov	r1, fp
 8004e3c:	f7fb fa18 	bl	8000270 <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4613      	mov	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e4e:	d308      	bcc.n	8004e62 <UART_SetConfig+0x3de>
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e56:	d204      	bcs.n	8004e62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e0b6      	b.n	8004fd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e68:	e0b2      	b.n	8004fd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e72:	d15e      	bne.n	8004f32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d828      	bhi.n	8004ece <UART_SetConfig+0x44a>
 8004e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <UART_SetConfig+0x400>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb9 	.word	0x08004eb9
 8004e90:	08004ecf 	.word	0x08004ecf
 8004e94:	08004ebf 	.word	0x08004ebf
 8004e98:	08004ecf 	.word	0x08004ecf
 8004e9c:	08004ecf 	.word	0x08004ecf
 8004ea0:	08004ecf 	.word	0x08004ecf
 8004ea4:	08004ec7 	.word	0x08004ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea8:	f7fd f9f4 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8004eac:	61f8      	str	r0, [r7, #28]
        break;
 8004eae:	e014      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb0:	f7fd fa06 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8004eb4:	61f8      	str	r0, [r7, #28]
        break;
 8004eb6:	e010      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff0 <UART_SetConfig+0x56c>)
 8004eba:	61fb      	str	r3, [r7, #28]
        break;
 8004ebc:	e00d      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ebe:	f7fd f951 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8004ec2:	61f8      	str	r0, [r7, #28]
        break;
 8004ec4:	e009      	b.n	8004eda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eca:	61fb      	str	r3, [r7, #28]
        break;
 8004ecc:	e005      	b.n	8004eda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d077      	beq.n	8004fd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005a      	lsls	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d916      	bls.n	8004f2a <UART_SetConfig+0x4a6>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f02:	d212      	bcs.n	8004f2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	f023 030f 	bic.w	r3, r3, #15
 8004f0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	8afb      	ldrh	r3, [r7, #22]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	8afa      	ldrh	r2, [r7, #22]
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e052      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f30:	e04e      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d827      	bhi.n	8004f8a <UART_SetConfig+0x506>
 8004f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <UART_SetConfig+0x4bc>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fd f996 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8004f68:	61f8      	str	r0, [r7, #28]
        break;
 8004f6a:	e014      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fd f9a8 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8004f70:	61f8      	str	r0, [r7, #28]
        break;
 8004f72:	e010      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b1e      	ldr	r3, [pc, #120]	@ (8004ff0 <UART_SetConfig+0x56c>)
 8004f76:	61fb      	str	r3, [r7, #28]
        break;
 8004f78:	e00d      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fd f8f3 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8004f7e:	61f8      	str	r0, [r7, #28]
        break;
 8004f80:	e009      	b.n	8004f96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f86:	61fb      	str	r3, [r7, #28]
        break;
 8004f88:	e005      	b.n	8004f96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f94:	bf00      	nop
    }

    if (pclk != 0U)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d019      	beq.n	8004fd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	085a      	lsrs	r2, r3, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	d909      	bls.n	8004fca <UART_SetConfig+0x546>
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fbc:	d205      	bcs.n	8004fca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
 8004fc8:	e002      	b.n	8004fd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3728      	adds	r7, #40	@ 0x28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fea:	bf00      	nop
 8004fec:	40008000 	.word	0x40008000
 8004ff0:	00f42400 	.word	0x00f42400

08004ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f2:	d10a      	bne.n	800510a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b098      	sub	sp, #96	@ 0x60
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005148:	f7fb ff32 	bl	8000fb0 <HAL_GetTick>
 800514c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d12e      	bne.n	80051ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f88c 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d021      	beq.n	80051ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800518a:	653b      	str	r3, [r7, #80]	@ 0x50
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800519a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e6      	bne.n	8005176 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e062      	b.n	8005280 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d149      	bne.n	800525c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d0:	2200      	movs	r2, #0
 80051d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f856 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03c      	beq.n	800525c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	623b      	str	r3, [r7, #32]
   return(result);
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005200:	633b      	str	r3, [r7, #48]	@ 0x30
 8005202:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800520e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e6      	bne.n	80051e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	e853 3f00 	ldrex	r3, [r3]
 8005222:	60fb      	str	r3, [r7, #12]
   return(result);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3308      	adds	r3, #8
 8005232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005234:	61fa      	str	r2, [r7, #28]
 8005236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	69b9      	ldr	r1, [r7, #24]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	617b      	str	r3, [r7, #20]
   return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e5      	bne.n	8005214 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e011      	b.n	8005280 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3758      	adds	r7, #88	@ 0x58
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005298:	e04f      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052a0:	d04b      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fb fe85 	bl	8000fb0 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e04e      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d037      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b80      	cmp	r3, #128	@ 0x80
 80052ce:	d034      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b40      	cmp	r3, #64	@ 0x40
 80052d4:	d031      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d110      	bne.n	8005306 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2208      	movs	r2, #8
 80052ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f838 	bl	8005362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2208      	movs	r2, #8
 80052f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e029      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005314:	d111      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800531e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f81e 	bl	8005362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e00f      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4013      	ands	r3, r2
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	bf0c      	ite	eq
 800534a:	2301      	moveq	r3, #1
 800534c:	2300      	movne	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	429a      	cmp	r2, r3
 8005356:	d0a0      	beq.n	800529a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005362:	b480      	push	{r7}
 8005364:	b095      	sub	sp, #84	@ 0x54
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800537e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005388:	643b      	str	r3, [r7, #64]	@ 0x40
 800538a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800538e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d118      	bne.n	800540a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6979      	ldr	r1, [r7, #20]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	613b      	str	r3, [r7, #16]
   return(result);
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800541e:	bf00      	nop
 8005420:	3754      	adds	r7, #84	@ 0x54
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b084      	sub	sp, #16
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f7ff fb05 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b088      	sub	sp, #32
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	60bb      	str	r3, [r7, #8]
   return(result);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	61bb      	str	r3, [r7, #24]
 800547e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6979      	ldr	r1, [r7, #20]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	613b      	str	r3, [r7, #16]
   return(result);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fad1 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a2:	bf00      	nop
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <std>:
 80054c0:	2300      	movs	r3, #0
 80054c2:	b510      	push	{r4, lr}
 80054c4:	4604      	mov	r4, r0
 80054c6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ce:	6083      	str	r3, [r0, #8]
 80054d0:	8181      	strh	r1, [r0, #12]
 80054d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054d4:	81c2      	strh	r2, [r0, #14]
 80054d6:	6183      	str	r3, [r0, #24]
 80054d8:	4619      	mov	r1, r3
 80054da:	2208      	movs	r2, #8
 80054dc:	305c      	adds	r0, #92	@ 0x5c
 80054de:	f000 f9f9 	bl	80058d4 <memset>
 80054e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005518 <std+0x58>)
 80054e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80054e6:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <std+0x5c>)
 80054e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <std+0x60>)
 80054ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005524 <std+0x64>)
 80054f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <std+0x68>)
 80054f4:	6224      	str	r4, [r4, #32]
 80054f6:	429c      	cmp	r4, r3
 80054f8:	d006      	beq.n	8005508 <std+0x48>
 80054fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054fe:	4294      	cmp	r4, r2
 8005500:	d002      	beq.n	8005508 <std+0x48>
 8005502:	33d0      	adds	r3, #208	@ 0xd0
 8005504:	429c      	cmp	r4, r3
 8005506:	d105      	bne.n	8005514 <std+0x54>
 8005508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800550c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005510:	f000 ba58 	b.w	80059c4 <__retarget_lock_init_recursive>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	bf00      	nop
 8005518:	08005725 	.word	0x08005725
 800551c:	08005747 	.word	0x08005747
 8005520:	0800577f 	.word	0x0800577f
 8005524:	080057a3 	.word	0x080057a3
 8005528:	200001c4 	.word	0x200001c4

0800552c <stdio_exit_handler>:
 800552c:	4a02      	ldr	r2, [pc, #8]	@ (8005538 <stdio_exit_handler+0xc>)
 800552e:	4903      	ldr	r1, [pc, #12]	@ (800553c <stdio_exit_handler+0x10>)
 8005530:	4803      	ldr	r0, [pc, #12]	@ (8005540 <stdio_exit_handler+0x14>)
 8005532:	f000 b869 	b.w	8005608 <_fwalk_sglue>
 8005536:	bf00      	nop
 8005538:	2000000c 	.word	0x2000000c
 800553c:	08006265 	.word	0x08006265
 8005540:	2000001c 	.word	0x2000001c

08005544 <cleanup_stdio>:
 8005544:	6841      	ldr	r1, [r0, #4]
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <cleanup_stdio+0x34>)
 8005548:	4299      	cmp	r1, r3
 800554a:	b510      	push	{r4, lr}
 800554c:	4604      	mov	r4, r0
 800554e:	d001      	beq.n	8005554 <cleanup_stdio+0x10>
 8005550:	f000 fe88 	bl	8006264 <_fflush_r>
 8005554:	68a1      	ldr	r1, [r4, #8]
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <cleanup_stdio+0x38>)
 8005558:	4299      	cmp	r1, r3
 800555a:	d002      	beq.n	8005562 <cleanup_stdio+0x1e>
 800555c:	4620      	mov	r0, r4
 800555e:	f000 fe81 	bl	8006264 <_fflush_r>
 8005562:	68e1      	ldr	r1, [r4, #12]
 8005564:	4b06      	ldr	r3, [pc, #24]	@ (8005580 <cleanup_stdio+0x3c>)
 8005566:	4299      	cmp	r1, r3
 8005568:	d004      	beq.n	8005574 <cleanup_stdio+0x30>
 800556a:	4620      	mov	r0, r4
 800556c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005570:	f000 be78 	b.w	8006264 <_fflush_r>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	bf00      	nop
 8005578:	200001c4 	.word	0x200001c4
 800557c:	2000022c 	.word	0x2000022c
 8005580:	20000294 	.word	0x20000294

08005584 <global_stdio_init.part.0>:
 8005584:	b510      	push	{r4, lr}
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <global_stdio_init.part.0+0x30>)
 8005588:	4c0b      	ldr	r4, [pc, #44]	@ (80055b8 <global_stdio_init.part.0+0x34>)
 800558a:	4a0c      	ldr	r2, [pc, #48]	@ (80055bc <global_stdio_init.part.0+0x38>)
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	4620      	mov	r0, r4
 8005590:	2200      	movs	r2, #0
 8005592:	2104      	movs	r1, #4
 8005594:	f7ff ff94 	bl	80054c0 <std>
 8005598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800559c:	2201      	movs	r2, #1
 800559e:	2109      	movs	r1, #9
 80055a0:	f7ff ff8e 	bl	80054c0 <std>
 80055a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055a8:	2202      	movs	r2, #2
 80055aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ae:	2112      	movs	r1, #18
 80055b0:	f7ff bf86 	b.w	80054c0 <std>
 80055b4:	200002fc 	.word	0x200002fc
 80055b8:	200001c4 	.word	0x200001c4
 80055bc:	0800552d 	.word	0x0800552d

080055c0 <__sfp_lock_acquire>:
 80055c0:	4801      	ldr	r0, [pc, #4]	@ (80055c8 <__sfp_lock_acquire+0x8>)
 80055c2:	f000 ba00 	b.w	80059c6 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	20000305 	.word	0x20000305

080055cc <__sfp_lock_release>:
 80055cc:	4801      	ldr	r0, [pc, #4]	@ (80055d4 <__sfp_lock_release+0x8>)
 80055ce:	f000 b9fb 	b.w	80059c8 <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	20000305 	.word	0x20000305

080055d8 <__sinit>:
 80055d8:	b510      	push	{r4, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	f7ff fff0 	bl	80055c0 <__sfp_lock_acquire>
 80055e0:	6a23      	ldr	r3, [r4, #32]
 80055e2:	b11b      	cbz	r3, 80055ec <__sinit+0x14>
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e8:	f7ff bff0 	b.w	80055cc <__sfp_lock_release>
 80055ec:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <__sinit+0x28>)
 80055ee:	6223      	str	r3, [r4, #32]
 80055f0:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <__sinit+0x2c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f5      	bne.n	80055e4 <__sinit+0xc>
 80055f8:	f7ff ffc4 	bl	8005584 <global_stdio_init.part.0>
 80055fc:	e7f2      	b.n	80055e4 <__sinit+0xc>
 80055fe:	bf00      	nop
 8005600:	08005545 	.word	0x08005545
 8005604:	200002fc 	.word	0x200002fc

08005608 <_fwalk_sglue>:
 8005608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800560c:	4607      	mov	r7, r0
 800560e:	4688      	mov	r8, r1
 8005610:	4614      	mov	r4, r2
 8005612:	2600      	movs	r6, #0
 8005614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005618:	f1b9 0901 	subs.w	r9, r9, #1
 800561c:	d505      	bpl.n	800562a <_fwalk_sglue+0x22>
 800561e:	6824      	ldr	r4, [r4, #0]
 8005620:	2c00      	cmp	r4, #0
 8005622:	d1f7      	bne.n	8005614 <_fwalk_sglue+0xc>
 8005624:	4630      	mov	r0, r6
 8005626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800562a:	89ab      	ldrh	r3, [r5, #12]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d907      	bls.n	8005640 <_fwalk_sglue+0x38>
 8005630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005634:	3301      	adds	r3, #1
 8005636:	d003      	beq.n	8005640 <_fwalk_sglue+0x38>
 8005638:	4629      	mov	r1, r5
 800563a:	4638      	mov	r0, r7
 800563c:	47c0      	blx	r8
 800563e:	4306      	orrs	r6, r0
 8005640:	3568      	adds	r5, #104	@ 0x68
 8005642:	e7e9      	b.n	8005618 <_fwalk_sglue+0x10>

08005644 <iprintf>:
 8005644:	b40f      	push	{r0, r1, r2, r3}
 8005646:	b507      	push	{r0, r1, r2, lr}
 8005648:	4906      	ldr	r1, [pc, #24]	@ (8005664 <iprintf+0x20>)
 800564a:	ab04      	add	r3, sp, #16
 800564c:	6808      	ldr	r0, [r1, #0]
 800564e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005652:	6881      	ldr	r1, [r0, #8]
 8005654:	9301      	str	r3, [sp, #4]
 8005656:	f000 fadb 	bl	8005c10 <_vfiprintf_r>
 800565a:	b003      	add	sp, #12
 800565c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005660:	b004      	add	sp, #16
 8005662:	4770      	bx	lr
 8005664:	20000018 	.word	0x20000018

08005668 <_puts_r>:
 8005668:	6a03      	ldr	r3, [r0, #32]
 800566a:	b570      	push	{r4, r5, r6, lr}
 800566c:	6884      	ldr	r4, [r0, #8]
 800566e:	4605      	mov	r5, r0
 8005670:	460e      	mov	r6, r1
 8005672:	b90b      	cbnz	r3, 8005678 <_puts_r+0x10>
 8005674:	f7ff ffb0 	bl	80055d8 <__sinit>
 8005678:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800567a:	07db      	lsls	r3, r3, #31
 800567c:	d405      	bmi.n	800568a <_puts_r+0x22>
 800567e:	89a3      	ldrh	r3, [r4, #12]
 8005680:	0598      	lsls	r0, r3, #22
 8005682:	d402      	bmi.n	800568a <_puts_r+0x22>
 8005684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005686:	f000 f99e 	bl	80059c6 <__retarget_lock_acquire_recursive>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	0719      	lsls	r1, r3, #28
 800568e:	d502      	bpl.n	8005696 <_puts_r+0x2e>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d135      	bne.n	8005702 <_puts_r+0x9a>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f8c5 	bl	8005828 <__swsetup_r>
 800569e:	b380      	cbz	r0, 8005702 <_puts_r+0x9a>
 80056a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80056a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056a6:	07da      	lsls	r2, r3, #31
 80056a8:	d405      	bmi.n	80056b6 <_puts_r+0x4e>
 80056aa:	89a3      	ldrh	r3, [r4, #12]
 80056ac:	059b      	lsls	r3, r3, #22
 80056ae:	d402      	bmi.n	80056b6 <_puts_r+0x4e>
 80056b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056b2:	f000 f989 	bl	80059c8 <__retarget_lock_release_recursive>
 80056b6:	4628      	mov	r0, r5
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	da04      	bge.n	80056c8 <_puts_r+0x60>
 80056be:	69a2      	ldr	r2, [r4, #24]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	dc17      	bgt.n	80056f4 <_puts_r+0x8c>
 80056c4:	290a      	cmp	r1, #10
 80056c6:	d015      	beq.n	80056f4 <_puts_r+0x8c>
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	7019      	strb	r1, [r3, #0]
 80056d0:	68a3      	ldr	r3, [r4, #8]
 80056d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60a3      	str	r3, [r4, #8]
 80056da:	2900      	cmp	r1, #0
 80056dc:	d1ed      	bne.n	80056ba <_puts_r+0x52>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da11      	bge.n	8005706 <_puts_r+0x9e>
 80056e2:	4622      	mov	r2, r4
 80056e4:	210a      	movs	r1, #10
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f85f 	bl	80057aa <__swbuf_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d0d7      	beq.n	80056a0 <_puts_r+0x38>
 80056f0:	250a      	movs	r5, #10
 80056f2:	e7d7      	b.n	80056a4 <_puts_r+0x3c>
 80056f4:	4622      	mov	r2, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f857 	bl	80057aa <__swbuf_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1e7      	bne.n	80056d0 <_puts_r+0x68>
 8005700:	e7ce      	b.n	80056a0 <_puts_r+0x38>
 8005702:	3e01      	subs	r6, #1
 8005704:	e7e4      	b.n	80056d0 <_puts_r+0x68>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	6022      	str	r2, [r4, #0]
 800570c:	220a      	movs	r2, #10
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e7ee      	b.n	80056f0 <_puts_r+0x88>
	...

08005714 <puts>:
 8005714:	4b02      	ldr	r3, [pc, #8]	@ (8005720 <puts+0xc>)
 8005716:	4601      	mov	r1, r0
 8005718:	6818      	ldr	r0, [r3, #0]
 800571a:	f7ff bfa5 	b.w	8005668 <_puts_r>
 800571e:	bf00      	nop
 8005720:	20000018 	.word	0x20000018

08005724 <__sread>:
 8005724:	b510      	push	{r4, lr}
 8005726:	460c      	mov	r4, r1
 8005728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572c:	f000 f8fc 	bl	8005928 <_read_r>
 8005730:	2800      	cmp	r0, #0
 8005732:	bfab      	itete	ge
 8005734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005736:	89a3      	ldrhlt	r3, [r4, #12]
 8005738:	181b      	addge	r3, r3, r0
 800573a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800573e:	bfac      	ite	ge
 8005740:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005742:	81a3      	strhlt	r3, [r4, #12]
 8005744:	bd10      	pop	{r4, pc}

08005746 <__swrite>:
 8005746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574a:	461f      	mov	r7, r3
 800574c:	898b      	ldrh	r3, [r1, #12]
 800574e:	05db      	lsls	r3, r3, #23
 8005750:	4605      	mov	r5, r0
 8005752:	460c      	mov	r4, r1
 8005754:	4616      	mov	r6, r2
 8005756:	d505      	bpl.n	8005764 <__swrite+0x1e>
 8005758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800575c:	2302      	movs	r3, #2
 800575e:	2200      	movs	r2, #0
 8005760:	f000 f8d0 	bl	8005904 <_lseek_r>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800576a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	4632      	mov	r2, r6
 8005772:	463b      	mov	r3, r7
 8005774:	4628      	mov	r0, r5
 8005776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800577a:	f000 b8e7 	b.w	800594c <_write_r>

0800577e <__sseek>:
 800577e:	b510      	push	{r4, lr}
 8005780:	460c      	mov	r4, r1
 8005782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005786:	f000 f8bd 	bl	8005904 <_lseek_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	bf15      	itete	ne
 8005790:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800579a:	81a3      	strheq	r3, [r4, #12]
 800579c:	bf18      	it	ne
 800579e:	81a3      	strhne	r3, [r4, #12]
 80057a0:	bd10      	pop	{r4, pc}

080057a2 <__sclose>:
 80057a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a6:	f000 b89d 	b.w	80058e4 <_close_r>

080057aa <__swbuf_r>:
 80057aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ac:	460e      	mov	r6, r1
 80057ae:	4614      	mov	r4, r2
 80057b0:	4605      	mov	r5, r0
 80057b2:	b118      	cbz	r0, 80057bc <__swbuf_r+0x12>
 80057b4:	6a03      	ldr	r3, [r0, #32]
 80057b6:	b90b      	cbnz	r3, 80057bc <__swbuf_r+0x12>
 80057b8:	f7ff ff0e 	bl	80055d8 <__sinit>
 80057bc:	69a3      	ldr	r3, [r4, #24]
 80057be:	60a3      	str	r3, [r4, #8]
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	071a      	lsls	r2, r3, #28
 80057c4:	d501      	bpl.n	80057ca <__swbuf_r+0x20>
 80057c6:	6923      	ldr	r3, [r4, #16]
 80057c8:	b943      	cbnz	r3, 80057dc <__swbuf_r+0x32>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 f82b 	bl	8005828 <__swsetup_r>
 80057d2:	b118      	cbz	r0, 80057dc <__swbuf_r+0x32>
 80057d4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80057d8:	4638      	mov	r0, r7
 80057da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	6922      	ldr	r2, [r4, #16]
 80057e0:	1a98      	subs	r0, r3, r2
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	b2f6      	uxtb	r6, r6
 80057e6:	4283      	cmp	r3, r0
 80057e8:	4637      	mov	r7, r6
 80057ea:	dc05      	bgt.n	80057f8 <__swbuf_r+0x4e>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fd38 	bl	8006264 <_fflush_r>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1ed      	bne.n	80057d4 <__swbuf_r+0x2a>
 80057f8:	68a3      	ldr	r3, [r4, #8]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60a3      	str	r3, [r4, #8]
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	6022      	str	r2, [r4, #0]
 8005804:	701e      	strb	r6, [r3, #0]
 8005806:	6962      	ldr	r2, [r4, #20]
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	429a      	cmp	r2, r3
 800580c:	d004      	beq.n	8005818 <__swbuf_r+0x6e>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	07db      	lsls	r3, r3, #31
 8005812:	d5e1      	bpl.n	80057d8 <__swbuf_r+0x2e>
 8005814:	2e0a      	cmp	r6, #10
 8005816:	d1df      	bne.n	80057d8 <__swbuf_r+0x2e>
 8005818:	4621      	mov	r1, r4
 800581a:	4628      	mov	r0, r5
 800581c:	f000 fd22 	bl	8006264 <_fflush_r>
 8005820:	2800      	cmp	r0, #0
 8005822:	d0d9      	beq.n	80057d8 <__swbuf_r+0x2e>
 8005824:	e7d6      	b.n	80057d4 <__swbuf_r+0x2a>
	...

08005828 <__swsetup_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4b29      	ldr	r3, [pc, #164]	@ (80058d0 <__swsetup_r+0xa8>)
 800582c:	4605      	mov	r5, r0
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	460c      	mov	r4, r1
 8005832:	b118      	cbz	r0, 800583c <__swsetup_r+0x14>
 8005834:	6a03      	ldr	r3, [r0, #32]
 8005836:	b90b      	cbnz	r3, 800583c <__swsetup_r+0x14>
 8005838:	f7ff fece 	bl	80055d8 <__sinit>
 800583c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005840:	0719      	lsls	r1, r3, #28
 8005842:	d422      	bmi.n	800588a <__swsetup_r+0x62>
 8005844:	06da      	lsls	r2, r3, #27
 8005846:	d407      	bmi.n	8005858 <__swsetup_r+0x30>
 8005848:	2209      	movs	r2, #9
 800584a:	602a      	str	r2, [r5, #0]
 800584c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005856:	e033      	b.n	80058c0 <__swsetup_r+0x98>
 8005858:	0758      	lsls	r0, r3, #29
 800585a:	d512      	bpl.n	8005882 <__swsetup_r+0x5a>
 800585c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800585e:	b141      	cbz	r1, 8005872 <__swsetup_r+0x4a>
 8005860:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005864:	4299      	cmp	r1, r3
 8005866:	d002      	beq.n	800586e <__swsetup_r+0x46>
 8005868:	4628      	mov	r0, r5
 800586a:	f000 f8af 	bl	80059cc <_free_r>
 800586e:	2300      	movs	r3, #0
 8005870:	6363      	str	r3, [r4, #52]	@ 0x34
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	2300      	movs	r3, #0
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0308 	orr.w	r3, r3, #8
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	b94b      	cbnz	r3, 80058a2 <__swsetup_r+0x7a>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005898:	d003      	beq.n	80058a2 <__swsetup_r+0x7a>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 fd2f 	bl	8006300 <__smakebuf_r>
 80058a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a6:	f013 0201 	ands.w	r2, r3, #1
 80058aa:	d00a      	beq.n	80058c2 <__swsetup_r+0x9a>
 80058ac:	2200      	movs	r2, #0
 80058ae:	60a2      	str	r2, [r4, #8]
 80058b0:	6962      	ldr	r2, [r4, #20]
 80058b2:	4252      	negs	r2, r2
 80058b4:	61a2      	str	r2, [r4, #24]
 80058b6:	6922      	ldr	r2, [r4, #16]
 80058b8:	b942      	cbnz	r2, 80058cc <__swsetup_r+0xa4>
 80058ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058be:	d1c5      	bne.n	800584c <__swsetup_r+0x24>
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
 80058c2:	0799      	lsls	r1, r3, #30
 80058c4:	bf58      	it	pl
 80058c6:	6962      	ldrpl	r2, [r4, #20]
 80058c8:	60a2      	str	r2, [r4, #8]
 80058ca:	e7f4      	b.n	80058b6 <__swsetup_r+0x8e>
 80058cc:	2000      	movs	r0, #0
 80058ce:	e7f7      	b.n	80058c0 <__swsetup_r+0x98>
 80058d0:	20000018 	.word	0x20000018

080058d4 <memset>:
 80058d4:	4402      	add	r2, r0
 80058d6:	4603      	mov	r3, r0
 80058d8:	4293      	cmp	r3, r2
 80058da:	d100      	bne.n	80058de <memset+0xa>
 80058dc:	4770      	bx	lr
 80058de:	f803 1b01 	strb.w	r1, [r3], #1
 80058e2:	e7f9      	b.n	80058d8 <memset+0x4>

080058e4 <_close_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d06      	ldr	r5, [pc, #24]	@ (8005900 <_close_r+0x1c>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	602b      	str	r3, [r5, #0]
 80058f0:	f7fb f8f3 	bl	8000ada <_close>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_close_r+0x1a>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_close_r+0x1a>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	20000300 	.word	0x20000300

08005904 <_lseek_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	@ (8005924 <_lseek_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fb f908 	bl	8000b28 <_lseek>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_lseek_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_lseek_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000300 	.word	0x20000300

08005928 <_read_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d07      	ldr	r5, [pc, #28]	@ (8005948 <_read_r+0x20>)
 800592c:	4604      	mov	r4, r0
 800592e:	4608      	mov	r0, r1
 8005930:	4611      	mov	r1, r2
 8005932:	2200      	movs	r2, #0
 8005934:	602a      	str	r2, [r5, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	f7fb f896 	bl	8000a68 <_read>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_read_r+0x1e>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_read_r+0x1e>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000300 	.word	0x20000300

0800594c <_write_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4d07      	ldr	r5, [pc, #28]	@ (800596c <_write_r+0x20>)
 8005950:	4604      	mov	r4, r0
 8005952:	4608      	mov	r0, r1
 8005954:	4611      	mov	r1, r2
 8005956:	2200      	movs	r2, #0
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb f8a1 	bl	8000aa2 <_write>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_write_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_write_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000300 	.word	0x20000300

08005970 <__errno>:
 8005970:	4b01      	ldr	r3, [pc, #4]	@ (8005978 <__errno+0x8>)
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	20000018 	.word	0x20000018

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4d0d      	ldr	r5, [pc, #52]	@ (80059b4 <__libc_init_array+0x38>)
 8005980:	4c0d      	ldr	r4, [pc, #52]	@ (80059b8 <__libc_init_array+0x3c>)
 8005982:	1b64      	subs	r4, r4, r5
 8005984:	10a4      	asrs	r4, r4, #2
 8005986:	2600      	movs	r6, #0
 8005988:	42a6      	cmp	r6, r4
 800598a:	d109      	bne.n	80059a0 <__libc_init_array+0x24>
 800598c:	4d0b      	ldr	r5, [pc, #44]	@ (80059bc <__libc_init_array+0x40>)
 800598e:	4c0c      	ldr	r4, [pc, #48]	@ (80059c0 <__libc_init_array+0x44>)
 8005990:	f000 fd24 	bl	80063dc <_init>
 8005994:	1b64      	subs	r4, r4, r5
 8005996:	10a4      	asrs	r4, r4, #2
 8005998:	2600      	movs	r6, #0
 800599a:	42a6      	cmp	r6, r4
 800599c:	d105      	bne.n	80059aa <__libc_init_array+0x2e>
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a4:	4798      	blx	r3
 80059a6:	3601      	adds	r6, #1
 80059a8:	e7ee      	b.n	8005988 <__libc_init_array+0xc>
 80059aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ae:	4798      	blx	r3
 80059b0:	3601      	adds	r6, #1
 80059b2:	e7f2      	b.n	800599a <__libc_init_array+0x1e>
 80059b4:	08006518 	.word	0x08006518
 80059b8:	08006518 	.word	0x08006518
 80059bc:	08006518 	.word	0x08006518
 80059c0:	0800651c 	.word	0x0800651c

080059c4 <__retarget_lock_init_recursive>:
 80059c4:	4770      	bx	lr

080059c6 <__retarget_lock_acquire_recursive>:
 80059c6:	4770      	bx	lr

080059c8 <__retarget_lock_release_recursive>:
 80059c8:	4770      	bx	lr
	...

080059cc <_free_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4605      	mov	r5, r0
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d041      	beq.n	8005a58 <_free_r+0x8c>
 80059d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059d8:	1f0c      	subs	r4, r1, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bfb8      	it	lt
 80059de:	18e4      	addlt	r4, r4, r3
 80059e0:	f000 f8e0 	bl	8005ba4 <__malloc_lock>
 80059e4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a5c <_free_r+0x90>)
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	b933      	cbnz	r3, 80059f8 <_free_r+0x2c>
 80059ea:	6063      	str	r3, [r4, #4]
 80059ec:	6014      	str	r4, [r2, #0]
 80059ee:	4628      	mov	r0, r5
 80059f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059f4:	f000 b8dc 	b.w	8005bb0 <__malloc_unlock>
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	d908      	bls.n	8005a0e <_free_r+0x42>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	1821      	adds	r1, r4, r0
 8005a00:	428b      	cmp	r3, r1
 8005a02:	bf01      	itttt	eq
 8005a04:	6819      	ldreq	r1, [r3, #0]
 8005a06:	685b      	ldreq	r3, [r3, #4]
 8005a08:	1809      	addeq	r1, r1, r0
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	e7ed      	b.n	80059ea <_free_r+0x1e>
 8005a0e:	461a      	mov	r2, r3
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	b10b      	cbz	r3, 8005a18 <_free_r+0x4c>
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d9fa      	bls.n	8005a0e <_free_r+0x42>
 8005a18:	6811      	ldr	r1, [r2, #0]
 8005a1a:	1850      	adds	r0, r2, r1
 8005a1c:	42a0      	cmp	r0, r4
 8005a1e:	d10b      	bne.n	8005a38 <_free_r+0x6c>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	4401      	add	r1, r0
 8005a24:	1850      	adds	r0, r2, r1
 8005a26:	4283      	cmp	r3, r0
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	d1e0      	bne.n	80059ee <_free_r+0x22>
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	6053      	str	r3, [r2, #4]
 8005a32:	4408      	add	r0, r1
 8005a34:	6010      	str	r0, [r2, #0]
 8005a36:	e7da      	b.n	80059ee <_free_r+0x22>
 8005a38:	d902      	bls.n	8005a40 <_free_r+0x74>
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	e7d6      	b.n	80059ee <_free_r+0x22>
 8005a40:	6820      	ldr	r0, [r4, #0]
 8005a42:	1821      	adds	r1, r4, r0
 8005a44:	428b      	cmp	r3, r1
 8005a46:	bf04      	itt	eq
 8005a48:	6819      	ldreq	r1, [r3, #0]
 8005a4a:	685b      	ldreq	r3, [r3, #4]
 8005a4c:	6063      	str	r3, [r4, #4]
 8005a4e:	bf04      	itt	eq
 8005a50:	1809      	addeq	r1, r1, r0
 8005a52:	6021      	streq	r1, [r4, #0]
 8005a54:	6054      	str	r4, [r2, #4]
 8005a56:	e7ca      	b.n	80059ee <_free_r+0x22>
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2000030c 	.word	0x2000030c

08005a60 <sbrk_aligned>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	4e0f      	ldr	r6, [pc, #60]	@ (8005aa0 <sbrk_aligned+0x40>)
 8005a64:	460c      	mov	r4, r1
 8005a66:	6831      	ldr	r1, [r6, #0]
 8005a68:	4605      	mov	r5, r0
 8005a6a:	b911      	cbnz	r1, 8005a72 <sbrk_aligned+0x12>
 8005a6c:	f000 fca6 	bl	80063bc <_sbrk_r>
 8005a70:	6030      	str	r0, [r6, #0]
 8005a72:	4621      	mov	r1, r4
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 fca1 	bl	80063bc <_sbrk_r>
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	d103      	bne.n	8005a86 <sbrk_aligned+0x26>
 8005a7e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005a82:	4620      	mov	r0, r4
 8005a84:	bd70      	pop	{r4, r5, r6, pc}
 8005a86:	1cc4      	adds	r4, r0, #3
 8005a88:	f024 0403 	bic.w	r4, r4, #3
 8005a8c:	42a0      	cmp	r0, r4
 8005a8e:	d0f8      	beq.n	8005a82 <sbrk_aligned+0x22>
 8005a90:	1a21      	subs	r1, r4, r0
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 fc92 	bl	80063bc <_sbrk_r>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d1f2      	bne.n	8005a82 <sbrk_aligned+0x22>
 8005a9c:	e7ef      	b.n	8005a7e <sbrk_aligned+0x1e>
 8005a9e:	bf00      	nop
 8005aa0:	20000308 	.word	0x20000308

08005aa4 <_malloc_r>:
 8005aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa8:	1ccd      	adds	r5, r1, #3
 8005aaa:	f025 0503 	bic.w	r5, r5, #3
 8005aae:	3508      	adds	r5, #8
 8005ab0:	2d0c      	cmp	r5, #12
 8005ab2:	bf38      	it	cc
 8005ab4:	250c      	movcc	r5, #12
 8005ab6:	2d00      	cmp	r5, #0
 8005ab8:	4606      	mov	r6, r0
 8005aba:	db01      	blt.n	8005ac0 <_malloc_r+0x1c>
 8005abc:	42a9      	cmp	r1, r5
 8005abe:	d904      	bls.n	8005aca <_malloc_r+0x26>
 8005ac0:	230c      	movs	r3, #12
 8005ac2:	6033      	str	r3, [r6, #0]
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ba0 <_malloc_r+0xfc>
 8005ace:	f000 f869 	bl	8005ba4 <__malloc_lock>
 8005ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad6:	461c      	mov	r4, r3
 8005ad8:	bb44      	cbnz	r4, 8005b2c <_malloc_r+0x88>
 8005ada:	4629      	mov	r1, r5
 8005adc:	4630      	mov	r0, r6
 8005ade:	f7ff ffbf 	bl	8005a60 <sbrk_aligned>
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	d158      	bne.n	8005b9a <_malloc_r+0xf6>
 8005ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8005aec:	4627      	mov	r7, r4
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	d143      	bne.n	8005b7a <_malloc_r+0xd6>
 8005af2:	2c00      	cmp	r4, #0
 8005af4:	d04b      	beq.n	8005b8e <_malloc_r+0xea>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	4639      	mov	r1, r7
 8005afa:	4630      	mov	r0, r6
 8005afc:	eb04 0903 	add.w	r9, r4, r3
 8005b00:	f000 fc5c 	bl	80063bc <_sbrk_r>
 8005b04:	4581      	cmp	r9, r0
 8005b06:	d142      	bne.n	8005b8e <_malloc_r+0xea>
 8005b08:	6821      	ldr	r1, [r4, #0]
 8005b0a:	1a6d      	subs	r5, r5, r1
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4630      	mov	r0, r6
 8005b10:	f7ff ffa6 	bl	8005a60 <sbrk_aligned>
 8005b14:	3001      	adds	r0, #1
 8005b16:	d03a      	beq.n	8005b8e <_malloc_r+0xea>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	442b      	add	r3, r5
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	bb62      	cbnz	r2, 8005b80 <_malloc_r+0xdc>
 8005b26:	f8c8 7000 	str.w	r7, [r8]
 8005b2a:	e00f      	b.n	8005b4c <_malloc_r+0xa8>
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	1b52      	subs	r2, r2, r5
 8005b30:	d420      	bmi.n	8005b74 <_malloc_r+0xd0>
 8005b32:	2a0b      	cmp	r2, #11
 8005b34:	d917      	bls.n	8005b66 <_malloc_r+0xc2>
 8005b36:	1961      	adds	r1, r4, r5
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	6025      	str	r5, [r4, #0]
 8005b3c:	bf18      	it	ne
 8005b3e:	6059      	strne	r1, [r3, #4]
 8005b40:	6863      	ldr	r3, [r4, #4]
 8005b42:	bf08      	it	eq
 8005b44:	f8c8 1000 	streq.w	r1, [r8]
 8005b48:	5162      	str	r2, [r4, r5]
 8005b4a:	604b      	str	r3, [r1, #4]
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f82f 	bl	8005bb0 <__malloc_unlock>
 8005b52:	f104 000b 	add.w	r0, r4, #11
 8005b56:	1d23      	adds	r3, r4, #4
 8005b58:	f020 0007 	bic.w	r0, r0, #7
 8005b5c:	1ac2      	subs	r2, r0, r3
 8005b5e:	bf1c      	itt	ne
 8005b60:	1a1b      	subne	r3, r3, r0
 8005b62:	50a3      	strne	r3, [r4, r2]
 8005b64:	e7af      	b.n	8005ac6 <_malloc_r+0x22>
 8005b66:	6862      	ldr	r2, [r4, #4]
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	bf0c      	ite	eq
 8005b6c:	f8c8 2000 	streq.w	r2, [r8]
 8005b70:	605a      	strne	r2, [r3, #4]
 8005b72:	e7eb      	b.n	8005b4c <_malloc_r+0xa8>
 8005b74:	4623      	mov	r3, r4
 8005b76:	6864      	ldr	r4, [r4, #4]
 8005b78:	e7ae      	b.n	8005ad8 <_malloc_r+0x34>
 8005b7a:	463c      	mov	r4, r7
 8005b7c:	687f      	ldr	r7, [r7, #4]
 8005b7e:	e7b6      	b.n	8005aee <_malloc_r+0x4a>
 8005b80:	461a      	mov	r2, r3
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d1fb      	bne.n	8005b80 <_malloc_r+0xdc>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6053      	str	r3, [r2, #4]
 8005b8c:	e7de      	b.n	8005b4c <_malloc_r+0xa8>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6033      	str	r3, [r6, #0]
 8005b92:	4630      	mov	r0, r6
 8005b94:	f000 f80c 	bl	8005bb0 <__malloc_unlock>
 8005b98:	e794      	b.n	8005ac4 <_malloc_r+0x20>
 8005b9a:	6005      	str	r5, [r0, #0]
 8005b9c:	e7d6      	b.n	8005b4c <_malloc_r+0xa8>
 8005b9e:	bf00      	nop
 8005ba0:	2000030c 	.word	0x2000030c

08005ba4 <__malloc_lock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	@ (8005bac <__malloc_lock+0x8>)
 8005ba6:	f7ff bf0e 	b.w	80059c6 <__retarget_lock_acquire_recursive>
 8005baa:	bf00      	nop
 8005bac:	20000304 	.word	0x20000304

08005bb0 <__malloc_unlock>:
 8005bb0:	4801      	ldr	r0, [pc, #4]	@ (8005bb8 <__malloc_unlock+0x8>)
 8005bb2:	f7ff bf09 	b.w	80059c8 <__retarget_lock_release_recursive>
 8005bb6:	bf00      	nop
 8005bb8:	20000304 	.word	0x20000304

08005bbc <__sfputc_r>:
 8005bbc:	6893      	ldr	r3, [r2, #8]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	b410      	push	{r4}
 8005bc4:	6093      	str	r3, [r2, #8]
 8005bc6:	da08      	bge.n	8005bda <__sfputc_r+0x1e>
 8005bc8:	6994      	ldr	r4, [r2, #24]
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	db01      	blt.n	8005bd2 <__sfputc_r+0x16>
 8005bce:	290a      	cmp	r1, #10
 8005bd0:	d103      	bne.n	8005bda <__sfputc_r+0x1e>
 8005bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd6:	f7ff bde8 	b.w	80057aa <__swbuf_r>
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	1c58      	adds	r0, r3, #1
 8005bde:	6010      	str	r0, [r2, #0]
 8005be0:	7019      	strb	r1, [r3, #0]
 8005be2:	4608      	mov	r0, r1
 8005be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <__sfputs_r>:
 8005bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bec:	4606      	mov	r6, r0
 8005bee:	460f      	mov	r7, r1
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	18d5      	adds	r5, r2, r3
 8005bf4:	42ac      	cmp	r4, r5
 8005bf6:	d101      	bne.n	8005bfc <__sfputs_r+0x12>
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	e007      	b.n	8005c0c <__sfputs_r+0x22>
 8005bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c00:	463a      	mov	r2, r7
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7ff ffda 	bl	8005bbc <__sfputc_r>
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	d1f3      	bne.n	8005bf4 <__sfputs_r+0xa>
 8005c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c10 <_vfiprintf_r>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	460d      	mov	r5, r1
 8005c16:	b09d      	sub	sp, #116	@ 0x74
 8005c18:	4614      	mov	r4, r2
 8005c1a:	4698      	mov	r8, r3
 8005c1c:	4606      	mov	r6, r0
 8005c1e:	b118      	cbz	r0, 8005c28 <_vfiprintf_r+0x18>
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	b90b      	cbnz	r3, 8005c28 <_vfiprintf_r+0x18>
 8005c24:	f7ff fcd8 	bl	80055d8 <__sinit>
 8005c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	d405      	bmi.n	8005c3a <_vfiprintf_r+0x2a>
 8005c2e:	89ab      	ldrh	r3, [r5, #12]
 8005c30:	059a      	lsls	r2, r3, #22
 8005c32:	d402      	bmi.n	8005c3a <_vfiprintf_r+0x2a>
 8005c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c36:	f7ff fec6 	bl	80059c6 <__retarget_lock_acquire_recursive>
 8005c3a:	89ab      	ldrh	r3, [r5, #12]
 8005c3c:	071b      	lsls	r3, r3, #28
 8005c3e:	d501      	bpl.n	8005c44 <_vfiprintf_r+0x34>
 8005c40:	692b      	ldr	r3, [r5, #16]
 8005c42:	b99b      	cbnz	r3, 8005c6c <_vfiprintf_r+0x5c>
 8005c44:	4629      	mov	r1, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7ff fdee 	bl	8005828 <__swsetup_r>
 8005c4c:	b170      	cbz	r0, 8005c6c <_vfiprintf_r+0x5c>
 8005c4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c50:	07dc      	lsls	r4, r3, #31
 8005c52:	d504      	bpl.n	8005c5e <_vfiprintf_r+0x4e>
 8005c54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005c58:	b01d      	add	sp, #116	@ 0x74
 8005c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	0598      	lsls	r0, r3, #22
 8005c62:	d4f7      	bmi.n	8005c54 <_vfiprintf_r+0x44>
 8005c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c66:	f7ff feaf 	bl	80059c8 <__retarget_lock_release_recursive>
 8005c6a:	e7f3      	b.n	8005c54 <_vfiprintf_r+0x44>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c70:	2320      	movs	r3, #32
 8005c72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c7a:	2330      	movs	r3, #48	@ 0x30
 8005c7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e2c <_vfiprintf_r+0x21c>
 8005c80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c84:	f04f 0901 	mov.w	r9, #1
 8005c88:	4623      	mov	r3, r4
 8005c8a:	469a      	mov	sl, r3
 8005c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c90:	b10a      	cbz	r2, 8005c96 <_vfiprintf_r+0x86>
 8005c92:	2a25      	cmp	r2, #37	@ 0x25
 8005c94:	d1f9      	bne.n	8005c8a <_vfiprintf_r+0x7a>
 8005c96:	ebba 0b04 	subs.w	fp, sl, r4
 8005c9a:	d00b      	beq.n	8005cb4 <_vfiprintf_r+0xa4>
 8005c9c:	465b      	mov	r3, fp
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ffa1 	bl	8005bea <__sfputs_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f000 80a7 	beq.w	8005dfc <_vfiprintf_r+0x1ec>
 8005cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cb0:	445a      	add	r2, fp
 8005cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 809f 	beq.w	8005dfc <_vfiprintf_r+0x1ec>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc8:	f10a 0a01 	add.w	sl, sl, #1
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cd6:	4654      	mov	r4, sl
 8005cd8:	2205      	movs	r2, #5
 8005cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cde:	4853      	ldr	r0, [pc, #332]	@ (8005e2c <_vfiprintf_r+0x21c>)
 8005ce0:	f7fa fa76 	bl	80001d0 <memchr>
 8005ce4:	9a04      	ldr	r2, [sp, #16]
 8005ce6:	b9d8      	cbnz	r0, 8005d20 <_vfiprintf_r+0x110>
 8005ce8:	06d1      	lsls	r1, r2, #27
 8005cea:	bf44      	itt	mi
 8005cec:	2320      	movmi	r3, #32
 8005cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cf2:	0713      	lsls	r3, r2, #28
 8005cf4:	bf44      	itt	mi
 8005cf6:	232b      	movmi	r3, #43	@ 0x2b
 8005cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d02:	d015      	beq.n	8005d30 <_vfiprintf_r+0x120>
 8005d04:	9a07      	ldr	r2, [sp, #28]
 8005d06:	4654      	mov	r4, sl
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f04f 0c0a 	mov.w	ip, #10
 8005d0e:	4621      	mov	r1, r4
 8005d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d14:	3b30      	subs	r3, #48	@ 0x30
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d94b      	bls.n	8005db2 <_vfiprintf_r+0x1a2>
 8005d1a:	b1b0      	cbz	r0, 8005d4a <_vfiprintf_r+0x13a>
 8005d1c:	9207      	str	r2, [sp, #28]
 8005d1e:	e014      	b.n	8005d4a <_vfiprintf_r+0x13a>
 8005d20:	eba0 0308 	sub.w	r3, r0, r8
 8005d24:	fa09 f303 	lsl.w	r3, r9, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	46a2      	mov	sl, r4
 8005d2e:	e7d2      	b.n	8005cd6 <_vfiprintf_r+0xc6>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	1d19      	adds	r1, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	9103      	str	r1, [sp, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfbb      	ittet	lt
 8005d3c:	425b      	neglt	r3, r3
 8005d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d42:	9307      	strge	r3, [sp, #28]
 8005d44:	9307      	strlt	r3, [sp, #28]
 8005d46:	bfb8      	it	lt
 8005d48:	9204      	strlt	r2, [sp, #16]
 8005d4a:	7823      	ldrb	r3, [r4, #0]
 8005d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d4e:	d10a      	bne.n	8005d66 <_vfiprintf_r+0x156>
 8005d50:	7863      	ldrb	r3, [r4, #1]
 8005d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d54:	d132      	bne.n	8005dbc <_vfiprintf_r+0x1ac>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	9203      	str	r2, [sp, #12]
 8005d5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d62:	3402      	adds	r4, #2
 8005d64:	9305      	str	r3, [sp, #20]
 8005d66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e3c <_vfiprintf_r+0x22c>
 8005d6a:	7821      	ldrb	r1, [r4, #0]
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	4650      	mov	r0, sl
 8005d70:	f7fa fa2e 	bl	80001d0 <memchr>
 8005d74:	b138      	cbz	r0, 8005d86 <_vfiprintf_r+0x176>
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	eba0 000a 	sub.w	r0, r0, sl
 8005d7c:	2240      	movs	r2, #64	@ 0x40
 8005d7e:	4082      	lsls	r2, r0
 8005d80:	4313      	orrs	r3, r2
 8005d82:	3401      	adds	r4, #1
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	4829      	ldr	r0, [pc, #164]	@ (8005e30 <_vfiprintf_r+0x220>)
 8005d8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d90:	2206      	movs	r2, #6
 8005d92:	f7fa fa1d 	bl	80001d0 <memchr>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d03f      	beq.n	8005e1a <_vfiprintf_r+0x20a>
 8005d9a:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <_vfiprintf_r+0x224>)
 8005d9c:	bb1b      	cbnz	r3, 8005de6 <_vfiprintf_r+0x1d6>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	f023 0307 	bic.w	r3, r3, #7
 8005da6:	3308      	adds	r3, #8
 8005da8:	9303      	str	r3, [sp, #12]
 8005daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dac:	443b      	add	r3, r7
 8005dae:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db0:	e76a      	b.n	8005c88 <_vfiprintf_r+0x78>
 8005db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005db6:	460c      	mov	r4, r1
 8005db8:	2001      	movs	r0, #1
 8005dba:	e7a8      	b.n	8005d0e <_vfiprintf_r+0xfe>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	3401      	adds	r4, #1
 8005dc0:	9305      	str	r3, [sp, #20]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dce:	3a30      	subs	r2, #48	@ 0x30
 8005dd0:	2a09      	cmp	r2, #9
 8005dd2:	d903      	bls.n	8005ddc <_vfiprintf_r+0x1cc>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0c6      	beq.n	8005d66 <_vfiprintf_r+0x156>
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	e7c4      	b.n	8005d66 <_vfiprintf_r+0x156>
 8005ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005de0:	4604      	mov	r4, r0
 8005de2:	2301      	movs	r3, #1
 8005de4:	e7f0      	b.n	8005dc8 <_vfiprintf_r+0x1b8>
 8005de6:	ab03      	add	r3, sp, #12
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	462a      	mov	r2, r5
 8005dec:	4b12      	ldr	r3, [pc, #72]	@ (8005e38 <_vfiprintf_r+0x228>)
 8005dee:	a904      	add	r1, sp, #16
 8005df0:	4630      	mov	r0, r6
 8005df2:	f3af 8000 	nop.w
 8005df6:	4607      	mov	r7, r0
 8005df8:	1c78      	adds	r0, r7, #1
 8005dfa:	d1d6      	bne.n	8005daa <_vfiprintf_r+0x19a>
 8005dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	d405      	bmi.n	8005e0e <_vfiprintf_r+0x1fe>
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	059a      	lsls	r2, r3, #22
 8005e06:	d402      	bmi.n	8005e0e <_vfiprintf_r+0x1fe>
 8005e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e0a:	f7ff fddd 	bl	80059c8 <__retarget_lock_release_recursive>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	065b      	lsls	r3, r3, #25
 8005e12:	f53f af1f 	bmi.w	8005c54 <_vfiprintf_r+0x44>
 8005e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e18:	e71e      	b.n	8005c58 <_vfiprintf_r+0x48>
 8005e1a:	ab03      	add	r3, sp, #12
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	462a      	mov	r2, r5
 8005e20:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <_vfiprintf_r+0x228>)
 8005e22:	a904      	add	r1, sp, #16
 8005e24:	4630      	mov	r0, r6
 8005e26:	f000 f879 	bl	8005f1c <_printf_i>
 8005e2a:	e7e4      	b.n	8005df6 <_vfiprintf_r+0x1e6>
 8005e2c:	080064dc 	.word	0x080064dc
 8005e30:	080064e6 	.word	0x080064e6
 8005e34:	00000000 	.word	0x00000000
 8005e38:	08005beb 	.word	0x08005beb
 8005e3c:	080064e2 	.word	0x080064e2

08005e40 <_printf_common>:
 8005e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e44:	4616      	mov	r6, r2
 8005e46:	4698      	mov	r8, r3
 8005e48:	688a      	ldr	r2, [r1, #8]
 8005e4a:	690b      	ldr	r3, [r1, #16]
 8005e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	bfb8      	it	lt
 8005e54:	4613      	movlt	r3, r2
 8005e56:	6033      	str	r3, [r6, #0]
 8005e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	b10a      	cbz	r2, 8005e66 <_printf_common+0x26>
 8005e62:	3301      	adds	r3, #1
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	0699      	lsls	r1, r3, #26
 8005e6a:	bf42      	ittt	mi
 8005e6c:	6833      	ldrmi	r3, [r6, #0]
 8005e6e:	3302      	addmi	r3, #2
 8005e70:	6033      	strmi	r3, [r6, #0]
 8005e72:	6825      	ldr	r5, [r4, #0]
 8005e74:	f015 0506 	ands.w	r5, r5, #6
 8005e78:	d106      	bne.n	8005e88 <_printf_common+0x48>
 8005e7a:	f104 0a19 	add.w	sl, r4, #25
 8005e7e:	68e3      	ldr	r3, [r4, #12]
 8005e80:	6832      	ldr	r2, [r6, #0]
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	42ab      	cmp	r3, r5
 8005e86:	dc26      	bgt.n	8005ed6 <_printf_common+0x96>
 8005e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e8c:	6822      	ldr	r2, [r4, #0]
 8005e8e:	3b00      	subs	r3, #0
 8005e90:	bf18      	it	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	0692      	lsls	r2, r2, #26
 8005e96:	d42b      	bmi.n	8005ef0 <_printf_common+0xb0>
 8005e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	47c8      	blx	r9
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	d01e      	beq.n	8005ee4 <_printf_common+0xa4>
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	6922      	ldr	r2, [r4, #16]
 8005eaa:	f003 0306 	and.w	r3, r3, #6
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	bf02      	ittt	eq
 8005eb2:	68e5      	ldreq	r5, [r4, #12]
 8005eb4:	6833      	ldreq	r3, [r6, #0]
 8005eb6:	1aed      	subeq	r5, r5, r3
 8005eb8:	68a3      	ldr	r3, [r4, #8]
 8005eba:	bf0c      	ite	eq
 8005ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec0:	2500      	movne	r5, #0
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	bfc4      	itt	gt
 8005ec6:	1a9b      	subgt	r3, r3, r2
 8005ec8:	18ed      	addgt	r5, r5, r3
 8005eca:	2600      	movs	r6, #0
 8005ecc:	341a      	adds	r4, #26
 8005ece:	42b5      	cmp	r5, r6
 8005ed0:	d11a      	bne.n	8005f08 <_printf_common+0xc8>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e008      	b.n	8005ee8 <_printf_common+0xa8>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4652      	mov	r2, sl
 8005eda:	4641      	mov	r1, r8
 8005edc:	4638      	mov	r0, r7
 8005ede:	47c8      	blx	r9
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d103      	bne.n	8005eec <_printf_common+0xac>
 8005ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eec:	3501      	adds	r5, #1
 8005eee:	e7c6      	b.n	8005e7e <_printf_common+0x3e>
 8005ef0:	18e1      	adds	r1, r4, r3
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	2030      	movs	r0, #48	@ 0x30
 8005ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005efa:	4422      	add	r2, r4
 8005efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f04:	3302      	adds	r3, #2
 8005f06:	e7c7      	b.n	8005e98 <_printf_common+0x58>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	4638      	mov	r0, r7
 8005f10:	47c8      	blx	r9
 8005f12:	3001      	adds	r0, #1
 8005f14:	d0e6      	beq.n	8005ee4 <_printf_common+0xa4>
 8005f16:	3601      	adds	r6, #1
 8005f18:	e7d9      	b.n	8005ece <_printf_common+0x8e>
	...

08005f1c <_printf_i>:
 8005f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	7e0f      	ldrb	r7, [r1, #24]
 8005f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f24:	2f78      	cmp	r7, #120	@ 0x78
 8005f26:	4691      	mov	r9, r2
 8005f28:	4680      	mov	r8, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	469a      	mov	sl, r3
 8005f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f32:	d807      	bhi.n	8005f44 <_printf_i+0x28>
 8005f34:	2f62      	cmp	r7, #98	@ 0x62
 8005f36:	d80a      	bhi.n	8005f4e <_printf_i+0x32>
 8005f38:	2f00      	cmp	r7, #0
 8005f3a:	f000 80d2 	beq.w	80060e2 <_printf_i+0x1c6>
 8005f3e:	2f58      	cmp	r7, #88	@ 0x58
 8005f40:	f000 80b9 	beq.w	80060b6 <_printf_i+0x19a>
 8005f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f4c:	e03a      	b.n	8005fc4 <_printf_i+0xa8>
 8005f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f52:	2b15      	cmp	r3, #21
 8005f54:	d8f6      	bhi.n	8005f44 <_printf_i+0x28>
 8005f56:	a101      	add	r1, pc, #4	@ (adr r1, 8005f5c <_printf_i+0x40>)
 8005f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f5c:	08005fb5 	.word	0x08005fb5
 8005f60:	08005fc9 	.word	0x08005fc9
 8005f64:	08005f45 	.word	0x08005f45
 8005f68:	08005f45 	.word	0x08005f45
 8005f6c:	08005f45 	.word	0x08005f45
 8005f70:	08005f45 	.word	0x08005f45
 8005f74:	08005fc9 	.word	0x08005fc9
 8005f78:	08005f45 	.word	0x08005f45
 8005f7c:	08005f45 	.word	0x08005f45
 8005f80:	08005f45 	.word	0x08005f45
 8005f84:	08005f45 	.word	0x08005f45
 8005f88:	080060c9 	.word	0x080060c9
 8005f8c:	08005ff3 	.word	0x08005ff3
 8005f90:	08006083 	.word	0x08006083
 8005f94:	08005f45 	.word	0x08005f45
 8005f98:	08005f45 	.word	0x08005f45
 8005f9c:	080060eb 	.word	0x080060eb
 8005fa0:	08005f45 	.word	0x08005f45
 8005fa4:	08005ff3 	.word	0x08005ff3
 8005fa8:	08005f45 	.word	0x08005f45
 8005fac:	08005f45 	.word	0x08005f45
 8005fb0:	0800608b 	.word	0x0800608b
 8005fb4:	6833      	ldr	r3, [r6, #0]
 8005fb6:	1d1a      	adds	r2, r3, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6032      	str	r2, [r6, #0]
 8005fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e09d      	b.n	8006104 <_printf_i+0x1e8>
 8005fc8:	6833      	ldr	r3, [r6, #0]
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	1d19      	adds	r1, r3, #4
 8005fce:	6031      	str	r1, [r6, #0]
 8005fd0:	0606      	lsls	r6, r0, #24
 8005fd2:	d501      	bpl.n	8005fd8 <_printf_i+0xbc>
 8005fd4:	681d      	ldr	r5, [r3, #0]
 8005fd6:	e003      	b.n	8005fe0 <_printf_i+0xc4>
 8005fd8:	0645      	lsls	r5, r0, #25
 8005fda:	d5fb      	bpl.n	8005fd4 <_printf_i+0xb8>
 8005fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	da03      	bge.n	8005fec <_printf_i+0xd0>
 8005fe4:	232d      	movs	r3, #45	@ 0x2d
 8005fe6:	426d      	negs	r5, r5
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fec:	4859      	ldr	r0, [pc, #356]	@ (8006154 <_printf_i+0x238>)
 8005fee:	230a      	movs	r3, #10
 8005ff0:	e011      	b.n	8006016 <_printf_i+0xfa>
 8005ff2:	6821      	ldr	r1, [r4, #0]
 8005ff4:	6833      	ldr	r3, [r6, #0]
 8005ff6:	0608      	lsls	r0, r1, #24
 8005ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ffc:	d402      	bmi.n	8006004 <_printf_i+0xe8>
 8005ffe:	0649      	lsls	r1, r1, #25
 8006000:	bf48      	it	mi
 8006002:	b2ad      	uxthmi	r5, r5
 8006004:	2f6f      	cmp	r7, #111	@ 0x6f
 8006006:	4853      	ldr	r0, [pc, #332]	@ (8006154 <_printf_i+0x238>)
 8006008:	6033      	str	r3, [r6, #0]
 800600a:	bf14      	ite	ne
 800600c:	230a      	movne	r3, #10
 800600e:	2308      	moveq	r3, #8
 8006010:	2100      	movs	r1, #0
 8006012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006016:	6866      	ldr	r6, [r4, #4]
 8006018:	60a6      	str	r6, [r4, #8]
 800601a:	2e00      	cmp	r6, #0
 800601c:	bfa2      	ittt	ge
 800601e:	6821      	ldrge	r1, [r4, #0]
 8006020:	f021 0104 	bicge.w	r1, r1, #4
 8006024:	6021      	strge	r1, [r4, #0]
 8006026:	b90d      	cbnz	r5, 800602c <_printf_i+0x110>
 8006028:	2e00      	cmp	r6, #0
 800602a:	d04b      	beq.n	80060c4 <_printf_i+0x1a8>
 800602c:	4616      	mov	r6, r2
 800602e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006032:	fb03 5711 	mls	r7, r3, r1, r5
 8006036:	5dc7      	ldrb	r7, [r0, r7]
 8006038:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800603c:	462f      	mov	r7, r5
 800603e:	42bb      	cmp	r3, r7
 8006040:	460d      	mov	r5, r1
 8006042:	d9f4      	bls.n	800602e <_printf_i+0x112>
 8006044:	2b08      	cmp	r3, #8
 8006046:	d10b      	bne.n	8006060 <_printf_i+0x144>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	07df      	lsls	r7, r3, #31
 800604c:	d508      	bpl.n	8006060 <_printf_i+0x144>
 800604e:	6923      	ldr	r3, [r4, #16]
 8006050:	6861      	ldr	r1, [r4, #4]
 8006052:	4299      	cmp	r1, r3
 8006054:	bfde      	ittt	le
 8006056:	2330      	movle	r3, #48	@ 0x30
 8006058:	f806 3c01 	strble.w	r3, [r6, #-1]
 800605c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006060:	1b92      	subs	r2, r2, r6
 8006062:	6122      	str	r2, [r4, #16]
 8006064:	f8cd a000 	str.w	sl, [sp]
 8006068:	464b      	mov	r3, r9
 800606a:	aa03      	add	r2, sp, #12
 800606c:	4621      	mov	r1, r4
 800606e:	4640      	mov	r0, r8
 8006070:	f7ff fee6 	bl	8005e40 <_printf_common>
 8006074:	3001      	adds	r0, #1
 8006076:	d14a      	bne.n	800610e <_printf_i+0x1f2>
 8006078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800607c:	b004      	add	sp, #16
 800607e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	f043 0320 	orr.w	r3, r3, #32
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	4833      	ldr	r0, [pc, #204]	@ (8006158 <_printf_i+0x23c>)
 800608c:	2778      	movs	r7, #120	@ 0x78
 800608e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6831      	ldr	r1, [r6, #0]
 8006096:	061f      	lsls	r7, r3, #24
 8006098:	f851 5b04 	ldr.w	r5, [r1], #4
 800609c:	d402      	bmi.n	80060a4 <_printf_i+0x188>
 800609e:	065f      	lsls	r7, r3, #25
 80060a0:	bf48      	it	mi
 80060a2:	b2ad      	uxthmi	r5, r5
 80060a4:	6031      	str	r1, [r6, #0]
 80060a6:	07d9      	lsls	r1, r3, #31
 80060a8:	bf44      	itt	mi
 80060aa:	f043 0320 	orrmi.w	r3, r3, #32
 80060ae:	6023      	strmi	r3, [r4, #0]
 80060b0:	b11d      	cbz	r5, 80060ba <_printf_i+0x19e>
 80060b2:	2310      	movs	r3, #16
 80060b4:	e7ac      	b.n	8006010 <_printf_i+0xf4>
 80060b6:	4827      	ldr	r0, [pc, #156]	@ (8006154 <_printf_i+0x238>)
 80060b8:	e7e9      	b.n	800608e <_printf_i+0x172>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	f023 0320 	bic.w	r3, r3, #32
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	e7f6      	b.n	80060b2 <_printf_i+0x196>
 80060c4:	4616      	mov	r6, r2
 80060c6:	e7bd      	b.n	8006044 <_printf_i+0x128>
 80060c8:	6833      	ldr	r3, [r6, #0]
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	6961      	ldr	r1, [r4, #20]
 80060ce:	1d18      	adds	r0, r3, #4
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	062e      	lsls	r6, r5, #24
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	d501      	bpl.n	80060dc <_printf_i+0x1c0>
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	e002      	b.n	80060e2 <_printf_i+0x1c6>
 80060dc:	0668      	lsls	r0, r5, #25
 80060de:	d5fb      	bpl.n	80060d8 <_printf_i+0x1bc>
 80060e0:	8019      	strh	r1, [r3, #0]
 80060e2:	2300      	movs	r3, #0
 80060e4:	6123      	str	r3, [r4, #16]
 80060e6:	4616      	mov	r6, r2
 80060e8:	e7bc      	b.n	8006064 <_printf_i+0x148>
 80060ea:	6833      	ldr	r3, [r6, #0]
 80060ec:	1d1a      	adds	r2, r3, #4
 80060ee:	6032      	str	r2, [r6, #0]
 80060f0:	681e      	ldr	r6, [r3, #0]
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	2100      	movs	r1, #0
 80060f6:	4630      	mov	r0, r6
 80060f8:	f7fa f86a 	bl	80001d0 <memchr>
 80060fc:	b108      	cbz	r0, 8006102 <_printf_i+0x1e6>
 80060fe:	1b80      	subs	r0, r0, r6
 8006100:	6060      	str	r0, [r4, #4]
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	2300      	movs	r3, #0
 8006108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800610c:	e7aa      	b.n	8006064 <_printf_i+0x148>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	4632      	mov	r2, r6
 8006112:	4649      	mov	r1, r9
 8006114:	4640      	mov	r0, r8
 8006116:	47d0      	blx	sl
 8006118:	3001      	adds	r0, #1
 800611a:	d0ad      	beq.n	8006078 <_printf_i+0x15c>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	079b      	lsls	r3, r3, #30
 8006120:	d413      	bmi.n	800614a <_printf_i+0x22e>
 8006122:	68e0      	ldr	r0, [r4, #12]
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	4298      	cmp	r0, r3
 8006128:	bfb8      	it	lt
 800612a:	4618      	movlt	r0, r3
 800612c:	e7a6      	b.n	800607c <_printf_i+0x160>
 800612e:	2301      	movs	r3, #1
 8006130:	4632      	mov	r2, r6
 8006132:	4649      	mov	r1, r9
 8006134:	4640      	mov	r0, r8
 8006136:	47d0      	blx	sl
 8006138:	3001      	adds	r0, #1
 800613a:	d09d      	beq.n	8006078 <_printf_i+0x15c>
 800613c:	3501      	adds	r5, #1
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	9903      	ldr	r1, [sp, #12]
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	42ab      	cmp	r3, r5
 8006146:	dcf2      	bgt.n	800612e <_printf_i+0x212>
 8006148:	e7eb      	b.n	8006122 <_printf_i+0x206>
 800614a:	2500      	movs	r5, #0
 800614c:	f104 0619 	add.w	r6, r4, #25
 8006150:	e7f5      	b.n	800613e <_printf_i+0x222>
 8006152:	bf00      	nop
 8006154:	080064ed 	.word	0x080064ed
 8006158:	080064fe 	.word	0x080064fe

0800615c <__sflush_r>:
 800615c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006164:	0716      	lsls	r6, r2, #28
 8006166:	4605      	mov	r5, r0
 8006168:	460c      	mov	r4, r1
 800616a:	d454      	bmi.n	8006216 <__sflush_r+0xba>
 800616c:	684b      	ldr	r3, [r1, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	dc02      	bgt.n	8006178 <__sflush_r+0x1c>
 8006172:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	dd48      	ble.n	800620a <__sflush_r+0xae>
 8006178:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800617a:	2e00      	cmp	r6, #0
 800617c:	d045      	beq.n	800620a <__sflush_r+0xae>
 800617e:	2300      	movs	r3, #0
 8006180:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006184:	682f      	ldr	r7, [r5, #0]
 8006186:	6a21      	ldr	r1, [r4, #32]
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	d030      	beq.n	80061ee <__sflush_r+0x92>
 800618c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	0759      	lsls	r1, r3, #29
 8006192:	d505      	bpl.n	80061a0 <__sflush_r+0x44>
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800619a:	b10b      	cbz	r3, 80061a0 <__sflush_r+0x44>
 800619c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800619e:	1ad2      	subs	r2, r2, r3
 80061a0:	2300      	movs	r3, #0
 80061a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061a4:	6a21      	ldr	r1, [r4, #32]
 80061a6:	4628      	mov	r0, r5
 80061a8:	47b0      	blx	r6
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	d106      	bne.n	80061be <__sflush_r+0x62>
 80061b0:	6829      	ldr	r1, [r5, #0]
 80061b2:	291d      	cmp	r1, #29
 80061b4:	d82b      	bhi.n	800620e <__sflush_r+0xb2>
 80061b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006260 <__sflush_r+0x104>)
 80061b8:	410a      	asrs	r2, r1
 80061ba:	07d6      	lsls	r6, r2, #31
 80061bc:	d427      	bmi.n	800620e <__sflush_r+0xb2>
 80061be:	2200      	movs	r2, #0
 80061c0:	6062      	str	r2, [r4, #4]
 80061c2:	04d9      	lsls	r1, r3, #19
 80061c4:	6922      	ldr	r2, [r4, #16]
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	d504      	bpl.n	80061d4 <__sflush_r+0x78>
 80061ca:	1c42      	adds	r2, r0, #1
 80061cc:	d101      	bne.n	80061d2 <__sflush_r+0x76>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	b903      	cbnz	r3, 80061d4 <__sflush_r+0x78>
 80061d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80061d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061d6:	602f      	str	r7, [r5, #0]
 80061d8:	b1b9      	cbz	r1, 800620a <__sflush_r+0xae>
 80061da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061de:	4299      	cmp	r1, r3
 80061e0:	d002      	beq.n	80061e8 <__sflush_r+0x8c>
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7ff fbf2 	bl	80059cc <_free_r>
 80061e8:	2300      	movs	r3, #0
 80061ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80061ec:	e00d      	b.n	800620a <__sflush_r+0xae>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b0      	blx	r6
 80061f4:	4602      	mov	r2, r0
 80061f6:	1c50      	adds	r0, r2, #1
 80061f8:	d1c9      	bne.n	800618e <__sflush_r+0x32>
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0c6      	beq.n	800618e <__sflush_r+0x32>
 8006200:	2b1d      	cmp	r3, #29
 8006202:	d001      	beq.n	8006208 <__sflush_r+0xac>
 8006204:	2b16      	cmp	r3, #22
 8006206:	d11e      	bne.n	8006246 <__sflush_r+0xea>
 8006208:	602f      	str	r7, [r5, #0]
 800620a:	2000      	movs	r0, #0
 800620c:	e022      	b.n	8006254 <__sflush_r+0xf8>
 800620e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006212:	b21b      	sxth	r3, r3
 8006214:	e01b      	b.n	800624e <__sflush_r+0xf2>
 8006216:	690f      	ldr	r7, [r1, #16]
 8006218:	2f00      	cmp	r7, #0
 800621a:	d0f6      	beq.n	800620a <__sflush_r+0xae>
 800621c:	0793      	lsls	r3, r2, #30
 800621e:	680e      	ldr	r6, [r1, #0]
 8006220:	bf08      	it	eq
 8006222:	694b      	ldreq	r3, [r1, #20]
 8006224:	600f      	str	r7, [r1, #0]
 8006226:	bf18      	it	ne
 8006228:	2300      	movne	r3, #0
 800622a:	eba6 0807 	sub.w	r8, r6, r7
 800622e:	608b      	str	r3, [r1, #8]
 8006230:	f1b8 0f00 	cmp.w	r8, #0
 8006234:	dde9      	ble.n	800620a <__sflush_r+0xae>
 8006236:	6a21      	ldr	r1, [r4, #32]
 8006238:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800623a:	4643      	mov	r3, r8
 800623c:	463a      	mov	r2, r7
 800623e:	4628      	mov	r0, r5
 8006240:	47b0      	blx	r6
 8006242:	2800      	cmp	r0, #0
 8006244:	dc08      	bgt.n	8006258 <__sflush_r+0xfc>
 8006246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624e:	81a3      	strh	r3, [r4, #12]
 8006250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4407      	add	r7, r0
 800625a:	eba8 0800 	sub.w	r8, r8, r0
 800625e:	e7e7      	b.n	8006230 <__sflush_r+0xd4>
 8006260:	dfbffffe 	.word	0xdfbffffe

08006264 <_fflush_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	690b      	ldr	r3, [r1, #16]
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
 800626c:	b913      	cbnz	r3, 8006274 <_fflush_r+0x10>
 800626e:	2500      	movs	r5, #0
 8006270:	4628      	mov	r0, r5
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	b118      	cbz	r0, 800627e <_fflush_r+0x1a>
 8006276:	6a03      	ldr	r3, [r0, #32]
 8006278:	b90b      	cbnz	r3, 800627e <_fflush_r+0x1a>
 800627a:	f7ff f9ad 	bl	80055d8 <__sinit>
 800627e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f3      	beq.n	800626e <_fflush_r+0xa>
 8006286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006288:	07d0      	lsls	r0, r2, #31
 800628a:	d404      	bmi.n	8006296 <_fflush_r+0x32>
 800628c:	0599      	lsls	r1, r3, #22
 800628e:	d402      	bmi.n	8006296 <_fflush_r+0x32>
 8006290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006292:	f7ff fb98 	bl	80059c6 <__retarget_lock_acquire_recursive>
 8006296:	4628      	mov	r0, r5
 8006298:	4621      	mov	r1, r4
 800629a:	f7ff ff5f 	bl	800615c <__sflush_r>
 800629e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062a0:	07da      	lsls	r2, r3, #31
 80062a2:	4605      	mov	r5, r0
 80062a4:	d4e4      	bmi.n	8006270 <_fflush_r+0xc>
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	059b      	lsls	r3, r3, #22
 80062aa:	d4e1      	bmi.n	8006270 <_fflush_r+0xc>
 80062ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ae:	f7ff fb8b 	bl	80059c8 <__retarget_lock_release_recursive>
 80062b2:	e7dd      	b.n	8006270 <_fflush_r+0xc>

080062b4 <__swhatbuf_r>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	460c      	mov	r4, r1
 80062b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062bc:	2900      	cmp	r1, #0
 80062be:	b096      	sub	sp, #88	@ 0x58
 80062c0:	4615      	mov	r5, r2
 80062c2:	461e      	mov	r6, r3
 80062c4:	da0d      	bge.n	80062e2 <__swhatbuf_r+0x2e>
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80062cc:	f04f 0100 	mov.w	r1, #0
 80062d0:	bf14      	ite	ne
 80062d2:	2340      	movne	r3, #64	@ 0x40
 80062d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80062d8:	2000      	movs	r0, #0
 80062da:	6031      	str	r1, [r6, #0]
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	b016      	add	sp, #88	@ 0x58
 80062e0:	bd70      	pop	{r4, r5, r6, pc}
 80062e2:	466a      	mov	r2, sp
 80062e4:	f000 f848 	bl	8006378 <_fstat_r>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	dbec      	blt.n	80062c6 <__swhatbuf_r+0x12>
 80062ec:	9901      	ldr	r1, [sp, #4]
 80062ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062f6:	4259      	negs	r1, r3
 80062f8:	4159      	adcs	r1, r3
 80062fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062fe:	e7eb      	b.n	80062d8 <__swhatbuf_r+0x24>

08006300 <__smakebuf_r>:
 8006300:	898b      	ldrh	r3, [r1, #12]
 8006302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006304:	079d      	lsls	r5, r3, #30
 8006306:	4606      	mov	r6, r0
 8006308:	460c      	mov	r4, r1
 800630a:	d507      	bpl.n	800631c <__smakebuf_r+0x1c>
 800630c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	6123      	str	r3, [r4, #16]
 8006314:	2301      	movs	r3, #1
 8006316:	6163      	str	r3, [r4, #20]
 8006318:	b003      	add	sp, #12
 800631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631c:	ab01      	add	r3, sp, #4
 800631e:	466a      	mov	r2, sp
 8006320:	f7ff ffc8 	bl	80062b4 <__swhatbuf_r>
 8006324:	9f00      	ldr	r7, [sp, #0]
 8006326:	4605      	mov	r5, r0
 8006328:	4639      	mov	r1, r7
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff fbba 	bl	8005aa4 <_malloc_r>
 8006330:	b948      	cbnz	r0, 8006346 <__smakebuf_r+0x46>
 8006332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006336:	059a      	lsls	r2, r3, #22
 8006338:	d4ee      	bmi.n	8006318 <__smakebuf_r+0x18>
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	f043 0302 	orr.w	r3, r3, #2
 8006342:	81a3      	strh	r3, [r4, #12]
 8006344:	e7e2      	b.n	800630c <__smakebuf_r+0xc>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	6020      	str	r0, [r4, #0]
 800634a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800634e:	81a3      	strh	r3, [r4, #12]
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006356:	b15b      	cbz	r3, 8006370 <__smakebuf_r+0x70>
 8006358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f81d 	bl	800639c <_isatty_r>
 8006362:	b128      	cbz	r0, 8006370 <__smakebuf_r+0x70>
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	f043 0301 	orr.w	r3, r3, #1
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	431d      	orrs	r5, r3
 8006374:	81a5      	strh	r5, [r4, #12]
 8006376:	e7cf      	b.n	8006318 <__smakebuf_r+0x18>

08006378 <_fstat_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4d07      	ldr	r5, [pc, #28]	@ (8006398 <_fstat_r+0x20>)
 800637c:	2300      	movs	r3, #0
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	4611      	mov	r1, r2
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	f7fa fbb4 	bl	8000af2 <_fstat>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d102      	bne.n	8006394 <_fstat_r+0x1c>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	b103      	cbz	r3, 8006394 <_fstat_r+0x1c>
 8006392:	6023      	str	r3, [r4, #0]
 8006394:	bd38      	pop	{r3, r4, r5, pc}
 8006396:	bf00      	nop
 8006398:	20000300 	.word	0x20000300

0800639c <_isatty_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d06      	ldr	r5, [pc, #24]	@ (80063b8 <_isatty_r+0x1c>)
 80063a0:	2300      	movs	r3, #0
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fa fbb3 	bl	8000b12 <_isatty>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_isatty_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_isatty_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000300 	.word	0x20000300

080063bc <_sbrk_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4d06      	ldr	r5, [pc, #24]	@ (80063d8 <_sbrk_r+0x1c>)
 80063c0:	2300      	movs	r3, #0
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	602b      	str	r3, [r5, #0]
 80063c8:	f7fa fbbc 	bl	8000b44 <_sbrk>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_sbrk_r+0x1a>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_sbrk_r+0x1a>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000300 	.word	0x20000300

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr

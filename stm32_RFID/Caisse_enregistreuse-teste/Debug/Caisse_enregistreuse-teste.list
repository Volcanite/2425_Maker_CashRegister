
Caisse_enregistreuse-teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000663c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080067cc  080067cc  000077cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d0  080068d0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080068d0  080068d0  000078d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d8  080068d8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000078d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080068e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  08006948  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08006948  00008310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dfe  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027fb  00000000  00000000  0001ae96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001d698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  0001e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283e3  00000000  00000000  0001f6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151fe  00000000  00000000  00047a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f78f1  00000000  00000000  0005cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  001545bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001599b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067b4 	.word	0x080067b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080067b4 	.word	0x080067b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
#else
#define PUTCHAR_PROTOYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	2201      	movs	r2, #1
 8000570:	4803      	ldr	r0, [pc, #12]	@ (8000580 <__io_putchar+0x20>)
 8000572:	f004 f8c3 	bl	80046fc <HAL_UART_Transmit>
	return ch;
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000134 	.word	0x20000134

08000584 <SPI_TransmitReceive.0>:
  MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  void SPI_TransmitReceive(uint8_t dataToSend, uint8_t* receivedData)
  {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	73fb      	strb	r3, [r7, #15]
 8000590:	f8c7 c004 	str.w	ip, [r7, #4]
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Activer le PN532 (mettre SS à LOW)
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800059a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800059e:	f001 f88b 	bl	80016b8 <HAL_GPIO_WritePin>

      HAL_SPI_Transmit(&hspi2, &dataToSend, 1, HAL_MAX_DELAY); // Transmettre un octet
 80005a2:	f107 010f 	add.w	r1, r7, #15
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	480a      	ldr	r0, [pc, #40]	@ (80005d8 <SPI_TransmitReceive.0+0x54>)
 80005ae:	f002 fc5e 	bl	8002e6e <HAL_SPI_Transmit>

      HAL_SPI_Receive(&hspi2, receivedData, 1, HAL_MAX_DELAY);  // Lire la réponse du PN532
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	2201      	movs	r2, #1
 80005b8:	68b9      	ldr	r1, [r7, #8]
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <SPI_TransmitReceive.0+0x54>)
 80005bc:	f002 fdcd 	bl	800315a <HAL_SPI_Receive>

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Désactiver le PN532 (mettre SS à HIGH)
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f001 f875 	bl	80016b8 <HAL_GPIO_WritePin>
  }
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000084 	.word	0x20000084

080005dc <main>:
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c8      	sub	sp, #288	@ 0x120
 80005e0:	af00      	add	r7, sp, #0
int main(void)
 80005e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	int32_t uid_len = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  HAL_Init();
 80005f0:	f000 fc77 	bl	8000ee2 <HAL_Init>
  SystemClock_Config();
 80005f4:	f000 f842 	bl	800067c <SystemClock_Config>
  MX_GPIO_Init();
 80005f8:	f000 f95a 	bl	80008b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f928 	bl	8000850 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000600:	f000 f8cc 	bl	800079c <MX_TIM2_Init>
  MX_SPI2_Init();
 8000604:	f000 f88c 	bl	8000720 <MX_SPI2_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
	  if(flag==1){
		  HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
		  flag=0;*/
	   uint8_t testByte = 0xAA; // Octet à envoyer
 8000608:	23aa      	movs	r3, #170	@ 0xaa
 800060a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	   uint8_t receivedByte = 0;
 800060e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000612:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]

	    // Envoi et réception via SPI
	    SPI_TransmitReceive(testByte, &receivedByte);
 800061a:	1dfa      	adds	r2, r7, #7
 800061c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000620:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000624:	468c      	mov	ip, r1
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffab 	bl	8000584 <SPI_TransmitReceive.0>

	    // Vérifier la réponse
	    printf("Octet envoyé: 0x%02X, Octet reçu: 0x%02X\n", testByte, receivedByte);
 800062e:	f897 111b 	ldrb.w	r1, [r7, #283]	@ 0x11b
 8000632:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000636:	f2a3 1319 	subw	r3, r3, #281	@ 0x119
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	480b      	ldr	r0, [pc, #44]	@ (800066c <main+0x90>)
 8000640:	f005 f9ec 	bl	8005a1c <iprintf>

	    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8000644:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000648:	4809      	ldr	r0, [pc, #36]	@ (8000670 <main+0x94>)
 800064a:	f001 f81d 	bl	8001688 <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <main+0x80>
	        printf("IRQ est à LOW : le PN532 a une donnée prête.\n");
 8000654:	4807      	ldr	r0, [pc, #28]	@ (8000674 <main+0x98>)
 8000656:	f005 fa49 	bl	8005aec <puts>
 800065a:	e002      	b.n	8000662 <main+0x86>
	    } else {
	        printf("IRQ est à HIGH : le PN532 ne signale rien.\n");
 800065c:	4806      	ldr	r0, [pc, #24]	@ (8000678 <main+0x9c>)
 800065e:	f005 fa45 	bl	8005aec <puts>
	    }

	    HAL_Delay(1000); // Petite pause pour éviter de surcharger le terminal
 8000662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000666:	f000 fcb1 	bl	8000fcc <HAL_Delay>
  {
 800066a:	e7cd      	b.n	8000608 <main+0x2c>
 800066c:	080067cc 	.word	0x080067cc
 8000670:	48000800 	.word	0x48000800
 8000674:	080067f8 	.word	0x080067f8
 8000678:	08006828 	.word	0x08006828

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	@ 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	@ 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 fb0e 	bl	8005cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006a2:	f001 f82f 	bl	8001704 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f000 f9be 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006ca:	2308      	movs	r3, #8
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f866 	bl	80017b0 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f000 f99f 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fc2e 	bl	8001f68 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f98b 	bl	8000a2c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	@ 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_SPI2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_SPI2_Init+0x74>)
 800072c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_SPI2_Init+0x74>)
 800073a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800073e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_SPI2_Init+0x74>)
 800074e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000752:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000756:	2210      	movs	r2, #16
 8000758:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_SPI2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_SPI2_Init+0x74>)
 800076e:	2207      	movs	r2, #7
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_SPI2_Init+0x74>)
 800077a:	2208      	movs	r2, #8
 800077c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_SPI2_Init+0x74>)
 8000780:	f002 fad2 	bl	8002d28 <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f94f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000084 	.word	0x20000084
 8000798:	40003800 	.word	0x40003800

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007c8:	4b20      	ldr	r3, [pc, #128]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007d6:	f04f 32ff 	mov.w	r2, #4294967295
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e8:	4818      	ldr	r0, [pc, #96]	@ (800084c <MX_TIM2_Init+0xb0>)
 80007ea:	f003 f9c9 	bl	8003b80 <HAL_TIM_PWM_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f000 f91a 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4811      	ldr	r0, [pc, #68]	@ (800084c <MX_TIM2_Init+0xb0>)
 8000808:	f003 fea2 	bl	8004550 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000812:	f000 f90b 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000816:	2360      	movs	r3, #96	@ 0x60
 8000818:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	4807      	ldr	r0, [pc, #28]	@ (800084c <MX_TIM2_Init+0xb0>)
 800082e:	f003 f9ff 	bl	8003c30 <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000838:	f000 f8f8 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800083c:	4803      	ldr	r0, [pc, #12]	@ (800084c <MX_TIM2_Init+0xb0>)
 800083e:	f000 f99f 	bl	8000b80 <HAL_TIM_MspPostInit>

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	@ 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000e8 	.word	0x200000e8

08000850 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000856:	4a15      	ldr	r2, [pc, #84]	@ (80008ac <MX_USART2_UART_Init+0x5c>)
 8000858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x58>)
 8000894:	f003 fee4 	bl	8004660 <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f8c5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000134 	.word	0x20000134
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	@ 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b56      	ldr	r3, [pc, #344]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a55      	ldr	r2, [pc, #340]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b53      	ldr	r3, [pc, #332]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b50      	ldr	r3, [pc, #320]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	4a49      	ldr	r2, [pc, #292]	@ (8000a20 <MX_GPIO_Init+0x170>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000902:	4b47      	ldr	r3, [pc, #284]	@ (8000a20 <MX_GPIO_Init+0x170>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b44      	ldr	r3, [pc, #272]	@ (8000a20 <MX_GPIO_Init+0x170>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	4a43      	ldr	r2, [pc, #268]	@ (8000a20 <MX_GPIO_Init+0x170>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091a:	4b41      	ldr	r3, [pc, #260]	@ (8000a20 <MX_GPIO_Init+0x170>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f248 3120 	movw	r1, #33568	@ 0x8320
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f000 fec2 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800093a:	483a      	ldr	r0, [pc, #232]	@ (8000a24 <MX_GPIO_Init+0x174>)
 800093c:	f000 febc 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	4838      	ldr	r0, [pc, #224]	@ (8000a28 <MX_GPIO_Init+0x178>)
 8000946:	f000 feb7 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC6 PC7 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800094a:	f44f 5303 	mov.w	r3, #8384	@ 0x20c0
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000950:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4830      	ldr	r0, [pc, #192]	@ (8000a24 <MX_GPIO_Init+0x174>)
 8000962:	f000 fce7 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = green_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000966:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000982:	f000 fcd7 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000986:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4822      	ldr	r0, [pc, #136]	@ (8000a28 <MX_GPIO_Init+0x178>)
 800099e:	f000 fcc9 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	481a      	ldr	r0, [pc, #104]	@ (8000a24 <MX_GPIO_Init+0x174>)
 80009bc:	f000 fcba 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009dc:	f000 fcaa 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <MX_GPIO_Init+0x174>)
 80009f6:	f000 fc9d 	bl	8001334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009fa:	2380      	movs	r3, #128	@ 0x80
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <MX_GPIO_Init+0x178>)
 8000a12:	f000 fc8f 	bl	8001334 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a16:	bf00      	nop
 8000a18:	3728      	adds	r7, #40	@ 0x28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000800 	.word	0x48000800
 8000a28:	48000400 	.word	0x48000400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a42:	4a0e      	ldr	r2, [pc, #56]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5a:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a25      	ldr	r2, [pc, #148]	@ (8000b34 <HAL_SPI_MspInit+0xb4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d144      	bne.n	8000b2c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa2:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	4a24      	ldr	r2, [pc, #144]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aae:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	4a18      	ldr	r2, [pc, #96]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_SPI_MspInit+0xb8>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aea:	230c      	movs	r3, #12
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000afa:	2305      	movs	r3, #5
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <HAL_SPI_MspInit+0xbc>)
 8000b06:	f000 fc15 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <HAL_SPI_MspInit+0xc0>)
 8000b28:	f000 fc04 	bl	8001334 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40003800 	.word	0x40003800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	48000400 	.word	0x48000400

08000b44 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b54:	d10b      	bne.n	8000b6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_TIM_PWM_MspInit+0x38>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_TIM_PWM_MspInit+0x38>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_TIM_PWM_MspInit+0x38>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ba0:	d11c      	bne.n	8000bdc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_TIM_MspPostInit+0x64>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8000be4 <HAL_TIM_MspPostInit+0x64>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <HAL_TIM_MspPostInit+0x64>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f000 fbac 	bl	8001334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bdc:	bf00      	nop
 8000bde:	3720      	adds	r7, #32
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0ac      	sub	sp, #176	@ 0xb0
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2288      	movs	r2, #136	@ 0x88
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f005 f84f 	bl	8005cac <memset>
  if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a25      	ldr	r2, [pc, #148]	@ (8000ca8 <HAL_UART_MspInit+0xc0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d143      	bne.n	8000ca0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fbc3 	bl	80023b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c30:	f7ff fefc 	bl	8000a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c38:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c50:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_UART_MspInit+0xc4>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c64:	230c      	movs	r3, #12
 8000c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7c:	2307      	movs	r3, #7
 8000c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8c:	f000 fb52 	bl	8001334 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2100      	movs	r1, #0
 8000c94:	2026      	movs	r0, #38	@ 0x26
 8000c96:	f000 fa98 	bl	80011ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c9a:	2026      	movs	r0, #38	@ 0x26
 8000c9c:	f000 fab1 	bl	8001202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ca0:	bf00      	nop
 8000ca2:	37b0      	adds	r7, #176	@ 0xb0
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d06:	f000 f941 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d14:	4802      	ldr	r0, [pc, #8]	@ (8000d20 <USART2_IRQHandler+0x10>)
 8000d16:	f003 fd7b 	bl	8004810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000134 	.word	0x20000134

08000d24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
  }

  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fbf1 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
  }
  return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	@ (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f004 ff8a 	bl	8005d48 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	@ (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20018000 	.word	0x20018000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200001bc 	.word	0x200001bc
 8000e68:	20000310 	.word	0x20000310

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff ffea 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f004 ff49 	bl	8005d54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff fb8b 	bl	80005dc <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ed4:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 8000ed8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000edc:	20000310 	.word	0x20000310

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f961 	bl	80011b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f80e 	bl	8000f14 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fd98 	bl	8000a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <HAL_InitTick+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f96d 	bl	800121e <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d809      	bhi.n	8000f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f937 	bl	80011ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <HAL_InitTick+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e001      	b.n	8000f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	200001c0 	.word	0x200001c0

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001c0 	.word	0x200001c0

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008

08001014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800103c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001046:	4a04      	ldr	r2, [pc, #16]	@ (8001058 <__NVIC_SetPriorityGrouping+0x44>)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	60d3      	str	r3, [r2, #12]
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <__NVIC_GetPriorityGrouping+0x18>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0307 	and.w	r3, r3, #7
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0b      	blt.n	80010a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <__NVIC_EnableIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	@ 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	@ 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001180:	d301      	bcc.n	8001186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001182:	2301      	movs	r3, #1
 8001184:	e00f      	b.n	80011a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <SysTick_Config+0x40>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118e:	210f      	movs	r1, #15
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f7ff ff8e 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <SysTick_Config+0x40>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119e:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <SysTick_Config+0x40>)
 80011a0:	2207      	movs	r2, #7
 80011a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	e000e010 	.word	0xe000e010

080011b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff29 	bl	8001014 <__NVIC_SetPriorityGrouping>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff3e 	bl	800105c <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff8e 	bl	8001108 <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff31 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa2 	bl	8001170 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d008      	beq.n	8001260 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2204      	movs	r2, #4
 8001252:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e022      	b.n	80012a6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 020e 	bic.w	r2, r2, #14
 800126e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	f003 021c 	and.w	r2, r3, #28
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e029      	b.n	800132a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f003 021c 	and.w	r2, r3, #28
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	2101      	movs	r1, #1
 8001304:	fa01 f202 	lsl.w	r2, r1, r2
 8001308:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
    }
  }
  return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e17f      	b.n	8001644 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8171 	beq.w	800163e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b01      	cmp	r3, #1
 8001366:	d005      	beq.n	8001374 <HAL_GPIO_Init+0x40>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d130      	bne.n	80013d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013aa:	2201      	movs	r2, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 0201 	and.w	r2, r3, #1
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d118      	bne.n	8001414 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e8:	2201      	movs	r2, #1
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b03      	cmp	r3, #3
 800141e:	d017      	beq.n	8001450 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d123      	bne.n	80014a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	08da      	lsrs	r2, r3, #3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3208      	adds	r2, #8
 8001464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	08da      	lsrs	r2, r3, #3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3208      	adds	r2, #8
 800149e:	6939      	ldr	r1, [r7, #16]
 80014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0203 	and.w	r2, r3, #3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80ac 	beq.w	800163e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <HAL_GPIO_Init+0x330>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001664 <HAL_GPIO_Init+0x330>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001664 <HAL_GPIO_Init+0x330>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fe:	4a5a      	ldr	r2, [pc, #360]	@ (8001668 <HAL_GPIO_Init+0x334>)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001528:	d025      	beq.n	8001576 <HAL_GPIO_Init+0x242>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4f      	ldr	r2, [pc, #316]	@ (800166c <HAL_GPIO_Init+0x338>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d01f      	beq.n	8001572 <HAL_GPIO_Init+0x23e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4e      	ldr	r2, [pc, #312]	@ (8001670 <HAL_GPIO_Init+0x33c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d019      	beq.n	800156e <HAL_GPIO_Init+0x23a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4d      	ldr	r2, [pc, #308]	@ (8001674 <HAL_GPIO_Init+0x340>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d013      	beq.n	800156a <HAL_GPIO_Init+0x236>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4c      	ldr	r2, [pc, #304]	@ (8001678 <HAL_GPIO_Init+0x344>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d00d      	beq.n	8001566 <HAL_GPIO_Init+0x232>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4b      	ldr	r2, [pc, #300]	@ (800167c <HAL_GPIO_Init+0x348>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d007      	beq.n	8001562 <HAL_GPIO_Init+0x22e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4a      	ldr	r2, [pc, #296]	@ (8001680 <HAL_GPIO_Init+0x34c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_GPIO_Init+0x22a>
 800155a:	2306      	movs	r3, #6
 800155c:	e00c      	b.n	8001578 <HAL_GPIO_Init+0x244>
 800155e:	2307      	movs	r3, #7
 8001560:	e00a      	b.n	8001578 <HAL_GPIO_Init+0x244>
 8001562:	2305      	movs	r3, #5
 8001564:	e008      	b.n	8001578 <HAL_GPIO_Init+0x244>
 8001566:	2304      	movs	r3, #4
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x244>
 800156a:	2303      	movs	r3, #3
 800156c:	e004      	b.n	8001578 <HAL_GPIO_Init+0x244>
 800156e:	2302      	movs	r3, #2
 8001570:	e002      	b.n	8001578 <HAL_GPIO_Init+0x244>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_GPIO_Init+0x244>
 8001576:	2300      	movs	r3, #0
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	f002 0203 	and.w	r2, r2, #3
 800157e:	0092      	lsls	r2, r2, #2
 8001580:	4093      	lsls	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001588:	4937      	ldr	r1, [pc, #220]	@ (8001668 <HAL_GPIO_Init+0x334>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3302      	adds	r3, #2
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001596:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_GPIO_Init+0x350>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ba:	4a32      	ldr	r2, [pc, #200]	@ (8001684 <HAL_GPIO_Init+0x350>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c0:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <HAL_GPIO_Init+0x350>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e4:	4a27      	ldr	r2, [pc, #156]	@ (8001684 <HAL_GPIO_Init+0x350>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ea:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <HAL_GPIO_Init+0x350>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800160e:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_GPIO_Init+0x350>)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <HAL_GPIO_Init+0x350>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <HAL_GPIO_Init+0x350>)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f ae78 	bne.w	8001344 <HAL_GPIO_Init+0x10>
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	48001000 	.word	0x48001000
 800167c:	48001400 	.word	0x48001400
 8001680:	48001800 	.word	0x48001800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e001      	b.n	80016aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016ec:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40007000 	.word	0x40007000

08001704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001712:	d130      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001714:	4b23      	ldr	r3, [pc, #140]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800171c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001720:	d038      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001722:	4b20      	ldr	r3, [pc, #128]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800172a:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2232      	movs	r2, #50	@ 0x32
 8001738:	fb02 f303 	mul.w	r3, r2, r3
 800173c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0c9b      	lsrs	r3, r3, #18
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001748:	e002      	b.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800175c:	d102      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x60>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f2      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001770:	d110      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e00f      	b.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001776:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001782:	d007      	beq.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800178c:	4a05      	ldr	r2, [pc, #20]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001792:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40007000 	.word	0x40007000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e3ca      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b97      	ldr	r3, [pc, #604]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b94      	ldr	r3, [pc, #592]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80e4 	beq.w	80019ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_RCC_OscConfig+0x4a>
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f040 808b 	bne.w	8001908 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	f040 8087 	bne.w	8001908 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fa:	4b89      	ldr	r3, [pc, #548]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d005      	beq.n	8001812 <HAL_RCC_OscConfig+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3a2      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	4b82      	ldr	r3, [pc, #520]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <HAL_RCC_OscConfig+0x7c>
 8001822:	4b7f      	ldr	r3, [pc, #508]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800182a:	e005      	b.n	8001838 <HAL_RCC_OscConfig+0x88>
 800182c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001838:	4293      	cmp	r3, r2
 800183a:	d223      	bcs.n	8001884 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fd55 	bl	80022f0 <RCC_SetFlashLatencyFromMSIRange>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e383      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001850:	4b73      	ldr	r3, [pc, #460]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a72      	ldr	r2, [pc, #456]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b70      	ldr	r3, [pc, #448]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	496d      	ldr	r1, [pc, #436]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800186e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	4968      	ldr	r1, [pc, #416]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e025      	b.n	80018d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001884:	4b66      	ldr	r3, [pc, #408]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a65      	ldr	r2, [pc, #404]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b63      	ldr	r3, [pc, #396]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4960      	ldr	r1, [pc, #384]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	495b      	ldr	r1, [pc, #364]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d109      	bne.n	80018d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fd15 	bl	80022f0 <RCC_SetFlashLatencyFromMSIRange>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e343      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018d0:	f000 fc4a 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b52      	ldr	r3, [pc, #328]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	4950      	ldr	r1, [pc, #320]	@ (8001a24 <HAL_RCC_OscConfig+0x274>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001a28 <HAL_RCC_OscConfig+0x278>)
 80018ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018f0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a2c <HAL_RCC_OscConfig+0x27c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fb0d 	bl	8000f14 <HAL_InitTick>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d052      	beq.n	80019aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	e327      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d032      	beq.n	8001976 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001910:	4b43      	ldr	r3, [pc, #268]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a42      	ldr	r2, [pc, #264]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb4a 	bl	8000fb4 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001924:	f7ff fb46 	bl	8000fb4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e310      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001936:	4b3a      	ldr	r3, [pc, #232]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a36      	ldr	r2, [pc, #216]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4931      	ldr	r1, [pc, #196]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001960:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	492c      	ldr	r1, [pc, #176]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
 8001974:	e01a      	b.n	80019ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001976:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a29      	ldr	r2, [pc, #164]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001982:	f7ff fb17 	bl	8000fb4 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800198a:	f7ff fb13 	bl	8000fb4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e2dd      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800199c:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x1da>
 80019a8:	e000      	b.n	80019ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d074      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x21a>
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d10e      	bne.n	80019e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d10b      	bne.n	80019e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d064      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d160      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e2ba      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x24a>
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e026      	b.n	8001a48 <HAL_RCC_OscConfig+0x298>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a02:	d115      	bne.n	8001a30 <HAL_RCC_OscConfig+0x280>
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a02      	ldr	r2, [pc, #8]	@ (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x298>
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08006854 	.word	0x08006854
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	4ba0      	ldr	r3, [pc, #640]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a9f      	ldr	r2, [pc, #636]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001a36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a9c      	ldr	r2, [pc, #624]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fab0 	bl	8000fb4 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff faac 	bl	8000fb4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	@ 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e276      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6a:	4b92      	ldr	r3, [pc, #584]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2a8>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fa9c 	bl	8000fb4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fa98 	bl	8000fb4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	@ 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e262      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a92:	4b88      	ldr	r3, [pc, #544]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2d0>
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d060      	beq.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x310>
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d116      	bne.n	8001aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac0:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x328>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e23f      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b76      	ldr	r3, [pc, #472]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4973      	ldr	r1, [pc, #460]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aec:	e040      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d023      	beq.n	8001b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af6:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7ff fa57 	bl	8000fb4 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff fa53 	bl	8000fb4 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e21d      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	4b65      	ldr	r3, [pc, #404]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b62      	ldr	r3, [pc, #392]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	495f      	ldr	r1, [pc, #380]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e018      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fa33 	bl	8000fb4 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fa2f 	bl	8000fb4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1f9      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b64:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d03c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b84:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8a:	4a4a      	ldr	r2, [pc, #296]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fa0e 	bl	8000fb4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff fa0a 	bl	8000fb4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e1d4      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bae:	4b41      	ldr	r3, [pc, #260]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ef      	beq.n	8001b9c <HAL_RCC_OscConfig+0x3ec>
 8001bbc:	e01b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff f9f1 	bl	8000fb4 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f9ed 	bl	8000fb4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e1b7      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001be8:	4b32      	ldr	r3, [pc, #200]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ef      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80a6 	beq.w	8001d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c08:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	4a26      	ldr	r2, [pc, #152]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c20:	4b24      	ldr	r3, [pc, #144]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_OscConfig+0x508>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d118      	bne.n	8001c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_RCC_OscConfig+0x508>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <HAL_RCC_OscConfig+0x508>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c48:	f7ff f9b4 	bl	8000fb4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7ff f9b0 	bl	8000fb4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e17a      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c62:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <HAL_RCC_OscConfig+0x508>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4d8>
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c86:	e029      	b.n	8001cdc <HAL_RCC_OscConfig+0x52c>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d115      	bne.n	8001cbc <HAL_RCC_OscConfig+0x50c>
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c96:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca6:	4a03      	ldr	r2, [pc, #12]	@ (8001cb4 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cb0:	e014      	b.n	8001cdc <HAL_RCC_OscConfig+0x52c>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	4b9c      	ldr	r3, [pc, #624]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	4a9b      	ldr	r2, [pc, #620]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ccc:	4b98      	ldr	r3, [pc, #608]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cd2:	4a97      	ldr	r2, [pc, #604]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d016      	beq.n	8001d12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f966 	bl	8000fb4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cec:	f7ff f962 	bl	8000fb4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e12a      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d02:	4b8b      	ldr	r3, [pc, #556]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0ed      	beq.n	8001cec <HAL_RCC_OscConfig+0x53c>
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d12:	f7ff f94f 	bl	8000fb4 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f94b 	bl	8000fb4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e113      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d30:	4b7f      	ldr	r3, [pc, #508]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1ed      	bne.n	8001d1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	7ffb      	ldrb	r3, [r7, #31]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d44:	4b7a      	ldr	r3, [pc, #488]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	4a79      	ldr	r2, [pc, #484]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80fe 	beq.w	8001f56 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	f040 80d0 	bne.w	8001f04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d64:	4b72      	ldr	r3, [pc, #456]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d130      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	3b01      	subs	r3, #1
 8001d84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d127      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d11f      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001da4:	2a07      	cmp	r2, #7
 8001da6:	bf14      	ite	ne
 8001da8:	2201      	movne	r2, #1
 8001daa:	2200      	moveq	r2, #0
 8001dac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d113      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d06e      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d069      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001de0:	4b53      	ldr	r3, [pc, #332]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dec:	4b50      	ldr	r3, [pc, #320]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0ad      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e08:	f7ff f8d4 	bl	8000fb4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f8d0 	bl	8000fb4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e09a      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e22:	4b43      	ldr	r3, [pc, #268]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	4b40      	ldr	r3, [pc, #256]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4b40      	ldr	r3, [pc, #256]	@ (8001f34 <HAL_RCC_OscConfig+0x784>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e50:	0852      	lsrs	r2, r2, #1
 8001e52:	3a01      	subs	r2, #1
 8001e54:	0552      	lsls	r2, r2, #21
 8001e56:	4311      	orrs	r1, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e5c:	0852      	lsrs	r2, r2, #1
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	0652      	lsls	r2, r2, #25
 8001e62:	4311      	orrs	r1, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e68:	0912      	lsrs	r2, r2, #4
 8001e6a:	0452      	lsls	r2, r2, #17
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	4930      	ldr	r1, [pc, #192]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e74:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a2d      	ldr	r2, [pc, #180]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a2a      	ldr	r2, [pc, #168]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e8c:	f7ff f892 	bl	8000fb4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f88e 	bl	8000fb4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e058      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb2:	e050      	b.n	8001f56 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e04f      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d148      	bne.n	8001f56 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a16      	ldr	r2, [pc, #88]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001edc:	f7ff f86a 	bl	8000fb4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff f866 	bl	8000fb4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e030      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x734>
 8001f02:	e028      	b.n	8001f56 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d023      	beq.n	8001f52 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_RCC_OscConfig+0x780>)
 8001f10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7ff f84d 	bl	8000fb4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1c:	e00c      	b.n	8001f38 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7ff f849 	bl	8000fb4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d905      	bls.n	8001f38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e013      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
 8001f30:	40021000 	.word	0x40021000
 8001f34:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_RCC_OscConfig+0x7b0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1ec      	bne.n	8001f1e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_RCC_OscConfig+0x7b0>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4905      	ldr	r1, [pc, #20]	@ (8001f60 <HAL_RCC_OscConfig+0x7b0>)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_RCC_OscConfig+0x7b4>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
 8001f50:	e001      	b.n	8001f56 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	feeefffc 	.word	0xfeeefffc

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0e7      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b75      	ldr	r3, [pc, #468]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b72      	ldr	r3, [pc, #456]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4970      	ldr	r1, [pc, #448]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0cf      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b66      	ldr	r3, [pc, #408]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d908      	bls.n	8001fda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4960      	ldr	r1, [pc, #384]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d04c      	beq.n	8002080 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fee:	4b5a      	ldr	r3, [pc, #360]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d121      	bne.n	800203e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0a6      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002006:	4b54      	ldr	r3, [pc, #336]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d115      	bne.n	800203e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e09a      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201e:	4b4e      	ldr	r3, [pc, #312]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e08e      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202e:	4b4a      	ldr	r3, [pc, #296]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e086      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4943      	ldr	r1, [pc, #268]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002050:	f7fe ffb0 	bl	8000fb4 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe ffac 	bl	8000fb4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e06e      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002098:	429a      	cmp	r2, r3
 800209a:	d208      	bcs.n	80020ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	492b      	ldr	r1, [pc, #172]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d210      	bcs.n	80020de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 0207 	bic.w	r2, r3, #7
 80020c4:	4923      	ldr	r1, [pc, #140]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_RCC_ClockConfig+0x1ec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e036      	b.n	800214c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	4918      	ldr	r1, [pc, #96]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4910      	ldr	r1, [pc, #64]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800211c:	f000 f824 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	490b      	ldr	r1, [pc, #44]	@ (800215c <HAL_RCC_ClockConfig+0x1f4>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1fc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fee7 	bl	8000f14 <HAL_InitTick>
 8002146:	4603      	mov	r3, r0
 8002148:	72fb      	strb	r3, [r7, #11]

  return status;
 800214a:	7afb      	ldrb	r3, [r7, #11]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	08006854 	.word	0x08006854
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	@ 0x24
 800216c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	4b3e      	ldr	r3, [pc, #248]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002180:	4b3b      	ldr	r3, [pc, #236]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x34>
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d121      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d11e      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800219c:	4b34      	ldr	r3, [pc, #208]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021a8:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e005      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x110>)
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e004      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021ec:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_RCC_GetSysClockFreq+0x114>)
 80021ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d134      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0xa6>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d003      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0xac>
 800220c:	e005      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <HAL_RCC_GetSysClockFreq+0x110>)
 8002210:	617b      	str	r3, [r7, #20]
      break;
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002214:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_RCC_GetSysClockFreq+0x114>)
 8002216:	617b      	str	r3, [r7, #20]
      break;
 8002218:	e002      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	617b      	str	r3, [r7, #20]
      break;
 800221e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002220:	4b13      	ldr	r3, [pc, #76]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	3301      	adds	r3, #1
 800222c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	fb03 f202 	mul.w	r2, r3, r2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	0e5b      	lsrs	r3, r3, #25
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	3301      	adds	r3, #1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002260:	69bb      	ldr	r3, [r7, #24]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	0800686c 	.word	0x0800686c
 8002278:	00f42400 	.word	0x00f42400
 800227c:	007a1200 	.word	0x007a1200

08002280 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_RCC_GetHCLKFreq+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800229c:	f7ff fff0 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4904      	ldr	r1, [pc, #16]	@ (80022c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08006864 	.word	0x08006864

080022c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022c8:	f7ff ffda 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0adb      	lsrs	r3, r3, #11
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4904      	ldr	r1, [pc, #16]	@ (80022ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08006864 	.word	0x08006864

080022f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002308:	f7ff f9ee 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 800230c:	6178      	str	r0, [r7, #20]
 800230e:	e014      	b.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002314:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231a:	6593      	str	r3, [r2, #88]	@ 0x58
 800231c:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002328:	f7ff f9de 	bl	80016e8 <HAL_PWREx_GetVoltageRange>
 800232c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b1e      	ldr	r3, [pc, #120]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002340:	d10b      	bne.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b80      	cmp	r3, #128	@ 0x80
 8002346:	d919      	bls.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2ba0      	cmp	r3, #160	@ 0xa0
 800234c:	d902      	bls.n	8002354 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800234e:	2302      	movs	r3, #2
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e013      	b.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002354:	2301      	movs	r3, #1
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e010      	b.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b80      	cmp	r3, #128	@ 0x80
 800235e:	d902      	bls.n	8002366 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002360:	2303      	movs	r3, #3
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e00a      	b.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b80      	cmp	r3, #128	@ 0x80
 800236a:	d102      	bne.n	8002372 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800236c:	2302      	movs	r3, #2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	e004      	b.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b70      	cmp	r3, #112	@ 0x70
 8002376:	d101      	bne.n	800237c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002378:	2301      	movs	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 0207 	bic.w	r2, r3, #7
 8002384:	4909      	ldr	r1, [pc, #36]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800238c:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40022000 	.word	0x40022000

080023b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023b8:	2300      	movs	r3, #0
 80023ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d041      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023d4:	d02a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023da:	d824      	bhi.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023e0:	d008      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023e6:	d81e      	bhi.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f0:	d010      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023f2:	e018      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f4:	4b86      	ldr	r3, [pc, #536]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a85      	ldr	r2, [pc, #532]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002400:	e015      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fabb 	bl	8002984 <RCCEx_PLLSAI1_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002412:	e00c      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3320      	adds	r3, #32
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fba6 	bl	8002b6c <RCCEx_PLLSAI2_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002424:	e003      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	74fb      	strb	r3, [r7, #19]
      break;
 800242a:	e000      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800242c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002434:	4b76      	ldr	r3, [pc, #472]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002442:	4973      	ldr	r1, [pc, #460]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800244a:	e001      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d041      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002460:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002464:	d02a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002466:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800246a:	d824      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800246c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002476:	d81e      	bhi.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d010      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002482:	e018      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002484:	4b62      	ldr	r3, [pc, #392]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a61      	ldr	r2, [pc, #388]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002490:	e015      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fa73 	bl	8002984 <RCCEx_PLLSAI1_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024a2:	e00c      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3320      	adds	r3, #32
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fb5e 	bl	8002b6c <RCCEx_PLLSAI2_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024b4:	e003      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ba:	e000      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024c4:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024d2:	494f      	ldr	r1, [pc, #316]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024da:	e001      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80a0 	beq.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f2:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00d      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002508:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	4a40      	ldr	r2, [pc, #256]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002512:	6593      	str	r3, [r2, #88]	@ 0x58
 8002514:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002520:	2301      	movs	r3, #1
 8002522:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3a      	ldr	r2, [pc, #232]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002530:	f7fe fd40 	bl	8000fb4 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002536:	e009      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002538:	f7fe fd3c 	bl	8000fb4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	74fb      	strb	r3, [r7, #19]
        break;
 800254a:	e005      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800254c:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d15c      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800255e:	4b2c      	ldr	r3, [pc, #176]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01f      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	d019      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257c:	4b24      	ldr	r3, [pc, #144]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002588:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	4a20      	ldr	r2, [pc, #128]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259e:	4a1c      	ldr	r2, [pc, #112]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a8:	4a19      	ldr	r2, [pc, #100]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fcfb 	bl	8000fb4 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c0:	e00b      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fcf7 	bl	8000fb4 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	74fb      	strb	r3, [r7, #19]
            break;
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ec      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025fe:	4904      	ldr	r1, [pc, #16]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002606:	e009      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
 800260c:	e006      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800261c:	7c7b      	ldrb	r3, [r7, #17]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002622:	4b9e      	ldr	r3, [pc, #632]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	4a9d      	ldr	r2, [pc, #628]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800263a:	4b98      	ldr	r3, [pc, #608]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f023 0203 	bic.w	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002648:	4994      	ldr	r1, [pc, #592]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800265c:	4b8f      	ldr	r3, [pc, #572]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002662:	f023 020c 	bic.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	498c      	ldr	r1, [pc, #560]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267e:	4b87      	ldr	r3, [pc, #540]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002684:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	4983      	ldr	r1, [pc, #524]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a0:	4b7e      	ldr	r3, [pc, #504]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	497b      	ldr	r1, [pc, #492]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026c2:	4b76      	ldr	r3, [pc, #472]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d0:	4972      	ldr	r1, [pc, #456]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e4:	4b6d      	ldr	r3, [pc, #436]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	496a      	ldr	r1, [pc, #424]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002706:	4b65      	ldr	r3, [pc, #404]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	4961      	ldr	r1, [pc, #388]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002728:	4b5c      	ldr	r3, [pc, #368]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002736:	4959      	ldr	r1, [pc, #356]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274a:	4b54      	ldr	r3, [pc, #336]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002750:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002758:	4950      	ldr	r1, [pc, #320]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800276c:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277a:	4948      	ldr	r1, [pc, #288]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800278e:	4b43      	ldr	r3, [pc, #268]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	493f      	ldr	r1, [pc, #252]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d028      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027b0:	4b3a      	ldr	r3, [pc, #232]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027be:	4937      	ldr	r1, [pc, #220]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ce:	d106      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d0:	4b32      	ldr	r3, [pc, #200]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a31      	ldr	r2, [pc, #196]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027da:	60d3      	str	r3, [r2, #12]
 80027dc:	e011      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e6:	d10c      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f8c8 	bl	8002984 <RCCEx_PLLSAI1_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d028      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800280e:	4b23      	ldr	r3, [pc, #140]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281c:	491f      	ldr	r1, [pc, #124]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282c:	d106      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282e:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a1a      	ldr	r2, [pc, #104]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002838:	60d3      	str	r3, [r2, #12]
 800283a:	e011      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002844:	d10c      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f000 f899 	bl	8002984 <RCCEx_PLLSAI1_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02b      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287a:	4908      	ldr	r1, [pc, #32]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800288a:	d109      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288c:	4b03      	ldr	r3, [pc, #12]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a02      	ldr	r2, [pc, #8]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002896:	60d3      	str	r3, [r2, #12]
 8002898:	e014      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2101      	movs	r1, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f867 	bl	8002984 <RCCEx_PLLSAI1_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02f      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028de:	4928      	ldr	r1, [pc, #160]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ee:	d10d      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f844 	bl	8002984 <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d014      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	74bb      	strb	r3, [r7, #18]
 800290a:	e011      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3320      	adds	r3, #32
 800291a:	2102      	movs	r1, #2
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f925 	bl	8002b6c <RCCEx_PLLSAI2_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800294a:	490d      	ldr	r1, [pc, #52]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800296e:	4904      	ldr	r1, [pc, #16]	@ (8002980 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002976:	7cbb      	ldrb	r3, [r7, #18]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000

08002984 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002992:	4b75      	ldr	r3, [pc, #468]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d018      	beq.n	80029d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800299e:	4b72      	ldr	r3, [pc, #456]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0203 	and.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d10d      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
       ||
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
       ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d047      	beq.n	8002a5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	e044      	b.n	8002a5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d018      	beq.n	8002a0a <RCCEx_PLLSAI1_Config+0x86>
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d825      	bhi.n	8002a28 <RCCEx_PLLSAI1_Config+0xa4>
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <RCCEx_PLLSAI1_Config+0x62>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d009      	beq.n	80029f8 <RCCEx_PLLSAI1_Config+0x74>
 80029e4:	e020      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029e6:	4b60      	ldr	r3, [pc, #384]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11d      	bne.n	8002a2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f6:	e01a      	b.n	8002a2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e013      	b.n	8002a32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a0a:	4b57      	ldr	r3, [pc, #348]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a16:	4b54      	ldr	r3, [pc, #336]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a26:	e006      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	e004      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10d      	bne.n	8002a5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	430b      	orrs	r3, r1
 8002a54:	4944      	ldr	r1, [pc, #272]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d17d      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a60:	4b41      	ldr	r3, [pc, #260]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a40      	ldr	r2, [pc, #256]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe faa2 	bl	8000fb4 <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a72:	e009      	b.n	8002a88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a74:	f7fe fa9e 	bl	8000fb4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d902      	bls.n	8002a88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	73fb      	strb	r3, [r7, #15]
        break;
 8002a86:	e005      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a88:	4b37      	ldr	r3, [pc, #220]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1ef      	bne.n	8002a74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d160      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa0:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6892      	ldr	r2, [r2, #8]
 8002ab0:	0211      	lsls	r1, r2, #8
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	0912      	lsrs	r2, r2, #4
 8002ab8:	0452      	lsls	r2, r2, #17
 8002aba:	430a      	orrs	r2, r1
 8002abc:	492a      	ldr	r1, [pc, #168]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	610b      	str	r3, [r1, #16]
 8002ac2:	e027      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d112      	bne.n	8002af0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aca:	4b27      	ldr	r3, [pc, #156]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ad2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6892      	ldr	r2, [r2, #8]
 8002ada:	0211      	lsls	r1, r2, #8
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6912      	ldr	r2, [r2, #16]
 8002ae0:	0852      	lsrs	r2, r2, #1
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	0552      	lsls	r2, r2, #21
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	491f      	ldr	r1, [pc, #124]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	610b      	str	r3, [r1, #16]
 8002aee:	e011      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002af8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6892      	ldr	r2, [r2, #8]
 8002b00:	0211      	lsls	r1, r2, #8
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6952      	ldr	r2, [r2, #20]
 8002b06:	0852      	lsrs	r2, r2, #1
 8002b08:	3a01      	subs	r2, #1
 8002b0a:	0652      	lsls	r2, r2, #25
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	4916      	ldr	r1, [pc, #88]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b14:	4b14      	ldr	r3, [pc, #80]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe fa48 	bl	8000fb4 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b26:	e009      	b.n	8002b3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b28:	f7fe fa44 	bl	8000fb4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d902      	bls.n	8002b3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	73fb      	strb	r3, [r7, #15]
          break;
 8002b3a:	e005      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ef      	beq.n	8002b28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	4904      	ldr	r1, [pc, #16]	@ (8002b68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b86:	4b67      	ldr	r3, [pc, #412]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0203 	and.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d10d      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
       ||
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b9e:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
       ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d047      	beq.n	8002c42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	e044      	b.n	8002c42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d018      	beq.n	8002bf2 <RCCEx_PLLSAI2_Config+0x86>
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d825      	bhi.n	8002c10 <RCCEx_PLLSAI2_Config+0xa4>
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d002      	beq.n	8002bce <RCCEx_PLLSAI2_Config+0x62>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d009      	beq.n	8002be0 <RCCEx_PLLSAI2_Config+0x74>
 8002bcc:	e020      	b.n	8002c10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bce:	4b55      	ldr	r3, [pc, #340]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11d      	bne.n	8002c16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bde:	e01a      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002be0:	4b50      	ldr	r3, [pc, #320]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf0:	e013      	b.n	8002c1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bfe:	4b49      	ldr	r3, [pc, #292]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c0e:	e006      	b.n	8002c1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e004      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c26:	4b3f      	ldr	r3, [pc, #252]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	4939      	ldr	r1, [pc, #228]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d167      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c48:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a35      	ldr	r2, [pc, #212]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c54:	f7fe f9ae 	bl	8000fb4 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c5a:	e009      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c5c:	f7fe f9aa 	bl	8000fb4 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c6e:	e005      	b.n	8002c7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c70:	4b2c      	ldr	r3, [pc, #176]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ef      	bne.n	8002c5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d14a      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c88:	4b26      	ldr	r3, [pc, #152]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	0211      	lsls	r1, r2, #8
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68d2      	ldr	r2, [r2, #12]
 8002c9e:	0912      	lsrs	r2, r2, #4
 8002ca0:	0452      	lsls	r2, r2, #17
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	491f      	ldr	r1, [pc, #124]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	614b      	str	r3, [r1, #20]
 8002caa:	e011      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6892      	ldr	r2, [r2, #8]
 8002cbc:	0211      	lsls	r1, r2, #8
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6912      	ldr	r2, [r2, #16]
 8002cc2:	0852      	lsrs	r2, r2, #1
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	0652      	lsls	r2, r2, #25
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	4916      	ldr	r1, [pc, #88]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe f96a 	bl	8000fb4 <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ce2:	e009      	b.n	8002cf8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce4:	f7fe f966 	bl	8000fb4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf6:	e005      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4904      	ldr	r1, [pc, #16]	@ (8002d24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e095      	b.n	8002e66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d4a:	d009      	beq.n	8002d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	e005      	b.n	8002d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fe80 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002da0:	d902      	bls.n	8002da8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e002      	b.n	8002dae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002db6:	d007      	beq.n	8002dc8 <HAL_SPI_Init+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002dc0:	d002      	beq.n	8002dc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e00:	431a      	orrs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0a:	ea42 0103 	orr.w	r1, r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	f003 0204 	and.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e44:	ea42 0103 	orr.w	r1, r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b088      	sub	sp, #32
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7e:	f7fe f899 	bl	8000fb4 <HAL_GetTick>
 8002e82:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
 8002e96:	e15c      	b.n	8003152 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_Transmit+0x36>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e154      	b.n	8003152 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_SPI_Transmit+0x48>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e14d      	b.n	8003152 <HAL_SPI_Transmit+0x2e4>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f08:	d10f      	bne.n	8002f2a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f34:	2b40      	cmp	r3, #64	@ 0x40
 8002f36:	d007      	beq.n	8002f48 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f50:	d952      	bls.n	8002ff8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_SPI_Transmit+0xf2>
 8002f5a:	8b7b      	ldrh	r3, [r7, #26]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d145      	bne.n	8002fec <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	881a      	ldrh	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f70:	1c9a      	adds	r2, r3, #2
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f84:	e032      	b.n	8002fec <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d112      	bne.n	8002fba <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fb8:	e018      	b.n	8002fec <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fba:	f7fd fffb 	bl	8000fb4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d803      	bhi.n	8002fd2 <HAL_SPI_Transmit+0x164>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d102      	bne.n	8002fd8 <HAL_SPI_Transmit+0x16a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0b2      	b.n	8003152 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1c7      	bne.n	8002f86 <HAL_SPI_Transmit+0x118>
 8002ff6:	e083      	b.n	8003100 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit+0x198>
 8003000:	8b7b      	ldrh	r3, [r7, #26]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d177      	bne.n	80030f6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d912      	bls.n	8003036 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	1c9a      	adds	r2, r3, #2
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b02      	subs	r3, #2
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003034:	e05f      	b.n	80030f6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800305c:	e04b      	b.n	80030f6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d12b      	bne.n	80030c4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d912      	bls.n	800309c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b02      	subs	r3, #2
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800309a:	e02c      	b.n	80030f6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030c2:	e018      	b.n	80030f6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c4:	f7fd ff76 	bl	8000fb4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d803      	bhi.n	80030dc <HAL_SPI_Transmit+0x26e>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Transmit+0x274>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e02d      	b.n	8003152 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ae      	bne.n	800305e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fcf5 	bl	8003af4 <SPI_EndRxTxTransaction>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003150:	2300      	movs	r3, #0
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b088      	sub	sp, #32
 800315e:	af02      	add	r7, sp, #8
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
 8003178:	e123      	b.n	80033c2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003182:	d112      	bne.n	80031aa <HAL_SPI_Receive+0x50>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10e      	bne.n	80031aa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2204      	movs	r2, #4
 8003190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003194:	88fa      	ldrh	r2, [r7, #6]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	4613      	mov	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f912 	bl	80033ca <HAL_SPI_TransmitReceive>
 80031a6:	4603      	mov	r3, r0
 80031a8:	e10b      	b.n	80033c2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031aa:	f7fd ff03 	bl	8000fb4 <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Receive+0x62>
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e100      	b.n	80033c2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_SPI_Receive+0x74>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0f9      	b.n	80033c2 <HAL_SPI_Receive+0x268>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2204      	movs	r2, #4
 80031da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003220:	d908      	bls.n	8003234 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e007      	b.n	8003244 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324c:	d10f      	bne.n	800326e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800326c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d007      	beq.n	800328c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003294:	d875      	bhi.n	8003382 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003296:	e037      	b.n	8003308 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d117      	bne.n	80032d6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f103 020c 	add.w	r2, r3, #12
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032d4:	e018      	b.n	8003308 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fd fe6d 	bl	8000fb4 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Receive+0x194>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Receive+0x19a>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e05c      	b.n	80033c2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1c1      	bne.n	8003298 <HAL_SPI_Receive+0x13e>
 8003314:	e03b      	b.n	800338e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d115      	bne.n	8003350 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	b292      	uxth	r2, r2
 8003330:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	1c9a      	adds	r2, r3, #2
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800334e:	e018      	b.n	8003382 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003350:	f7fd fe30 	bl	8000fb4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d803      	bhi.n	8003368 <HAL_SPI_Receive+0x20e>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	d102      	bne.n	800336e <HAL_SPI_Receive+0x214>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e01f      	b.n	80033c2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1c3      	bne.n	8003316 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fb56 	bl	8003a44 <SPI_EndRxTransaction>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b08a      	sub	sp, #40	@ 0x28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033d8:	2301      	movs	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033dc:	f7fd fdea 	bl	8000fb4 <HAL_GetTick>
 80033e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033f8:	7ffb      	ldrb	r3, [r7, #31]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d00c      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x4e>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003404:	d106      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <HAL_SPI_TransmitReceive+0x4a>
 800340e:	7ffb      	ldrb	r3, [r7, #31]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d001      	beq.n	8003418 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
 8003416:	e1f3      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_SPI_TransmitReceive+0x60>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_TransmitReceive+0x60>
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e1e8      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_SPI_TransmitReceive+0x72>
 8003438:	2302      	movs	r3, #2
 800343a:	e1e1      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b04      	cmp	r3, #4
 800344e:	d003      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2205      	movs	r2, #5
 8003454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	887a      	ldrh	r2, [r7, #2]
 8003470:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	887a      	ldrh	r2, [r7, #2]
 800347e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800349a:	d802      	bhi.n	80034a2 <HAL_SPI_TransmitReceive+0xd8>
 800349c:	8abb      	ldrh	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d908      	bls.n	80034b4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	e007      	b.n	80034c4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d007      	beq.n	80034e2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034ea:	f240 8083 	bls.w	80035f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x132>
 80034f6:	8afb      	ldrh	r3, [r7, #22]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d16f      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003520:	e05c      	b.n	80035dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b02      	cmp	r3, #2
 800352e:	d11b      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x19e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x19e>
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	d113      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003544:	881a      	ldrh	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	1c9a      	adds	r2, r3, #2
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d11c      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x1e6>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800357c:	b29b      	uxth	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	b292      	uxth	r2, r2
 800358e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	1c9a      	adds	r2, r3, #2
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035b0:	f7fd fd00 	bl	8000fb4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035bc:	429a      	cmp	r2, r3
 80035be:	d80d      	bhi.n	80035dc <HAL_SPI_TransmitReceive+0x212>
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d009      	beq.n	80035dc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e111      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d19d      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x158>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d197      	bne.n	8003522 <HAL_SPI_TransmitReceive+0x158>
 80035f2:	e0e5      	b.n	80037c0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x23a>
 80035fc:	8afb      	ldrh	r3, [r7, #22]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	f040 80d1 	bne.w	80037a6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d912      	bls.n	8003634 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361e:	1c9a      	adds	r2, r3, #2
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b02      	subs	r3, #2
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003632:	e0b8      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365a:	e0a4      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b02      	cmp	r3, #2
 8003668:	d134      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x30a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02f      	beq.n	80036d4 <HAL_SPI_TransmitReceive+0x30a>
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	2b01      	cmp	r3, #1
 8003678:	d12c      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d912      	bls.n	80036aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b02      	subs	r3, #2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036a8:	e012      	b.n	80036d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	7812      	ldrb	r2, [r2, #0]
 80036b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d148      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x3aa>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d042      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d923      	bls.n	8003742 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	b292      	uxth	r2, r2
 8003706:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b02      	subs	r3, #2
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800372a:	b29b      	uxth	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d81f      	bhi.n	8003770 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	e016      	b.n	8003770 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f103 020c 	add.w	r2, r3, #12
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	7812      	ldrb	r2, [r2, #0]
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003770:	2301      	movs	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003774:	f7fd fc1e 	bl	8000fb4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003780:	429a      	cmp	r2, r3
 8003782:	d803      	bhi.n	800378c <HAL_SPI_TransmitReceive+0x3c2>
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d102      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x3c8>
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e02c      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af55 	bne.w	800365c <HAL_SPI_TransmitReceive+0x292>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f47f af4e 	bne.w	800365c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037c0:	6a3a      	ldr	r2, [r7, #32]
 80037c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f995 	bl	8003af4 <SPI_EndRxTxTransaction>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00e      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	@ 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003818:	f7fd fbcc 	bl	8000fb4 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003828:	f7fd fbc4 	bl	8000fb4 <HAL_GetTick>
 800382c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800382e:	4b39      	ldr	r3, [pc, #228]	@ (8003914 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	015b      	lsls	r3, r3, #5
 8003834:	0d1b      	lsrs	r3, r3, #20
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	fb02 f303 	mul.w	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	e054      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d050      	beq.n	80038ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003848:	f7fd fbb4 	bl	8000fb4 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d902      	bls.n	800385e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d13d      	bne.n	80038da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800386c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003876:	d111      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003880:	d004      	beq.n	800388c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d107      	bne.n	800389c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a4:	d10f      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e017      	b.n	800390a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	429a      	cmp	r2, r3
 8003906:	d19b      	bne.n	8003840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000000 	.word	0x20000000

08003918 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	@ 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800392a:	f7fd fb43 	bl	8000fb4 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	4413      	add	r3, r2
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800393a:	f7fd fb3b 	bl	8000fb4 <HAL_GetTick>
 800393e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003948:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00da      	lsls	r2, r3, #3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	0d1b      	lsrs	r3, r3, #20
 8003958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003960:	e060      	b.n	8003a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003968:	d107      	bne.n	800397a <SPI_WaitFifoStateUntilTimeout+0x62>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003978:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d050      	beq.n	8003a24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003982:	f7fd fb17 	bl	8000fb4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398e:	429a      	cmp	r2, r3
 8003990:	d902      	bls.n	8003998 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	2b00      	cmp	r3, #0
 8003996:	d13d      	bne.n	8003a14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80039a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039b0:	d111      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ba:	d004      	beq.n	80039c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c4:	d107      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039de:	d10f      	bne.n	8003a00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e010      	b.n	8003a36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d196      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3728      	adds	r7, #40	@ 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000000 	.word	0x20000000

08003a44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a58:	d111      	bne.n	8003a7e <SPI_EndRxTransaction+0x3a>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a62:	d004      	beq.n	8003a6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6c:	d107      	bne.n	8003a7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2180      	movs	r1, #128	@ 0x80
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff febd 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a98:	f043 0220 	orr.w	r2, r3, #32
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e023      	b.n	8003aec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aac:	d11d      	bne.n	8003aea <SPI_EndRxTransaction+0xa6>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab6:	d004      	beq.n	8003ac2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac0:	d113      	bne.n	8003aea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f7ff ff22 	bl	8003918 <SPI_WaitFifoStateUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e000      	b.n	8003aec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff ff03 	bl	8003918 <SPI_WaitFifoStateUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e027      	b.n	8003b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2180      	movs	r1, #128	@ 0x80
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fe68 	bl	8003808 <SPI_WaitFlagStateUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e014      	b.n	8003b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fedc 	bl	8003918 <SPI_WaitFifoStateUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e000      	b.n	8003b78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e049      	b.n	8003c26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc ffcc 	bl	8000b44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3304      	adds	r3, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 f94a 	bl	8003e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0ff      	b.n	8003e4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b14      	cmp	r3, #20
 8003c5a:	f200 80f0 	bhi.w	8003e3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003e3f 	.word	0x08003e3f
 8003c6c:	08003e3f 	.word	0x08003e3f
 8003c70:	08003e3f 	.word	0x08003e3f
 8003c74:	08003cf9 	.word	0x08003cf9
 8003c78:	08003e3f 	.word	0x08003e3f
 8003c7c:	08003e3f 	.word	0x08003e3f
 8003c80:	08003e3f 	.word	0x08003e3f
 8003c84:	08003d3b 	.word	0x08003d3b
 8003c88:	08003e3f 	.word	0x08003e3f
 8003c8c:	08003e3f 	.word	0x08003e3f
 8003c90:	08003e3f 	.word	0x08003e3f
 8003c94:	08003d7b 	.word	0x08003d7b
 8003c98:	08003e3f 	.word	0x08003e3f
 8003c9c:	08003e3f 	.word	0x08003e3f
 8003ca0:	08003e3f 	.word	0x08003e3f
 8003ca4:	08003dbd 	.word	0x08003dbd
 8003ca8:	08003e3f 	.word	0x08003e3f
 8003cac:	08003e3f 	.word	0x08003e3f
 8003cb0:	08003e3f 	.word	0x08003e3f
 8003cb4:	08003dfd 	.word	0x08003dfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f970 	bl	8003fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	619a      	str	r2, [r3, #24]
      break;
 8003cf6:	e0a5      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f9e0 	bl	80040c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699a      	ldr	r2, [r3, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6999      	ldr	r1, [r3, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	619a      	str	r2, [r3, #24]
      break;
 8003d38:	e084      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fa49 	bl	80041d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0208 	orr.w	r2, r2, #8
 8003d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0204 	bic.w	r2, r2, #4
 8003d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
      break;
 8003d78:	e064      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fab1 	bl	80042e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69d9      	ldr	r1, [r3, #28]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	021a      	lsls	r2, r3, #8
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	61da      	str	r2, [r3, #28]
      break;
 8003dba:	e043      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fafa 	bl	80043bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0208 	orr.w	r2, r2, #8
 8003dd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0204 	bic.w	r2, r2, #4
 8003de6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003dfa:	e023      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fb3e 	bl	8004484 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	021a      	lsls	r2, r3, #8
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e3c:	e002      	b.n	8003e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
      break;
 8003e42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop

08003e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a46      	ldr	r2, [pc, #280]	@ (8003f84 <TIM_Base_SetConfig+0x12c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d013      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e76:	d00f      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a43      	ldr	r2, [pc, #268]	@ (8003f88 <TIM_Base_SetConfig+0x130>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a42      	ldr	r2, [pc, #264]	@ (8003f8c <TIM_Base_SetConfig+0x134>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a41      	ldr	r2, [pc, #260]	@ (8003f90 <TIM_Base_SetConfig+0x138>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a40      	ldr	r2, [pc, #256]	@ (8003f94 <TIM_Base_SetConfig+0x13c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d108      	bne.n	8003eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a35      	ldr	r2, [pc, #212]	@ (8003f84 <TIM_Base_SetConfig+0x12c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a32      	ldr	r2, [pc, #200]	@ (8003f88 <TIM_Base_SetConfig+0x130>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a31      	ldr	r2, [pc, #196]	@ (8003f8c <TIM_Base_SetConfig+0x134>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a30      	ldr	r2, [pc, #192]	@ (8003f90 <TIM_Base_SetConfig+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8003f94 <TIM_Base_SetConfig+0x13c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2e      	ldr	r2, [pc, #184]	@ (8003f98 <TIM_Base_SetConfig+0x140>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f9c <TIM_Base_SetConfig+0x144>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0x9a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa0 <TIM_Base_SetConfig+0x148>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	@ (8003f84 <TIM_Base_SetConfig+0x12c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00f      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a18      	ldr	r2, [pc, #96]	@ (8003f94 <TIM_Base_SetConfig+0x13c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00b      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a17      	ldr	r2, [pc, #92]	@ (8003f98 <TIM_Base_SetConfig+0x140>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d007      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <TIM_Base_SetConfig+0x144>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d003      	beq.n	8003f50 <TIM_Base_SetConfig+0xf8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <TIM_Base_SetConfig+0x148>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	611a      	str	r2, [r3, #16]
  }
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800

08003fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f023 0201 	bic.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f023 0302 	bic.w	r3, r3, #2
 8003ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80040b0 <TIM_OC1_SetConfig+0x10c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a2b      	ldr	r2, [pc, #172]	@ (80040b4 <TIM_OC1_SetConfig+0x110>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a2a      	ldr	r2, [pc, #168]	@ (80040b8 <TIM_OC1_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a29      	ldr	r2, [pc, #164]	@ (80040bc <TIM_OC1_SetConfig+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC1_SetConfig+0x80>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a28      	ldr	r2, [pc, #160]	@ (80040c0 <TIM_OC1_SetConfig+0x11c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10c      	bne.n	800403e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0308 	bic.w	r3, r3, #8
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1b      	ldr	r2, [pc, #108]	@ (80040b0 <TIM_OC1_SetConfig+0x10c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1a      	ldr	r2, [pc, #104]	@ (80040b4 <TIM_OC1_SetConfig+0x110>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <TIM_OC1_SetConfig+0x114>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <TIM_OC1_SetConfig+0x118>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC1_SetConfig+0xc2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <TIM_OC1_SetConfig+0x11c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d111      	bne.n	800408a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800406c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40013400 	.word	0x40013400
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400
 80040c0:	40014800 	.word	0x40014800

080040c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 0210 	bic.w	r2, r3, #16
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f023 0320 	bic.w	r3, r3, #32
 8004112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a28      	ldr	r2, [pc, #160]	@ (80041c4 <TIM_OC2_SetConfig+0x100>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC2_SetConfig+0x6c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <TIM_OC2_SetConfig+0x104>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10d      	bne.n	800414c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <TIM_OC2_SetConfig+0x100>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00f      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a1c      	ldr	r2, [pc, #112]	@ (80041c8 <TIM_OC2_SetConfig+0x104>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00b      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <TIM_OC2_SetConfig+0x108>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a1a      	ldr	r2, [pc, #104]	@ (80041d0 <TIM_OC2_SetConfig+0x10c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d003      	beq.n	8004174 <TIM_OC2_SetConfig+0xb0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a19      	ldr	r2, [pc, #100]	@ (80041d4 <TIM_OC2_SetConfig+0x110>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d113      	bne.n	800419c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800417a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40013400 	.word	0x40013400
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800

080041d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0303 	bic.w	r3, r3, #3
 8004212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a27      	ldr	r2, [pc, #156]	@ (80042d4 <TIM_OC3_SetConfig+0xfc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_OC3_SetConfig+0x6a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a26      	ldr	r2, [pc, #152]	@ (80042d8 <TIM_OC3_SetConfig+0x100>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10d      	bne.n	800425e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800425c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <TIM_OC3_SetConfig+0xfc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00f      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1b      	ldr	r2, [pc, #108]	@ (80042d8 <TIM_OC3_SetConfig+0x100>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d00b      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <TIM_OC3_SetConfig+0x104>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d007      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a19      	ldr	r2, [pc, #100]	@ (80042e0 <TIM_OC3_SetConfig+0x108>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_OC3_SetConfig+0xae>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <TIM_OC3_SetConfig+0x10c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d113      	bne.n	80042ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800428c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	40012c00 	.word	0x40012c00
 80042d8:	40013400 	.word	0x40013400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40014400 	.word	0x40014400
 80042e4:	40014800 	.word	0x40014800

080042e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a18      	ldr	r2, [pc, #96]	@ (80043a8 <TIM_OC4_SetConfig+0xc0>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a17      	ldr	r2, [pc, #92]	@ (80043ac <TIM_OC4_SetConfig+0xc4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a16      	ldr	r2, [pc, #88]	@ (80043b0 <TIM_OC4_SetConfig+0xc8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <TIM_OC4_SetConfig+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_OC4_SetConfig+0x84>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <TIM_OC4_SetConfig+0xd0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d109      	bne.n	8004380 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40012c00 	.word	0x40012c00
 80043ac:	40013400 	.word	0x40013400
 80043b0:	40014000 	.word	0x40014000
 80043b4:	40014400 	.word	0x40014400
 80043b8:	40014800 	.word	0x40014800

080043bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <TIM_OC5_SetConfig+0xb4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00f      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a16      	ldr	r2, [pc, #88]	@ (8004474 <TIM_OC5_SetConfig+0xb8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00b      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <TIM_OC5_SetConfig+0xbc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <TIM_OC5_SetConfig+0xc0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_OC5_SetConfig+0x7a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <TIM_OC5_SetConfig+0xc4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d109      	bne.n	800444a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800443c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40013400 	.word	0x40013400
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800

08004484 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	051b      	lsls	r3, r3, #20
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a18      	ldr	r2, [pc, #96]	@ (800453c <TIM_OC6_SetConfig+0xb8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00f      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <TIM_OC6_SetConfig+0xbc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00b      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <TIM_OC6_SetConfig+0xc0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d007      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <TIM_OC6_SetConfig+0xc4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d003      	beq.n	8004500 <TIM_OC6_SetConfig+0x7c>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a14      	ldr	r2, [pc, #80]	@ (800454c <TIM_OC6_SetConfig+0xc8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d109      	bne.n	8004514 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004506:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	029b      	lsls	r3, r3, #10
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40013400 	.word	0x40013400
 8004544:	40014000 	.word	0x40014000
 8004548:	40014400 	.word	0x40014400
 800454c:	40014800 	.word	0x40014800

08004550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004564:	2302      	movs	r3, #2
 8004566:	e068      	b.n	800463a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2e      	ldr	r2, [pc, #184]	@ (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2d      	ldr	r2, [pc, #180]	@ (800464c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d108      	bne.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01d      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045da:	d018      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d013      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00e      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a18      	ldr	r2, [pc, #96]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a13      	ldr	r2, [pc, #76]	@ (800464c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d004      	beq.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a14      	ldr	r2, [pc, #80]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4313      	orrs	r3, r2
 800461e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40013400 	.word	0x40013400
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40014000 	.word	0x40014000

08004660 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e040      	b.n	80046f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7fc fab0 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2224      	movs	r2, #36	@ 0x24
 800468c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fe90 	bl	80053cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fbd5 	bl	8004e5c <UART_SetConfig>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e01b      	b.n	80046f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 ff0f 	bl	8005510 <UART_CheckIdleState>
 80046f2:	4603      	mov	r3, r0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	@ 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004710:	2b20      	cmp	r3, #32
 8004712:	d177      	bne.n	8004804 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_UART_Transmit+0x24>
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e070      	b.n	8004806 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2221      	movs	r2, #33	@ 0x21
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004732:	f7fc fc3f 	bl	8000fb4 <HAL_GetTick>
 8004736:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004750:	d108      	bne.n	8004764 <HAL_UART_Transmit+0x68>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	61bb      	str	r3, [r7, #24]
 8004762:	e003      	b.n	800476c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800476c:	e02f      	b.n	80047ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	2180      	movs	r1, #128	@ 0x80
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 ff71 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d004      	beq.n	800478e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e03b      	b.n	8004806 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a0:	b292      	uxth	r2, r2
 80047a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	3302      	adds	r3, #2
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e007      	b.n	80047bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3301      	adds	r3, #1
 80047ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1c9      	bne.n	800476e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2140      	movs	r1, #64	@ 0x40
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 ff3b 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e005      	b.n	8004806 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b0ba      	sub	sp, #232	@ 0xe8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004836:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800483a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800483e:	4013      	ands	r3, r2
 8004840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00f      	beq.n	8004878 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d009      	beq.n	8004878 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 82ca 	beq.w	8004e02 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
      }
      return;
 8004876:	e2c4      	b.n	8004e02 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8117 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800488e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004892:	4b85      	ldr	r3, [pc, #532]	@ (8004aa8 <HAL_UART_IRQHandler+0x298>)
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 810a 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d011      	beq.n	80048cc <HAL_UART_IRQHandler+0xbc>
 80048a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2201      	movs	r2, #1
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d011      	beq.n	80048fc <HAL_UART_IRQHandler+0xec>
 80048d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2202      	movs	r2, #2
 80048ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f2:	f043 0204 	orr.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <HAL_UART_IRQHandler+0x11c>
 8004908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00b      	beq.n	800492c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2204      	movs	r2, #4
 800491a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004922:	f043 0202 	orr.w	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d017      	beq.n	8004968 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004948:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2208      	movs	r2, #8
 8004956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800495e:	f043 0208 	orr.w	r2, r3, #8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004970:	2b00      	cmp	r3, #0
 8004972:	d012      	beq.n	800499a <HAL_UART_IRQHandler+0x18a>
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004978:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00c      	beq.n	800499a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8230 	beq.w	8004e06 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00d      	beq.n	80049ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b40      	cmp	r3, #64	@ 0x40
 80049e4:	d005      	beq.n	80049f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d04f      	beq.n	8004a92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fea1 	bl	800573a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a02:	2b40      	cmp	r3, #64	@ 0x40
 8004a04:	d141      	bne.n	8004a8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1d9      	bne.n	8004a06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d013      	beq.n	8004a82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5e:	4a13      	ldr	r2, [pc, #76]	@ (8004aac <HAL_UART_IRQHandler+0x29c>)
 8004a60:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc fc23 	bl	80012b2 <HAL_DMA_Abort_IT>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d017      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	e00f      	b.n	8004aa2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f9d4 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	e00b      	b.n	8004aa2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f9d0 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	e007      	b.n	8004aa2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f9cc 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004aa0:	e1b1      	b.n	8004e06 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa2:	bf00      	nop
    return;
 8004aa4:	e1af      	b.n	8004e06 <HAL_UART_IRQHandler+0x5f6>
 8004aa6:	bf00      	nop
 8004aa8:	04000120 	.word	0x04000120
 8004aac:	08005803 	.word	0x08005803

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	f040 816a 	bne.w	8004d8e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8163 	beq.w	8004d8e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 815c 	beq.w	8004d8e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2210      	movs	r2, #16
 8004adc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b40      	cmp	r3, #64	@ 0x40
 8004aea:	f040 80d4 	bne.w	8004c96 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004afa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80ad 	beq.w	8004c5e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	f080 80a5 	bcs.w	8004c5e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8086 	bne.w	8004c3c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	461a      	mov	r2, r3
 8004b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b5e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1da      	bne.n	8004b30 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e1      	bne.n	8004b7a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004be0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004be2:	e841 2300 	strex	r3, r2, [r1]
 8004be6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1e3      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c0c:	f023 0310 	bic.w	r3, r3, #16
 8004c10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c20:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e4      	bne.n	8004bfc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc fafd 	bl	8001236 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8f4 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004c5c:	e0d5      	b.n	8004e0a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f040 80ce 	bne.w	8004e0a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f040 80c5 	bne.w	8004e0a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8d8 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
      return;
 8004c94:	e0b9      	b.n	8004e0a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80ab 	beq.w	8004e0e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80a6 	beq.w	8004e0e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e4      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	623b      	str	r3, [r7, #32]
   return(result);
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e3      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	e841 2300 	strex	r3, r2, [r1]
 8004d72:	617b      	str	r3, [r7, #20]
   return(result);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1e4      	bne.n	8004d44 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f85c 	bl	8004e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d8c:	e03f      	b.n	8004e0e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <HAL_UART_IRQHandler+0x5a8>
 8004d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004dae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fd66 	bl	8005882 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004db6:	e02d      	b.n	8004e14 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00e      	beq.n	8004de2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01c      	beq.n	8004e12 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
    }
    return;
 8004de0:	e017      	b.n	8004e12 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d012      	beq.n	8004e14 <HAL_UART_IRQHandler+0x604>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fd17 	bl	800582e <UART_EndTransmit_IT>
    return;
 8004e00:	e008      	b.n	8004e14 <HAL_UART_IRQHandler+0x604>
      return;
 8004e02:	bf00      	nop
 8004e04:	e006      	b.n	8004e14 <HAL_UART_IRQHandler+0x604>
    return;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <HAL_UART_IRQHandler+0x604>
      return;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_UART_IRQHandler+0x604>
      return;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_UART_IRQHandler+0x604>
    return;
 8004e12:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e14:	37e8      	adds	r7, #232	@ 0xe8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b08a      	sub	sp, #40	@ 0x28
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4ba4      	ldr	r3, [pc, #656]	@ (800511c <UART_SetConfig+0x2c0>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a99      	ldr	r2, [pc, #612]	@ (8005120 <UART_SetConfig+0x2c4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a90      	ldr	r2, [pc, #576]	@ (8005124 <UART_SetConfig+0x2c8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d126      	bne.n	8004f34 <UART_SetConfig+0xd8>
 8004ee6:	4b90      	ldr	r3, [pc, #576]	@ (8005128 <UART_SetConfig+0x2cc>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d81b      	bhi.n	8004f2c <UART_SetConfig+0xd0>
 8004ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <UART_SetConfig+0xa0>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f12:	e116      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1a:	e112      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f22:	e10e      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2a:	e10a      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f32:	e106      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a7c      	ldr	r2, [pc, #496]	@ (800512c <UART_SetConfig+0x2d0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d138      	bne.n	8004fb0 <UART_SetConfig+0x154>
 8004f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005128 <UART_SetConfig+0x2cc>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d82d      	bhi.n	8004fa8 <UART_SetConfig+0x14c>
 8004f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <UART_SetConfig+0xf8>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004fa9 	.word	0x08004fa9
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004fa9 	.word	0x08004fa9
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8e:	e0d8      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f96:	e0d4      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	e0d0      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa6:	e0cc      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fae:	e0c8      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8005130 <UART_SetConfig+0x2d4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d125      	bne.n	8005006 <UART_SetConfig+0x1aa>
 8004fba:	4b5b      	ldr	r3, [pc, #364]	@ (8005128 <UART_SetConfig+0x2cc>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fc4:	2b30      	cmp	r3, #48	@ 0x30
 8004fc6:	d016      	beq.n	8004ff6 <UART_SetConfig+0x19a>
 8004fc8:	2b30      	cmp	r3, #48	@ 0x30
 8004fca:	d818      	bhi.n	8004ffe <UART_SetConfig+0x1a2>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d00a      	beq.n	8004fe6 <UART_SetConfig+0x18a>
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d814      	bhi.n	8004ffe <UART_SetConfig+0x1a2>
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <UART_SetConfig+0x182>
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d008      	beq.n	8004fee <UART_SetConfig+0x192>
 8004fdc:	e00f      	b.n	8004ffe <UART_SetConfig+0x1a2>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe4:	e0ad      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fec:	e0a9      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff4:	e0a5      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ffc:	e0a1      	b.n	8005142 <UART_SetConfig+0x2e6>
 8004ffe:	2310      	movs	r3, #16
 8005000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005004:	e09d      	b.n	8005142 <UART_SetConfig+0x2e6>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a4a      	ldr	r2, [pc, #296]	@ (8005134 <UART_SetConfig+0x2d8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d125      	bne.n	800505c <UART_SetConfig+0x200>
 8005010:	4b45      	ldr	r3, [pc, #276]	@ (8005128 <UART_SetConfig+0x2cc>)
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005016:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800501a:	2bc0      	cmp	r3, #192	@ 0xc0
 800501c:	d016      	beq.n	800504c <UART_SetConfig+0x1f0>
 800501e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005020:	d818      	bhi.n	8005054 <UART_SetConfig+0x1f8>
 8005022:	2b80      	cmp	r3, #128	@ 0x80
 8005024:	d00a      	beq.n	800503c <UART_SetConfig+0x1e0>
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d814      	bhi.n	8005054 <UART_SetConfig+0x1f8>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <UART_SetConfig+0x1d8>
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d008      	beq.n	8005044 <UART_SetConfig+0x1e8>
 8005032:	e00f      	b.n	8005054 <UART_SetConfig+0x1f8>
 8005034:	2300      	movs	r3, #0
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503a:	e082      	b.n	8005142 <UART_SetConfig+0x2e6>
 800503c:	2302      	movs	r3, #2
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005042:	e07e      	b.n	8005142 <UART_SetConfig+0x2e6>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504a:	e07a      	b.n	8005142 <UART_SetConfig+0x2e6>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005052:	e076      	b.n	8005142 <UART_SetConfig+0x2e6>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505a:	e072      	b.n	8005142 <UART_SetConfig+0x2e6>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a35      	ldr	r2, [pc, #212]	@ (8005138 <UART_SetConfig+0x2dc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d12a      	bne.n	80050bc <UART_SetConfig+0x260>
 8005066:	4b30      	ldr	r3, [pc, #192]	@ (8005128 <UART_SetConfig+0x2cc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005074:	d01a      	beq.n	80050ac <UART_SetConfig+0x250>
 8005076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800507a:	d81b      	bhi.n	80050b4 <UART_SetConfig+0x258>
 800507c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005080:	d00c      	beq.n	800509c <UART_SetConfig+0x240>
 8005082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005086:	d815      	bhi.n	80050b4 <UART_SetConfig+0x258>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <UART_SetConfig+0x238>
 800508c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005090:	d008      	beq.n	80050a4 <UART_SetConfig+0x248>
 8005092:	e00f      	b.n	80050b4 <UART_SetConfig+0x258>
 8005094:	2300      	movs	r3, #0
 8005096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509a:	e052      	b.n	8005142 <UART_SetConfig+0x2e6>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a2:	e04e      	b.n	8005142 <UART_SetConfig+0x2e6>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050aa:	e04a      	b.n	8005142 <UART_SetConfig+0x2e6>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b2:	e046      	b.n	8005142 <UART_SetConfig+0x2e6>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ba:	e042      	b.n	8005142 <UART_SetConfig+0x2e6>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a17      	ldr	r2, [pc, #92]	@ (8005120 <UART_SetConfig+0x2c4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d13a      	bne.n	800513c <UART_SetConfig+0x2e0>
 80050c6:	4b18      	ldr	r3, [pc, #96]	@ (8005128 <UART_SetConfig+0x2cc>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050d4:	d01a      	beq.n	800510c <UART_SetConfig+0x2b0>
 80050d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050da:	d81b      	bhi.n	8005114 <UART_SetConfig+0x2b8>
 80050dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e0:	d00c      	beq.n	80050fc <UART_SetConfig+0x2a0>
 80050e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050e6:	d815      	bhi.n	8005114 <UART_SetConfig+0x2b8>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <UART_SetConfig+0x298>
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f0:	d008      	beq.n	8005104 <UART_SetConfig+0x2a8>
 80050f2:	e00f      	b.n	8005114 <UART_SetConfig+0x2b8>
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fa:	e022      	b.n	8005142 <UART_SetConfig+0x2e6>
 80050fc:	2302      	movs	r3, #2
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005102:	e01e      	b.n	8005142 <UART_SetConfig+0x2e6>
 8005104:	2304      	movs	r3, #4
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510a:	e01a      	b.n	8005142 <UART_SetConfig+0x2e6>
 800510c:	2308      	movs	r3, #8
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e016      	b.n	8005142 <UART_SetConfig+0x2e6>
 8005114:	2310      	movs	r3, #16
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511a:	e012      	b.n	8005142 <UART_SetConfig+0x2e6>
 800511c:	efff69f3 	.word	0xefff69f3
 8005120:	40008000 	.word	0x40008000
 8005124:	40013800 	.word	0x40013800
 8005128:	40021000 	.word	0x40021000
 800512c:	40004400 	.word	0x40004400
 8005130:	40004800 	.word	0x40004800
 8005134:	40004c00 	.word	0x40004c00
 8005138:	40005000 	.word	0x40005000
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a9f      	ldr	r2, [pc, #636]	@ (80053c4 <UART_SetConfig+0x568>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d17a      	bne.n	8005242 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800514c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005150:	2b08      	cmp	r3, #8
 8005152:	d824      	bhi.n	800519e <UART_SetConfig+0x342>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <UART_SetConfig+0x300>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005181 	.word	0x08005181
 8005160:	0800519f 	.word	0x0800519f
 8005164:	08005189 	.word	0x08005189
 8005168:	0800519f 	.word	0x0800519f
 800516c:	0800518f 	.word	0x0800518f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	0800519f 	.word	0x0800519f
 8005178:	0800519f 	.word	0x0800519f
 800517c:	08005197 	.word	0x08005197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005180:	f7fd f88a 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8005184:	61f8      	str	r0, [r7, #28]
        break;
 8005186:	e010      	b.n	80051aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005188:	4b8f      	ldr	r3, [pc, #572]	@ (80053c8 <UART_SetConfig+0x56c>)
 800518a:	61fb      	str	r3, [r7, #28]
        break;
 800518c:	e00d      	b.n	80051aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fc ffeb 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8005192:	61f8      	str	r0, [r7, #28]
        break;
 8005194:	e009      	b.n	80051aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519a:	61fb      	str	r3, [r7, #28]
        break;
 800519c:	e005      	b.n	80051aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80fb 	beq.w	80053a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d305      	bcc.n	80051ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d903      	bls.n	80051d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051d4:	e0e8      	b.n	80053a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	2200      	movs	r2, #0
 80051da:	461c      	mov	r4, r3
 80051dc:	4615      	mov	r5, r2
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	022b      	lsls	r3, r5, #8
 80051e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051ec:	0222      	lsls	r2, r4, #8
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	6849      	ldr	r1, [r1, #4]
 80051f2:	0849      	lsrs	r1, r1, #1
 80051f4:	2000      	movs	r0, #0
 80051f6:	4688      	mov	r8, r1
 80051f8:	4681      	mov	r9, r0
 80051fa:	eb12 0a08 	adds.w	sl, r2, r8
 80051fe:	eb43 0b09 	adc.w	fp, r3, r9
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005210:	4650      	mov	r0, sl
 8005212:	4659      	mov	r1, fp
 8005214:	f7fb f82c 	bl	8000270 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005226:	d308      	bcc.n	800523a <UART_SetConfig+0x3de>
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800522e:	d204      	bcs.n	800523a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	e0b6      	b.n	80053a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005240:	e0b2      	b.n	80053a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800524a:	d15e      	bne.n	800530a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800524c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005250:	2b08      	cmp	r3, #8
 8005252:	d828      	bhi.n	80052a6 <UART_SetConfig+0x44a>
 8005254:	a201      	add	r2, pc, #4	@ (adr r2, 800525c <UART_SetConfig+0x400>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005281 	.word	0x08005281
 8005260:	08005289 	.word	0x08005289
 8005264:	08005291 	.word	0x08005291
 8005268:	080052a7 	.word	0x080052a7
 800526c:	08005297 	.word	0x08005297
 8005270:	080052a7 	.word	0x080052a7
 8005274:	080052a7 	.word	0x080052a7
 8005278:	080052a7 	.word	0x080052a7
 800527c:	0800529f 	.word	0x0800529f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005280:	f7fd f80a 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8005284:	61f8      	str	r0, [r7, #28]
        break;
 8005286:	e014      	b.n	80052b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005288:	f7fd f81c 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 800528c:	61f8      	str	r0, [r7, #28]
        break;
 800528e:	e010      	b.n	80052b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005290:	4b4d      	ldr	r3, [pc, #308]	@ (80053c8 <UART_SetConfig+0x56c>)
 8005292:	61fb      	str	r3, [r7, #28]
        break;
 8005294:	e00d      	b.n	80052b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005296:	f7fc ff67 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 800529a:	61f8      	str	r0, [r7, #28]
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052a2:	61fb      	str	r3, [r7, #28]
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d077      	beq.n	80053a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	005a      	lsls	r2, r3, #1
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	085b      	lsrs	r3, r3, #1
 80052c2:	441a      	add	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b0f      	cmp	r3, #15
 80052d2:	d916      	bls.n	8005302 <UART_SetConfig+0x4a6>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052da:	d212      	bcs.n	8005302 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f023 030f 	bic.w	r3, r3, #15
 80052e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	8afb      	ldrh	r3, [r7, #22]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	8afa      	ldrh	r2, [r7, #22]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e052      	b.n	80053a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005308:	e04e      	b.n	80053a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800530e:	2b08      	cmp	r3, #8
 8005310:	d827      	bhi.n	8005362 <UART_SetConfig+0x506>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <UART_SetConfig+0x4bc>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005345 	.word	0x08005345
 8005320:	0800534d 	.word	0x0800534d
 8005324:	08005363 	.word	0x08005363
 8005328:	08005353 	.word	0x08005353
 800532c:	08005363 	.word	0x08005363
 8005330:	08005363 	.word	0x08005363
 8005334:	08005363 	.word	0x08005363
 8005338:	0800535b 	.word	0x0800535b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800533c:	f7fc ffac 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8005340:	61f8      	str	r0, [r7, #28]
        break;
 8005342:	e014      	b.n	800536e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fc ffbe 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8005348:	61f8      	str	r0, [r7, #28]
        break;
 800534a:	e010      	b.n	800536e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b1e      	ldr	r3, [pc, #120]	@ (80053c8 <UART_SetConfig+0x56c>)
 800534e:	61fb      	str	r3, [r7, #28]
        break;
 8005350:	e00d      	b.n	800536e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fc ff09 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8005356:	61f8      	str	r0, [r7, #28]
        break;
 8005358:	e009      	b.n	800536e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800535e:	61fb      	str	r3, [r7, #28]
        break;
 8005360:	e005      	b.n	800536e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800536c:	bf00      	nop
    }

    if (pclk != 0U)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d019      	beq.n	80053a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	085a      	lsrs	r2, r3, #1
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	441a      	add	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	2b0f      	cmp	r3, #15
 800538c:	d909      	bls.n	80053a2 <UART_SetConfig+0x546>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005394:	d205      	bcs.n	80053a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60da      	str	r2, [r3, #12]
 80053a0:	e002      	b.n	80053a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053b4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3728      	adds	r7, #40	@ 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c2:	bf00      	nop
 80053c4:	40008000 	.word	0x40008000
 80053c8:	00f42400 	.word	0x00f42400

080053cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ca:	d10a      	bne.n	80054e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b098      	sub	sp, #96	@ 0x60
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005520:	f7fb fd48 	bl	8000fb4 <HAL_GetTick>
 8005524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d12e      	bne.n	8005592 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f88c 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d021      	beq.n	8005592 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005562:	653b      	str	r3, [r7, #80]	@ 0x50
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556c:	647b      	str	r3, [r7, #68]	@ 0x44
 800556e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800557a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e6      	bne.n	800554e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e062      	b.n	8005658 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d149      	bne.n	8005634 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a8:	2200      	movs	r2, #0
 80055aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f856 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03c      	beq.n	8005634 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	623b      	str	r3, [r7, #32]
   return(result);
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	e853 3f00 	ldrex	r3, [r3]
 80055fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800560c:	61fa      	str	r2, [r7, #28]
 800560e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005610:	69b9      	ldr	r1, [r7, #24]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	e841 2300 	strex	r3, r2, [r1]
 8005618:	617b      	str	r3, [r7, #20]
   return(result);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1e5      	bne.n	80055ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e011      	b.n	8005658 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3758      	adds	r7, #88	@ 0x58
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005670:	e04f      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d04b      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800567a:	f7fb fc9b 	bl	8000fb4 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	429a      	cmp	r2, r3
 8005688:	d302      	bcc.n	8005690 <UART_WaitOnFlagUntilTimeout+0x30>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e04e      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d037      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b80      	cmp	r3, #128	@ 0x80
 80056a6:	d034      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b40      	cmp	r3, #64	@ 0x40
 80056ac:	d031      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	f003 0308 	and.w	r3, r3, #8
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d110      	bne.n	80056de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2208      	movs	r2, #8
 80056c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f838 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2208      	movs	r2, #8
 80056ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e029      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ec:	d111      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f81e 	bl	800573a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	4013      	ands	r3, r2
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	bf0c      	ite	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	2300      	movne	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	461a      	mov	r2, r3
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	429a      	cmp	r2, r3
 800572e:	d0a0      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800573a:	b480      	push	{r7}
 800573c:	b095      	sub	sp, #84	@ 0x54
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005760:	643b      	str	r3, [r7, #64]	@ 0x40
 8005762:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800576e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e6      	bne.n	8005742 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	61fb      	str	r3, [r7, #28]
   return(result);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d118      	bne.n	80057e2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6979      	ldr	r1, [r7, #20]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	613b      	str	r3, [r7, #16]
   return(result);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e6      	bne.n	80057b0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057f6:	bf00      	nop
 80057f8:	3754      	adds	r7, #84	@ 0x54
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff fb05 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60bb      	str	r3, [r7, #8]
   return(result);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff fad1 	bl	8004e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587a:	bf00      	nop
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <std>:
 8005898:	2300      	movs	r3, #0
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	e9c0 3300 	strd	r3, r3, [r0]
 80058a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	8181      	strh	r1, [r0, #12]
 80058aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80058ac:	81c2      	strh	r2, [r0, #14]
 80058ae:	6183      	str	r3, [r0, #24]
 80058b0:	4619      	mov	r1, r3
 80058b2:	2208      	movs	r2, #8
 80058b4:	305c      	adds	r0, #92	@ 0x5c
 80058b6:	f000 f9f9 	bl	8005cac <memset>
 80058ba:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <std+0x58>)
 80058bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <std+0x5c>)
 80058c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x60>)
 80058c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058c6:	4b0d      	ldr	r3, [pc, #52]	@ (80058fc <std+0x64>)
 80058c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <std+0x68>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d006      	beq.n	80058e0 <std+0x48>
 80058d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058d6:	4294      	cmp	r4, r2
 80058d8:	d002      	beq.n	80058e0 <std+0x48>
 80058da:	33d0      	adds	r3, #208	@ 0xd0
 80058dc:	429c      	cmp	r4, r3
 80058de:	d105      	bne.n	80058ec <std+0x54>
 80058e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 ba58 	b.w	8005d9c <__retarget_lock_init_recursive>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	08005afd 	.word	0x08005afd
 80058f4:	08005b1f 	.word	0x08005b1f
 80058f8:	08005b57 	.word	0x08005b57
 80058fc:	08005b7b 	.word	0x08005b7b
 8005900:	200001c4 	.word	0x200001c4

08005904 <stdio_exit_handler>:
 8005904:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <stdio_exit_handler+0xc>)
 8005906:	4903      	ldr	r1, [pc, #12]	@ (8005914 <stdio_exit_handler+0x10>)
 8005908:	4803      	ldr	r0, [pc, #12]	@ (8005918 <stdio_exit_handler+0x14>)
 800590a:	f000 b869 	b.w	80059e0 <_fwalk_sglue>
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c
 8005914:	0800663d 	.word	0x0800663d
 8005918:	2000001c 	.word	0x2000001c

0800591c <cleanup_stdio>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <cleanup_stdio+0x34>)
 8005920:	4299      	cmp	r1, r3
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	d001      	beq.n	800592c <cleanup_stdio+0x10>
 8005928:	f000 fe88 	bl	800663c <_fflush_r>
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <cleanup_stdio+0x38>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <cleanup_stdio+0x1e>
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fe81 	bl	800663c <_fflush_r>
 800593a:	68e1      	ldr	r1, [r4, #12]
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <cleanup_stdio+0x3c>)
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <cleanup_stdio+0x30>
 8005942:	4620      	mov	r0, r4
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f000 be78 	b.w	800663c <_fflush_r>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	200001c4 	.word	0x200001c4
 8005954:	2000022c 	.word	0x2000022c
 8005958:	20000294 	.word	0x20000294

0800595c <global_stdio_init.part.0>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <global_stdio_init.part.0+0x30>)
 8005960:	4c0b      	ldr	r4, [pc, #44]	@ (8005990 <global_stdio_init.part.0+0x34>)
 8005962:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <global_stdio_init.part.0+0x38>)
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	f7ff ff94 	bl	8005898 <std>
 8005970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005974:	2201      	movs	r2, #1
 8005976:	2109      	movs	r1, #9
 8005978:	f7ff ff8e 	bl	8005898 <std>
 800597c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005980:	2202      	movs	r2, #2
 8005982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005986:	2112      	movs	r1, #18
 8005988:	f7ff bf86 	b.w	8005898 <std>
 800598c:	200002fc 	.word	0x200002fc
 8005990:	200001c4 	.word	0x200001c4
 8005994:	08005905 	.word	0x08005905

08005998 <__sfp_lock_acquire>:
 8005998:	4801      	ldr	r0, [pc, #4]	@ (80059a0 <__sfp_lock_acquire+0x8>)
 800599a:	f000 ba00 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	20000305 	.word	0x20000305

080059a4 <__sfp_lock_release>:
 80059a4:	4801      	ldr	r0, [pc, #4]	@ (80059ac <__sfp_lock_release+0x8>)
 80059a6:	f000 b9fb 	b.w	8005da0 <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	20000305 	.word	0x20000305

080059b0 <__sinit>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7ff fff0 	bl	8005998 <__sfp_lock_acquire>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b11b      	cbz	r3, 80059c4 <__sinit+0x14>
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f7ff bff0 	b.w	80059a4 <__sfp_lock_release>
 80059c4:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <__sinit+0x28>)
 80059c6:	6223      	str	r3, [r4, #32]
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <__sinit+0x2c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f5      	bne.n	80059bc <__sinit+0xc>
 80059d0:	f7ff ffc4 	bl	800595c <global_stdio_init.part.0>
 80059d4:	e7f2      	b.n	80059bc <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	0800591d 	.word	0x0800591d
 80059dc:	200002fc 	.word	0x200002fc

080059e0 <_fwalk_sglue>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f0:	f1b9 0901 	subs.w	r9, r9, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk_sglue+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk_sglue+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_sglue+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_sglue+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c0      	blx	r8
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	@ 0x68
 8005a1a:	e7e9      	b.n	80059f0 <_fwalk_sglue+0x10>

08005a1c <iprintf>:
 8005a1c:	b40f      	push	{r0, r1, r2, r3}
 8005a1e:	b507      	push	{r0, r1, r2, lr}
 8005a20:	4906      	ldr	r1, [pc, #24]	@ (8005a3c <iprintf+0x20>)
 8005a22:	ab04      	add	r3, sp, #16
 8005a24:	6808      	ldr	r0, [r1, #0]
 8005a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2a:	6881      	ldr	r1, [r0, #8]
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	f000 fadb 	bl	8005fe8 <_vfiprintf_r>
 8005a32:	b003      	add	sp, #12
 8005a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a38:	b004      	add	sp, #16
 8005a3a:	4770      	bx	lr
 8005a3c:	20000018 	.word	0x20000018

08005a40 <_puts_r>:
 8005a40:	6a03      	ldr	r3, [r0, #32]
 8005a42:	b570      	push	{r4, r5, r6, lr}
 8005a44:	6884      	ldr	r4, [r0, #8]
 8005a46:	4605      	mov	r5, r0
 8005a48:	460e      	mov	r6, r1
 8005a4a:	b90b      	cbnz	r3, 8005a50 <_puts_r+0x10>
 8005a4c:	f7ff ffb0 	bl	80059b0 <__sinit>
 8005a50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a52:	07db      	lsls	r3, r3, #31
 8005a54:	d405      	bmi.n	8005a62 <_puts_r+0x22>
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	0598      	lsls	r0, r3, #22
 8005a5a:	d402      	bmi.n	8005a62 <_puts_r+0x22>
 8005a5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a5e:	f000 f99e 	bl	8005d9e <__retarget_lock_acquire_recursive>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	0719      	lsls	r1, r3, #28
 8005a66:	d502      	bpl.n	8005a6e <_puts_r+0x2e>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d135      	bne.n	8005ada <_puts_r+0x9a>
 8005a6e:	4621      	mov	r1, r4
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 f8c5 	bl	8005c00 <__swsetup_r>
 8005a76:	b380      	cbz	r0, 8005ada <_puts_r+0x9a>
 8005a78:	f04f 35ff 	mov.w	r5, #4294967295
 8005a7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a7e:	07da      	lsls	r2, r3, #31
 8005a80:	d405      	bmi.n	8005a8e <_puts_r+0x4e>
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	059b      	lsls	r3, r3, #22
 8005a86:	d402      	bmi.n	8005a8e <_puts_r+0x4e>
 8005a88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a8a:	f000 f989 	bl	8005da0 <__retarget_lock_release_recursive>
 8005a8e:	4628      	mov	r0, r5
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	da04      	bge.n	8005aa0 <_puts_r+0x60>
 8005a96:	69a2      	ldr	r2, [r4, #24]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	dc17      	bgt.n	8005acc <_puts_r+0x8c>
 8005a9c:	290a      	cmp	r1, #10
 8005a9e:	d015      	beq.n	8005acc <_puts_r+0x8c>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	7019      	strb	r1, [r3, #0]
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	60a3      	str	r3, [r4, #8]
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d1ed      	bne.n	8005a92 <_puts_r+0x52>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da11      	bge.n	8005ade <_puts_r+0x9e>
 8005aba:	4622      	mov	r2, r4
 8005abc:	210a      	movs	r1, #10
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f85f 	bl	8005b82 <__swbuf_r>
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0d7      	beq.n	8005a78 <_puts_r+0x38>
 8005ac8:	250a      	movs	r5, #10
 8005aca:	e7d7      	b.n	8005a7c <_puts_r+0x3c>
 8005acc:	4622      	mov	r2, r4
 8005ace:	4628      	mov	r0, r5
 8005ad0:	f000 f857 	bl	8005b82 <__swbuf_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d1e7      	bne.n	8005aa8 <_puts_r+0x68>
 8005ad8:	e7ce      	b.n	8005a78 <_puts_r+0x38>
 8005ada:	3e01      	subs	r6, #1
 8005adc:	e7e4      	b.n	8005aa8 <_puts_r+0x68>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	220a      	movs	r2, #10
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e7ee      	b.n	8005ac8 <_puts_r+0x88>
	...

08005aec <puts>:
 8005aec:	4b02      	ldr	r3, [pc, #8]	@ (8005af8 <puts+0xc>)
 8005aee:	4601      	mov	r1, r0
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	f7ff bfa5 	b.w	8005a40 <_puts_r>
 8005af6:	bf00      	nop
 8005af8:	20000018 	.word	0x20000018

08005afc <__sread>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	460c      	mov	r4, r1
 8005b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b04:	f000 f8fc 	bl	8005d00 <_read_r>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	bfab      	itete	ge
 8005b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b10:	181b      	addge	r3, r3, r0
 8005b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b16:	bfac      	ite	ge
 8005b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b1a:	81a3      	strhlt	r3, [r4, #12]
 8005b1c:	bd10      	pop	{r4, pc}

08005b1e <__swrite>:
 8005b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b22:	461f      	mov	r7, r3
 8005b24:	898b      	ldrh	r3, [r1, #12]
 8005b26:	05db      	lsls	r3, r3, #23
 8005b28:	4605      	mov	r5, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	d505      	bpl.n	8005b3c <__swrite+0x1e>
 8005b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b34:	2302      	movs	r3, #2
 8005b36:	2200      	movs	r2, #0
 8005b38:	f000 f8d0 	bl	8005cdc <_lseek_r>
 8005b3c:	89a3      	ldrh	r3, [r4, #12]
 8005b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	f000 b8e7 	b.w	8005d24 <_write_r>

08005b56 <__sseek>:
 8005b56:	b510      	push	{r4, lr}
 8005b58:	460c      	mov	r4, r1
 8005b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5e:	f000 f8bd 	bl	8005cdc <_lseek_r>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	bf15      	itete	ne
 8005b68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b72:	81a3      	strheq	r3, [r4, #12]
 8005b74:	bf18      	it	ne
 8005b76:	81a3      	strhne	r3, [r4, #12]
 8005b78:	bd10      	pop	{r4, pc}

08005b7a <__sclose>:
 8005b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7e:	f000 b89d 	b.w	8005cbc <_close_r>

08005b82 <__swbuf_r>:
 8005b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b84:	460e      	mov	r6, r1
 8005b86:	4614      	mov	r4, r2
 8005b88:	4605      	mov	r5, r0
 8005b8a:	b118      	cbz	r0, 8005b94 <__swbuf_r+0x12>
 8005b8c:	6a03      	ldr	r3, [r0, #32]
 8005b8e:	b90b      	cbnz	r3, 8005b94 <__swbuf_r+0x12>
 8005b90:	f7ff ff0e 	bl	80059b0 <__sinit>
 8005b94:	69a3      	ldr	r3, [r4, #24]
 8005b96:	60a3      	str	r3, [r4, #8]
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	071a      	lsls	r2, r3, #28
 8005b9c:	d501      	bpl.n	8005ba2 <__swbuf_r+0x20>
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	b943      	cbnz	r3, 8005bb4 <__swbuf_r+0x32>
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	f000 f82b 	bl	8005c00 <__swsetup_r>
 8005baa:	b118      	cbz	r0, 8005bb4 <__swbuf_r+0x32>
 8005bac:	f04f 37ff 	mov.w	r7, #4294967295
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	6922      	ldr	r2, [r4, #16]
 8005bb8:	1a98      	subs	r0, r3, r2
 8005bba:	6963      	ldr	r3, [r4, #20]
 8005bbc:	b2f6      	uxtb	r6, r6
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	4637      	mov	r7, r6
 8005bc2:	dc05      	bgt.n	8005bd0 <__swbuf_r+0x4e>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 fd38 	bl	800663c <_fflush_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1ed      	bne.n	8005bac <__swbuf_r+0x2a>
 8005bd0:	68a3      	ldr	r3, [r4, #8]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	60a3      	str	r3, [r4, #8]
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	6022      	str	r2, [r4, #0]
 8005bdc:	701e      	strb	r6, [r3, #0]
 8005bde:	6962      	ldr	r2, [r4, #20]
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d004      	beq.n	8005bf0 <__swbuf_r+0x6e>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	07db      	lsls	r3, r3, #31
 8005bea:	d5e1      	bpl.n	8005bb0 <__swbuf_r+0x2e>
 8005bec:	2e0a      	cmp	r6, #10
 8005bee:	d1df      	bne.n	8005bb0 <__swbuf_r+0x2e>
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 fd22 	bl	800663c <_fflush_r>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d0d9      	beq.n	8005bb0 <__swbuf_r+0x2e>
 8005bfc:	e7d6      	b.n	8005bac <__swbuf_r+0x2a>
	...

08005c00 <__swsetup_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4b29      	ldr	r3, [pc, #164]	@ (8005ca8 <__swsetup_r+0xa8>)
 8005c04:	4605      	mov	r5, r0
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	460c      	mov	r4, r1
 8005c0a:	b118      	cbz	r0, 8005c14 <__swsetup_r+0x14>
 8005c0c:	6a03      	ldr	r3, [r0, #32]
 8005c0e:	b90b      	cbnz	r3, 8005c14 <__swsetup_r+0x14>
 8005c10:	f7ff fece 	bl	80059b0 <__sinit>
 8005c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c18:	0719      	lsls	r1, r3, #28
 8005c1a:	d422      	bmi.n	8005c62 <__swsetup_r+0x62>
 8005c1c:	06da      	lsls	r2, r3, #27
 8005c1e:	d407      	bmi.n	8005c30 <__swsetup_r+0x30>
 8005c20:	2209      	movs	r2, #9
 8005c22:	602a      	str	r2, [r5, #0]
 8005c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c28:	81a3      	strh	r3, [r4, #12]
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	e033      	b.n	8005c98 <__swsetup_r+0x98>
 8005c30:	0758      	lsls	r0, r3, #29
 8005c32:	d512      	bpl.n	8005c5a <__swsetup_r+0x5a>
 8005c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c36:	b141      	cbz	r1, 8005c4a <__swsetup_r+0x4a>
 8005c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	d002      	beq.n	8005c46 <__swsetup_r+0x46>
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 f8af 	bl	8005da4 <_free_r>
 8005c46:	2300      	movs	r3, #0
 8005c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	2300      	movs	r3, #0
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	6923      	ldr	r3, [r4, #16]
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	89a3      	ldrh	r3, [r4, #12]
 8005c5c:	f043 0308 	orr.w	r3, r3, #8
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	b94b      	cbnz	r3, 8005c7a <__swsetup_r+0x7a>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c70:	d003      	beq.n	8005c7a <__swsetup_r+0x7a>
 8005c72:	4621      	mov	r1, r4
 8005c74:	4628      	mov	r0, r5
 8005c76:	f000 fd2f 	bl	80066d8 <__smakebuf_r>
 8005c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c7e:	f013 0201 	ands.w	r2, r3, #1
 8005c82:	d00a      	beq.n	8005c9a <__swsetup_r+0x9a>
 8005c84:	2200      	movs	r2, #0
 8005c86:	60a2      	str	r2, [r4, #8]
 8005c88:	6962      	ldr	r2, [r4, #20]
 8005c8a:	4252      	negs	r2, r2
 8005c8c:	61a2      	str	r2, [r4, #24]
 8005c8e:	6922      	ldr	r2, [r4, #16]
 8005c90:	b942      	cbnz	r2, 8005ca4 <__swsetup_r+0xa4>
 8005c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005c96:	d1c5      	bne.n	8005c24 <__swsetup_r+0x24>
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	0799      	lsls	r1, r3, #30
 8005c9c:	bf58      	it	pl
 8005c9e:	6962      	ldrpl	r2, [r4, #20]
 8005ca0:	60a2      	str	r2, [r4, #8]
 8005ca2:	e7f4      	b.n	8005c8e <__swsetup_r+0x8e>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e7f7      	b.n	8005c98 <__swsetup_r+0x98>
 8005ca8:	20000018 	.word	0x20000018

08005cac <memset>:
 8005cac:	4402      	add	r2, r0
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d100      	bne.n	8005cb6 <memset+0xa>
 8005cb4:	4770      	bx	lr
 8005cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cba:	e7f9      	b.n	8005cb0 <memset+0x4>

08005cbc <_close_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_close_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fb f865 	bl	8000d96 <_close>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_close_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_close_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	20000300 	.word	0x20000300

08005cdc <_lseek_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4d07      	ldr	r5, [pc, #28]	@ (8005cfc <_lseek_r+0x20>)
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	602a      	str	r2, [r5, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	f7fb f87a 	bl	8000de4 <_lseek>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_lseek_r+0x1e>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_lseek_r+0x1e>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	20000300 	.word	0x20000300

08005d00 <_read_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	@ (8005d20 <_read_r+0x20>)
 8005d04:	4604      	mov	r4, r0
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	602a      	str	r2, [r5, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	f7fb f808 	bl	8000d24 <_read>
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	d102      	bne.n	8005d1e <_read_r+0x1e>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	b103      	cbz	r3, 8005d1e <_read_r+0x1e>
 8005d1c:	6023      	str	r3, [r4, #0]
 8005d1e:	bd38      	pop	{r3, r4, r5, pc}
 8005d20:	20000300 	.word	0x20000300

08005d24 <_write_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d07      	ldr	r5, [pc, #28]	@ (8005d44 <_write_r+0x20>)
 8005d28:	4604      	mov	r4, r0
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	2200      	movs	r2, #0
 8005d30:	602a      	str	r2, [r5, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f7fb f813 	bl	8000d5e <_write>
 8005d38:	1c43      	adds	r3, r0, #1
 8005d3a:	d102      	bne.n	8005d42 <_write_r+0x1e>
 8005d3c:	682b      	ldr	r3, [r5, #0]
 8005d3e:	b103      	cbz	r3, 8005d42 <_write_r+0x1e>
 8005d40:	6023      	str	r3, [r4, #0]
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	20000300 	.word	0x20000300

08005d48 <__errno>:
 8005d48:	4b01      	ldr	r3, [pc, #4]	@ (8005d50 <__errno+0x8>)
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20000018 	.word	0x20000018

08005d54 <__libc_init_array>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	4d0d      	ldr	r5, [pc, #52]	@ (8005d8c <__libc_init_array+0x38>)
 8005d58:	4c0d      	ldr	r4, [pc, #52]	@ (8005d90 <__libc_init_array+0x3c>)
 8005d5a:	1b64      	subs	r4, r4, r5
 8005d5c:	10a4      	asrs	r4, r4, #2
 8005d5e:	2600      	movs	r6, #0
 8005d60:	42a6      	cmp	r6, r4
 8005d62:	d109      	bne.n	8005d78 <__libc_init_array+0x24>
 8005d64:	4d0b      	ldr	r5, [pc, #44]	@ (8005d94 <__libc_init_array+0x40>)
 8005d66:	4c0c      	ldr	r4, [pc, #48]	@ (8005d98 <__libc_init_array+0x44>)
 8005d68:	f000 fd24 	bl	80067b4 <_init>
 8005d6c:	1b64      	subs	r4, r4, r5
 8005d6e:	10a4      	asrs	r4, r4, #2
 8005d70:	2600      	movs	r6, #0
 8005d72:	42a6      	cmp	r6, r4
 8005d74:	d105      	bne.n	8005d82 <__libc_init_array+0x2e>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7c:	4798      	blx	r3
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7ee      	b.n	8005d60 <__libc_init_array+0xc>
 8005d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d86:	4798      	blx	r3
 8005d88:	3601      	adds	r6, #1
 8005d8a:	e7f2      	b.n	8005d72 <__libc_init_array+0x1e>
 8005d8c:	080068d8 	.word	0x080068d8
 8005d90:	080068d8 	.word	0x080068d8
 8005d94:	080068d8 	.word	0x080068d8
 8005d98:	080068dc 	.word	0x080068dc

08005d9c <__retarget_lock_init_recursive>:
 8005d9c:	4770      	bx	lr

08005d9e <__retarget_lock_acquire_recursive>:
 8005d9e:	4770      	bx	lr

08005da0 <__retarget_lock_release_recursive>:
 8005da0:	4770      	bx	lr
	...

08005da4 <_free_r>:
 8005da4:	b538      	push	{r3, r4, r5, lr}
 8005da6:	4605      	mov	r5, r0
 8005da8:	2900      	cmp	r1, #0
 8005daa:	d041      	beq.n	8005e30 <_free_r+0x8c>
 8005dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db0:	1f0c      	subs	r4, r1, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bfb8      	it	lt
 8005db6:	18e4      	addlt	r4, r4, r3
 8005db8:	f000 f8e0 	bl	8005f7c <__malloc_lock>
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e34 <_free_r+0x90>)
 8005dbe:	6813      	ldr	r3, [r2, #0]
 8005dc0:	b933      	cbnz	r3, 8005dd0 <_free_r+0x2c>
 8005dc2:	6063      	str	r3, [r4, #4]
 8005dc4:	6014      	str	r4, [r2, #0]
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dcc:	f000 b8dc 	b.w	8005f88 <__malloc_unlock>
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	d908      	bls.n	8005de6 <_free_r+0x42>
 8005dd4:	6820      	ldr	r0, [r4, #0]
 8005dd6:	1821      	adds	r1, r4, r0
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	bf01      	itttt	eq
 8005ddc:	6819      	ldreq	r1, [r3, #0]
 8005dde:	685b      	ldreq	r3, [r3, #4]
 8005de0:	1809      	addeq	r1, r1, r0
 8005de2:	6021      	streq	r1, [r4, #0]
 8005de4:	e7ed      	b.n	8005dc2 <_free_r+0x1e>
 8005de6:	461a      	mov	r2, r3
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	b10b      	cbz	r3, 8005df0 <_free_r+0x4c>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d9fa      	bls.n	8005de6 <_free_r+0x42>
 8005df0:	6811      	ldr	r1, [r2, #0]
 8005df2:	1850      	adds	r0, r2, r1
 8005df4:	42a0      	cmp	r0, r4
 8005df6:	d10b      	bne.n	8005e10 <_free_r+0x6c>
 8005df8:	6820      	ldr	r0, [r4, #0]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	1850      	adds	r0, r2, r1
 8005dfe:	4283      	cmp	r3, r0
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	d1e0      	bne.n	8005dc6 <_free_r+0x22>
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	6053      	str	r3, [r2, #4]
 8005e0a:	4408      	add	r0, r1
 8005e0c:	6010      	str	r0, [r2, #0]
 8005e0e:	e7da      	b.n	8005dc6 <_free_r+0x22>
 8005e10:	d902      	bls.n	8005e18 <_free_r+0x74>
 8005e12:	230c      	movs	r3, #12
 8005e14:	602b      	str	r3, [r5, #0]
 8005e16:	e7d6      	b.n	8005dc6 <_free_r+0x22>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf04      	itt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	bf04      	itt	eq
 8005e28:	1809      	addeq	r1, r1, r0
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	6054      	str	r4, [r2, #4]
 8005e2e:	e7ca      	b.n	8005dc6 <_free_r+0x22>
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	2000030c 	.word	0x2000030c

08005e38 <sbrk_aligned>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e78 <sbrk_aligned+0x40>)
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	6831      	ldr	r1, [r6, #0]
 8005e40:	4605      	mov	r5, r0
 8005e42:	b911      	cbnz	r1, 8005e4a <sbrk_aligned+0x12>
 8005e44:	f000 fca6 	bl	8006794 <_sbrk_r>
 8005e48:	6030      	str	r0, [r6, #0]
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 fca1 	bl	8006794 <_sbrk_r>
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d103      	bne.n	8005e5e <sbrk_aligned+0x26>
 8005e56:	f04f 34ff 	mov.w	r4, #4294967295
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	bd70      	pop	{r4, r5, r6, pc}
 8005e5e:	1cc4      	adds	r4, r0, #3
 8005e60:	f024 0403 	bic.w	r4, r4, #3
 8005e64:	42a0      	cmp	r0, r4
 8005e66:	d0f8      	beq.n	8005e5a <sbrk_aligned+0x22>
 8005e68:	1a21      	subs	r1, r4, r0
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fc92 	bl	8006794 <_sbrk_r>
 8005e70:	3001      	adds	r0, #1
 8005e72:	d1f2      	bne.n	8005e5a <sbrk_aligned+0x22>
 8005e74:	e7ef      	b.n	8005e56 <sbrk_aligned+0x1e>
 8005e76:	bf00      	nop
 8005e78:	20000308 	.word	0x20000308

08005e7c <_malloc_r>:
 8005e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e80:	1ccd      	adds	r5, r1, #3
 8005e82:	f025 0503 	bic.w	r5, r5, #3
 8005e86:	3508      	adds	r5, #8
 8005e88:	2d0c      	cmp	r5, #12
 8005e8a:	bf38      	it	cc
 8005e8c:	250c      	movcc	r5, #12
 8005e8e:	2d00      	cmp	r5, #0
 8005e90:	4606      	mov	r6, r0
 8005e92:	db01      	blt.n	8005e98 <_malloc_r+0x1c>
 8005e94:	42a9      	cmp	r1, r5
 8005e96:	d904      	bls.n	8005ea2 <_malloc_r+0x26>
 8005e98:	230c      	movs	r3, #12
 8005e9a:	6033      	str	r3, [r6, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f78 <_malloc_r+0xfc>
 8005ea6:	f000 f869 	bl	8005f7c <__malloc_lock>
 8005eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8005eae:	461c      	mov	r4, r3
 8005eb0:	bb44      	cbnz	r4, 8005f04 <_malloc_r+0x88>
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff ffbf 	bl	8005e38 <sbrk_aligned>
 8005eba:	1c43      	adds	r3, r0, #1
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	d158      	bne.n	8005f72 <_malloc_r+0xf6>
 8005ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ec4:	4627      	mov	r7, r4
 8005ec6:	2f00      	cmp	r7, #0
 8005ec8:	d143      	bne.n	8005f52 <_malloc_r+0xd6>
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	d04b      	beq.n	8005f66 <_malloc_r+0xea>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	eb04 0903 	add.w	r9, r4, r3
 8005ed8:	f000 fc5c 	bl	8006794 <_sbrk_r>
 8005edc:	4581      	cmp	r9, r0
 8005ede:	d142      	bne.n	8005f66 <_malloc_r+0xea>
 8005ee0:	6821      	ldr	r1, [r4, #0]
 8005ee2:	1a6d      	subs	r5, r5, r1
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff ffa6 	bl	8005e38 <sbrk_aligned>
 8005eec:	3001      	adds	r0, #1
 8005eee:	d03a      	beq.n	8005f66 <_malloc_r+0xea>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	442b      	add	r3, r5
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	bb62      	cbnz	r2, 8005f58 <_malloc_r+0xdc>
 8005efe:	f8c8 7000 	str.w	r7, [r8]
 8005f02:	e00f      	b.n	8005f24 <_malloc_r+0xa8>
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	1b52      	subs	r2, r2, r5
 8005f08:	d420      	bmi.n	8005f4c <_malloc_r+0xd0>
 8005f0a:	2a0b      	cmp	r2, #11
 8005f0c:	d917      	bls.n	8005f3e <_malloc_r+0xc2>
 8005f0e:	1961      	adds	r1, r4, r5
 8005f10:	42a3      	cmp	r3, r4
 8005f12:	6025      	str	r5, [r4, #0]
 8005f14:	bf18      	it	ne
 8005f16:	6059      	strne	r1, [r3, #4]
 8005f18:	6863      	ldr	r3, [r4, #4]
 8005f1a:	bf08      	it	eq
 8005f1c:	f8c8 1000 	streq.w	r1, [r8]
 8005f20:	5162      	str	r2, [r4, r5]
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f82f 	bl	8005f88 <__malloc_unlock>
 8005f2a:	f104 000b 	add.w	r0, r4, #11
 8005f2e:	1d23      	adds	r3, r4, #4
 8005f30:	f020 0007 	bic.w	r0, r0, #7
 8005f34:	1ac2      	subs	r2, r0, r3
 8005f36:	bf1c      	itt	ne
 8005f38:	1a1b      	subne	r3, r3, r0
 8005f3a:	50a3      	strne	r3, [r4, r2]
 8005f3c:	e7af      	b.n	8005e9e <_malloc_r+0x22>
 8005f3e:	6862      	ldr	r2, [r4, #4]
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	bf0c      	ite	eq
 8005f44:	f8c8 2000 	streq.w	r2, [r8]
 8005f48:	605a      	strne	r2, [r3, #4]
 8005f4a:	e7eb      	b.n	8005f24 <_malloc_r+0xa8>
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	6864      	ldr	r4, [r4, #4]
 8005f50:	e7ae      	b.n	8005eb0 <_malloc_r+0x34>
 8005f52:	463c      	mov	r4, r7
 8005f54:	687f      	ldr	r7, [r7, #4]
 8005f56:	e7b6      	b.n	8005ec6 <_malloc_r+0x4a>
 8005f58:	461a      	mov	r2, r3
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	d1fb      	bne.n	8005f58 <_malloc_r+0xdc>
 8005f60:	2300      	movs	r3, #0
 8005f62:	6053      	str	r3, [r2, #4]
 8005f64:	e7de      	b.n	8005f24 <_malloc_r+0xa8>
 8005f66:	230c      	movs	r3, #12
 8005f68:	6033      	str	r3, [r6, #0]
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f000 f80c 	bl	8005f88 <__malloc_unlock>
 8005f70:	e794      	b.n	8005e9c <_malloc_r+0x20>
 8005f72:	6005      	str	r5, [r0, #0]
 8005f74:	e7d6      	b.n	8005f24 <_malloc_r+0xa8>
 8005f76:	bf00      	nop
 8005f78:	2000030c 	.word	0x2000030c

08005f7c <__malloc_lock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	@ (8005f84 <__malloc_lock+0x8>)
 8005f7e:	f7ff bf0e 	b.w	8005d9e <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000304 	.word	0x20000304

08005f88 <__malloc_unlock>:
 8005f88:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <__malloc_unlock+0x8>)
 8005f8a:	f7ff bf09 	b.w	8005da0 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000304 	.word	0x20000304

08005f94 <__sfputc_r>:
 8005f94:	6893      	ldr	r3, [r2, #8]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	b410      	push	{r4}
 8005f9c:	6093      	str	r3, [r2, #8]
 8005f9e:	da08      	bge.n	8005fb2 <__sfputc_r+0x1e>
 8005fa0:	6994      	ldr	r4, [r2, #24]
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	db01      	blt.n	8005faa <__sfputc_r+0x16>
 8005fa6:	290a      	cmp	r1, #10
 8005fa8:	d103      	bne.n	8005fb2 <__sfputc_r+0x1e>
 8005faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fae:	f7ff bde8 	b.w	8005b82 <__swbuf_r>
 8005fb2:	6813      	ldr	r3, [r2, #0]
 8005fb4:	1c58      	adds	r0, r3, #1
 8005fb6:	6010      	str	r0, [r2, #0]
 8005fb8:	7019      	strb	r1, [r3, #0]
 8005fba:	4608      	mov	r0, r1
 8005fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <__sfputs_r>:
 8005fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	460f      	mov	r7, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	18d5      	adds	r5, r2, r3
 8005fcc:	42ac      	cmp	r4, r5
 8005fce:	d101      	bne.n	8005fd4 <__sfputs_r+0x12>
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	e007      	b.n	8005fe4 <__sfputs_r+0x22>
 8005fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd8:	463a      	mov	r2, r7
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ffda 	bl	8005f94 <__sfputc_r>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d1f3      	bne.n	8005fcc <__sfputs_r+0xa>
 8005fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fe8 <_vfiprintf_r>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	460d      	mov	r5, r1
 8005fee:	b09d      	sub	sp, #116	@ 0x74
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	4698      	mov	r8, r3
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	b118      	cbz	r0, 8006000 <_vfiprintf_r+0x18>
 8005ff8:	6a03      	ldr	r3, [r0, #32]
 8005ffa:	b90b      	cbnz	r3, 8006000 <_vfiprintf_r+0x18>
 8005ffc:	f7ff fcd8 	bl	80059b0 <__sinit>
 8006000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006002:	07d9      	lsls	r1, r3, #31
 8006004:	d405      	bmi.n	8006012 <_vfiprintf_r+0x2a>
 8006006:	89ab      	ldrh	r3, [r5, #12]
 8006008:	059a      	lsls	r2, r3, #22
 800600a:	d402      	bmi.n	8006012 <_vfiprintf_r+0x2a>
 800600c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800600e:	f7ff fec6 	bl	8005d9e <__retarget_lock_acquire_recursive>
 8006012:	89ab      	ldrh	r3, [r5, #12]
 8006014:	071b      	lsls	r3, r3, #28
 8006016:	d501      	bpl.n	800601c <_vfiprintf_r+0x34>
 8006018:	692b      	ldr	r3, [r5, #16]
 800601a:	b99b      	cbnz	r3, 8006044 <_vfiprintf_r+0x5c>
 800601c:	4629      	mov	r1, r5
 800601e:	4630      	mov	r0, r6
 8006020:	f7ff fdee 	bl	8005c00 <__swsetup_r>
 8006024:	b170      	cbz	r0, 8006044 <_vfiprintf_r+0x5c>
 8006026:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006028:	07dc      	lsls	r4, r3, #31
 800602a:	d504      	bpl.n	8006036 <_vfiprintf_r+0x4e>
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	b01d      	add	sp, #116	@ 0x74
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	89ab      	ldrh	r3, [r5, #12]
 8006038:	0598      	lsls	r0, r3, #22
 800603a:	d4f7      	bmi.n	800602c <_vfiprintf_r+0x44>
 800603c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800603e:	f7ff feaf 	bl	8005da0 <__retarget_lock_release_recursive>
 8006042:	e7f3      	b.n	800602c <_vfiprintf_r+0x44>
 8006044:	2300      	movs	r3, #0
 8006046:	9309      	str	r3, [sp, #36]	@ 0x24
 8006048:	2320      	movs	r3, #32
 800604a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800604e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006052:	2330      	movs	r3, #48	@ 0x30
 8006054:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006204 <_vfiprintf_r+0x21c>
 8006058:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800605c:	f04f 0901 	mov.w	r9, #1
 8006060:	4623      	mov	r3, r4
 8006062:	469a      	mov	sl, r3
 8006064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006068:	b10a      	cbz	r2, 800606e <_vfiprintf_r+0x86>
 800606a:	2a25      	cmp	r2, #37	@ 0x25
 800606c:	d1f9      	bne.n	8006062 <_vfiprintf_r+0x7a>
 800606e:	ebba 0b04 	subs.w	fp, sl, r4
 8006072:	d00b      	beq.n	800608c <_vfiprintf_r+0xa4>
 8006074:	465b      	mov	r3, fp
 8006076:	4622      	mov	r2, r4
 8006078:	4629      	mov	r1, r5
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ffa1 	bl	8005fc2 <__sfputs_r>
 8006080:	3001      	adds	r0, #1
 8006082:	f000 80a7 	beq.w	80061d4 <_vfiprintf_r+0x1ec>
 8006086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006088:	445a      	add	r2, fp
 800608a:	9209      	str	r2, [sp, #36]	@ 0x24
 800608c:	f89a 3000 	ldrb.w	r3, [sl]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 809f 	beq.w	80061d4 <_vfiprintf_r+0x1ec>
 8006096:	2300      	movs	r3, #0
 8006098:	f04f 32ff 	mov.w	r2, #4294967295
 800609c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060a0:	f10a 0a01 	add.w	sl, sl, #1
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	9307      	str	r3, [sp, #28]
 80060a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80060ae:	4654      	mov	r4, sl
 80060b0:	2205      	movs	r2, #5
 80060b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060b6:	4853      	ldr	r0, [pc, #332]	@ (8006204 <_vfiprintf_r+0x21c>)
 80060b8:	f7fa f88a 	bl	80001d0 <memchr>
 80060bc:	9a04      	ldr	r2, [sp, #16]
 80060be:	b9d8      	cbnz	r0, 80060f8 <_vfiprintf_r+0x110>
 80060c0:	06d1      	lsls	r1, r2, #27
 80060c2:	bf44      	itt	mi
 80060c4:	2320      	movmi	r3, #32
 80060c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060ca:	0713      	lsls	r3, r2, #28
 80060cc:	bf44      	itt	mi
 80060ce:	232b      	movmi	r3, #43	@ 0x2b
 80060d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060d4:	f89a 3000 	ldrb.w	r3, [sl]
 80060d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060da:	d015      	beq.n	8006108 <_vfiprintf_r+0x120>
 80060dc:	9a07      	ldr	r2, [sp, #28]
 80060de:	4654      	mov	r4, sl
 80060e0:	2000      	movs	r0, #0
 80060e2:	f04f 0c0a 	mov.w	ip, #10
 80060e6:	4621      	mov	r1, r4
 80060e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ec:	3b30      	subs	r3, #48	@ 0x30
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	d94b      	bls.n	800618a <_vfiprintf_r+0x1a2>
 80060f2:	b1b0      	cbz	r0, 8006122 <_vfiprintf_r+0x13a>
 80060f4:	9207      	str	r2, [sp, #28]
 80060f6:	e014      	b.n	8006122 <_vfiprintf_r+0x13a>
 80060f8:	eba0 0308 	sub.w	r3, r0, r8
 80060fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006100:	4313      	orrs	r3, r2
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	46a2      	mov	sl, r4
 8006106:	e7d2      	b.n	80060ae <_vfiprintf_r+0xc6>
 8006108:	9b03      	ldr	r3, [sp, #12]
 800610a:	1d19      	adds	r1, r3, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	9103      	str	r1, [sp, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	bfbb      	ittet	lt
 8006114:	425b      	neglt	r3, r3
 8006116:	f042 0202 	orrlt.w	r2, r2, #2
 800611a:	9307      	strge	r3, [sp, #28]
 800611c:	9307      	strlt	r3, [sp, #28]
 800611e:	bfb8      	it	lt
 8006120:	9204      	strlt	r2, [sp, #16]
 8006122:	7823      	ldrb	r3, [r4, #0]
 8006124:	2b2e      	cmp	r3, #46	@ 0x2e
 8006126:	d10a      	bne.n	800613e <_vfiprintf_r+0x156>
 8006128:	7863      	ldrb	r3, [r4, #1]
 800612a:	2b2a      	cmp	r3, #42	@ 0x2a
 800612c:	d132      	bne.n	8006194 <_vfiprintf_r+0x1ac>
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	9203      	str	r2, [sp, #12]
 8006136:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800613a:	3402      	adds	r4, #2
 800613c:	9305      	str	r3, [sp, #20]
 800613e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006214 <_vfiprintf_r+0x22c>
 8006142:	7821      	ldrb	r1, [r4, #0]
 8006144:	2203      	movs	r2, #3
 8006146:	4650      	mov	r0, sl
 8006148:	f7fa f842 	bl	80001d0 <memchr>
 800614c:	b138      	cbz	r0, 800615e <_vfiprintf_r+0x176>
 800614e:	9b04      	ldr	r3, [sp, #16]
 8006150:	eba0 000a 	sub.w	r0, r0, sl
 8006154:	2240      	movs	r2, #64	@ 0x40
 8006156:	4082      	lsls	r2, r0
 8006158:	4313      	orrs	r3, r2
 800615a:	3401      	adds	r4, #1
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006162:	4829      	ldr	r0, [pc, #164]	@ (8006208 <_vfiprintf_r+0x220>)
 8006164:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006168:	2206      	movs	r2, #6
 800616a:	f7fa f831 	bl	80001d0 <memchr>
 800616e:	2800      	cmp	r0, #0
 8006170:	d03f      	beq.n	80061f2 <_vfiprintf_r+0x20a>
 8006172:	4b26      	ldr	r3, [pc, #152]	@ (800620c <_vfiprintf_r+0x224>)
 8006174:	bb1b      	cbnz	r3, 80061be <_vfiprintf_r+0x1d6>
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	3307      	adds	r3, #7
 800617a:	f023 0307 	bic.w	r3, r3, #7
 800617e:	3308      	adds	r3, #8
 8006180:	9303      	str	r3, [sp, #12]
 8006182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006184:	443b      	add	r3, r7
 8006186:	9309      	str	r3, [sp, #36]	@ 0x24
 8006188:	e76a      	b.n	8006060 <_vfiprintf_r+0x78>
 800618a:	fb0c 3202 	mla	r2, ip, r2, r3
 800618e:	460c      	mov	r4, r1
 8006190:	2001      	movs	r0, #1
 8006192:	e7a8      	b.n	80060e6 <_vfiprintf_r+0xfe>
 8006194:	2300      	movs	r3, #0
 8006196:	3401      	adds	r4, #1
 8006198:	9305      	str	r3, [sp, #20]
 800619a:	4619      	mov	r1, r3
 800619c:	f04f 0c0a 	mov.w	ip, #10
 80061a0:	4620      	mov	r0, r4
 80061a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061a6:	3a30      	subs	r2, #48	@ 0x30
 80061a8:	2a09      	cmp	r2, #9
 80061aa:	d903      	bls.n	80061b4 <_vfiprintf_r+0x1cc>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0c6      	beq.n	800613e <_vfiprintf_r+0x156>
 80061b0:	9105      	str	r1, [sp, #20]
 80061b2:	e7c4      	b.n	800613e <_vfiprintf_r+0x156>
 80061b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061b8:	4604      	mov	r4, r0
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7f0      	b.n	80061a0 <_vfiprintf_r+0x1b8>
 80061be:	ab03      	add	r3, sp, #12
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	462a      	mov	r2, r5
 80061c4:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <_vfiprintf_r+0x228>)
 80061c6:	a904      	add	r1, sp, #16
 80061c8:	4630      	mov	r0, r6
 80061ca:	f3af 8000 	nop.w
 80061ce:	4607      	mov	r7, r0
 80061d0:	1c78      	adds	r0, r7, #1
 80061d2:	d1d6      	bne.n	8006182 <_vfiprintf_r+0x19a>
 80061d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061d6:	07d9      	lsls	r1, r3, #31
 80061d8:	d405      	bmi.n	80061e6 <_vfiprintf_r+0x1fe>
 80061da:	89ab      	ldrh	r3, [r5, #12]
 80061dc:	059a      	lsls	r2, r3, #22
 80061de:	d402      	bmi.n	80061e6 <_vfiprintf_r+0x1fe>
 80061e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061e2:	f7ff fddd 	bl	8005da0 <__retarget_lock_release_recursive>
 80061e6:	89ab      	ldrh	r3, [r5, #12]
 80061e8:	065b      	lsls	r3, r3, #25
 80061ea:	f53f af1f 	bmi.w	800602c <_vfiprintf_r+0x44>
 80061ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061f0:	e71e      	b.n	8006030 <_vfiprintf_r+0x48>
 80061f2:	ab03      	add	r3, sp, #12
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	462a      	mov	r2, r5
 80061f8:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <_vfiprintf_r+0x228>)
 80061fa:	a904      	add	r1, sp, #16
 80061fc:	4630      	mov	r0, r6
 80061fe:	f000 f879 	bl	80062f4 <_printf_i>
 8006202:	e7e4      	b.n	80061ce <_vfiprintf_r+0x1e6>
 8006204:	0800689c 	.word	0x0800689c
 8006208:	080068a6 	.word	0x080068a6
 800620c:	00000000 	.word	0x00000000
 8006210:	08005fc3 	.word	0x08005fc3
 8006214:	080068a2 	.word	0x080068a2

08006218 <_printf_common>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	4616      	mov	r6, r2
 800621e:	4698      	mov	r8, r3
 8006220:	688a      	ldr	r2, [r1, #8]
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006228:	4293      	cmp	r3, r2
 800622a:	bfb8      	it	lt
 800622c:	4613      	movlt	r3, r2
 800622e:	6033      	str	r3, [r6, #0]
 8006230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006234:	4607      	mov	r7, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b10a      	cbz	r2, 800623e <_printf_common+0x26>
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	0699      	lsls	r1, r3, #26
 8006242:	bf42      	ittt	mi
 8006244:	6833      	ldrmi	r3, [r6, #0]
 8006246:	3302      	addmi	r3, #2
 8006248:	6033      	strmi	r3, [r6, #0]
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	f015 0506 	ands.w	r5, r5, #6
 8006250:	d106      	bne.n	8006260 <_printf_common+0x48>
 8006252:	f104 0a19 	add.w	sl, r4, #25
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6832      	ldr	r2, [r6, #0]
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc26      	bgt.n	80062ae <_printf_common+0x96>
 8006260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	3b00      	subs	r3, #0
 8006268:	bf18      	it	ne
 800626a:	2301      	movne	r3, #1
 800626c:	0692      	lsls	r2, r2, #26
 800626e:	d42b      	bmi.n	80062c8 <_printf_common+0xb0>
 8006270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006274:	4641      	mov	r1, r8
 8006276:	4638      	mov	r0, r7
 8006278:	47c8      	blx	r9
 800627a:	3001      	adds	r0, #1
 800627c:	d01e      	beq.n	80062bc <_printf_common+0xa4>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	f003 0306 	and.w	r3, r3, #6
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf02      	ittt	eq
 800628a:	68e5      	ldreq	r5, [r4, #12]
 800628c:	6833      	ldreq	r3, [r6, #0]
 800628e:	1aed      	subeq	r5, r5, r3
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	bf0c      	ite	eq
 8006294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006298:	2500      	movne	r5, #0
 800629a:	4293      	cmp	r3, r2
 800629c:	bfc4      	itt	gt
 800629e:	1a9b      	subgt	r3, r3, r2
 80062a0:	18ed      	addgt	r5, r5, r3
 80062a2:	2600      	movs	r6, #0
 80062a4:	341a      	adds	r4, #26
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	d11a      	bne.n	80062e0 <_printf_common+0xc8>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e008      	b.n	80062c0 <_printf_common+0xa8>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4641      	mov	r1, r8
 80062b4:	4638      	mov	r0, r7
 80062b6:	47c8      	blx	r9
 80062b8:	3001      	adds	r0, #1
 80062ba:	d103      	bne.n	80062c4 <_printf_common+0xac>
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7c6      	b.n	8006256 <_printf_common+0x3e>
 80062c8:	18e1      	adds	r1, r4, r3
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	2030      	movs	r0, #48	@ 0x30
 80062ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062d2:	4422      	add	r2, r4
 80062d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062dc:	3302      	adds	r3, #2
 80062de:	e7c7      	b.n	8006270 <_printf_common+0x58>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4622      	mov	r2, r4
 80062e4:	4641      	mov	r1, r8
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c8      	blx	r9
 80062ea:	3001      	adds	r0, #1
 80062ec:	d0e6      	beq.n	80062bc <_printf_common+0xa4>
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7d9      	b.n	80062a6 <_printf_common+0x8e>
	...

080062f4 <_printf_i>:
 80062f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	7e0f      	ldrb	r7, [r1, #24]
 80062fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062fc:	2f78      	cmp	r7, #120	@ 0x78
 80062fe:	4691      	mov	r9, r2
 8006300:	4680      	mov	r8, r0
 8006302:	460c      	mov	r4, r1
 8006304:	469a      	mov	sl, r3
 8006306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800630a:	d807      	bhi.n	800631c <_printf_i+0x28>
 800630c:	2f62      	cmp	r7, #98	@ 0x62
 800630e:	d80a      	bhi.n	8006326 <_printf_i+0x32>
 8006310:	2f00      	cmp	r7, #0
 8006312:	f000 80d2 	beq.w	80064ba <_printf_i+0x1c6>
 8006316:	2f58      	cmp	r7, #88	@ 0x58
 8006318:	f000 80b9 	beq.w	800648e <_printf_i+0x19a>
 800631c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006324:	e03a      	b.n	800639c <_printf_i+0xa8>
 8006326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800632a:	2b15      	cmp	r3, #21
 800632c:	d8f6      	bhi.n	800631c <_printf_i+0x28>
 800632e:	a101      	add	r1, pc, #4	@ (adr r1, 8006334 <_printf_i+0x40>)
 8006330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006334:	0800638d 	.word	0x0800638d
 8006338:	080063a1 	.word	0x080063a1
 800633c:	0800631d 	.word	0x0800631d
 8006340:	0800631d 	.word	0x0800631d
 8006344:	0800631d 	.word	0x0800631d
 8006348:	0800631d 	.word	0x0800631d
 800634c:	080063a1 	.word	0x080063a1
 8006350:	0800631d 	.word	0x0800631d
 8006354:	0800631d 	.word	0x0800631d
 8006358:	0800631d 	.word	0x0800631d
 800635c:	0800631d 	.word	0x0800631d
 8006360:	080064a1 	.word	0x080064a1
 8006364:	080063cb 	.word	0x080063cb
 8006368:	0800645b 	.word	0x0800645b
 800636c:	0800631d 	.word	0x0800631d
 8006370:	0800631d 	.word	0x0800631d
 8006374:	080064c3 	.word	0x080064c3
 8006378:	0800631d 	.word	0x0800631d
 800637c:	080063cb 	.word	0x080063cb
 8006380:	0800631d 	.word	0x0800631d
 8006384:	0800631d 	.word	0x0800631d
 8006388:	08006463 	.word	0x08006463
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6032      	str	r2, [r6, #0]
 8006394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800639c:	2301      	movs	r3, #1
 800639e:	e09d      	b.n	80064dc <_printf_i+0x1e8>
 80063a0:	6833      	ldr	r3, [r6, #0]
 80063a2:	6820      	ldr	r0, [r4, #0]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	6031      	str	r1, [r6, #0]
 80063a8:	0606      	lsls	r6, r0, #24
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0xbc>
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	e003      	b.n	80063b8 <_printf_i+0xc4>
 80063b0:	0645      	lsls	r5, r0, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0xb8>
 80063b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	da03      	bge.n	80063c4 <_printf_i+0xd0>
 80063bc:	232d      	movs	r3, #45	@ 0x2d
 80063be:	426d      	negs	r5, r5
 80063c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c4:	4859      	ldr	r0, [pc, #356]	@ (800652c <_printf_i+0x238>)
 80063c6:	230a      	movs	r3, #10
 80063c8:	e011      	b.n	80063ee <_printf_i+0xfa>
 80063ca:	6821      	ldr	r1, [r4, #0]
 80063cc:	6833      	ldr	r3, [r6, #0]
 80063ce:	0608      	lsls	r0, r1, #24
 80063d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063d4:	d402      	bmi.n	80063dc <_printf_i+0xe8>
 80063d6:	0649      	lsls	r1, r1, #25
 80063d8:	bf48      	it	mi
 80063da:	b2ad      	uxthmi	r5, r5
 80063dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063de:	4853      	ldr	r0, [pc, #332]	@ (800652c <_printf_i+0x238>)
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	bf14      	ite	ne
 80063e4:	230a      	movne	r3, #10
 80063e6:	2308      	moveq	r3, #8
 80063e8:	2100      	movs	r1, #0
 80063ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ee:	6866      	ldr	r6, [r4, #4]
 80063f0:	60a6      	str	r6, [r4, #8]
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	bfa2      	ittt	ge
 80063f6:	6821      	ldrge	r1, [r4, #0]
 80063f8:	f021 0104 	bicge.w	r1, r1, #4
 80063fc:	6021      	strge	r1, [r4, #0]
 80063fe:	b90d      	cbnz	r5, 8006404 <_printf_i+0x110>
 8006400:	2e00      	cmp	r6, #0
 8006402:	d04b      	beq.n	800649c <_printf_i+0x1a8>
 8006404:	4616      	mov	r6, r2
 8006406:	fbb5 f1f3 	udiv	r1, r5, r3
 800640a:	fb03 5711 	mls	r7, r3, r1, r5
 800640e:	5dc7      	ldrb	r7, [r0, r7]
 8006410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006414:	462f      	mov	r7, r5
 8006416:	42bb      	cmp	r3, r7
 8006418:	460d      	mov	r5, r1
 800641a:	d9f4      	bls.n	8006406 <_printf_i+0x112>
 800641c:	2b08      	cmp	r3, #8
 800641e:	d10b      	bne.n	8006438 <_printf_i+0x144>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	07df      	lsls	r7, r3, #31
 8006424:	d508      	bpl.n	8006438 <_printf_i+0x144>
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	6861      	ldr	r1, [r4, #4]
 800642a:	4299      	cmp	r1, r3
 800642c:	bfde      	ittt	le
 800642e:	2330      	movle	r3, #48	@ 0x30
 8006430:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006434:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006438:	1b92      	subs	r2, r2, r6
 800643a:	6122      	str	r2, [r4, #16]
 800643c:	f8cd a000 	str.w	sl, [sp]
 8006440:	464b      	mov	r3, r9
 8006442:	aa03      	add	r2, sp, #12
 8006444:	4621      	mov	r1, r4
 8006446:	4640      	mov	r0, r8
 8006448:	f7ff fee6 	bl	8006218 <_printf_common>
 800644c:	3001      	adds	r0, #1
 800644e:	d14a      	bne.n	80064e6 <_printf_i+0x1f2>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	b004      	add	sp, #16
 8006456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f043 0320 	orr.w	r3, r3, #32
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	4833      	ldr	r0, [pc, #204]	@ (8006530 <_printf_i+0x23c>)
 8006464:	2778      	movs	r7, #120	@ 0x78
 8006466:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	6831      	ldr	r1, [r6, #0]
 800646e:	061f      	lsls	r7, r3, #24
 8006470:	f851 5b04 	ldr.w	r5, [r1], #4
 8006474:	d402      	bmi.n	800647c <_printf_i+0x188>
 8006476:	065f      	lsls	r7, r3, #25
 8006478:	bf48      	it	mi
 800647a:	b2ad      	uxthmi	r5, r5
 800647c:	6031      	str	r1, [r6, #0]
 800647e:	07d9      	lsls	r1, r3, #31
 8006480:	bf44      	itt	mi
 8006482:	f043 0320 	orrmi.w	r3, r3, #32
 8006486:	6023      	strmi	r3, [r4, #0]
 8006488:	b11d      	cbz	r5, 8006492 <_printf_i+0x19e>
 800648a:	2310      	movs	r3, #16
 800648c:	e7ac      	b.n	80063e8 <_printf_i+0xf4>
 800648e:	4827      	ldr	r0, [pc, #156]	@ (800652c <_printf_i+0x238>)
 8006490:	e7e9      	b.n	8006466 <_printf_i+0x172>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	f023 0320 	bic.w	r3, r3, #32
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	e7f6      	b.n	800648a <_printf_i+0x196>
 800649c:	4616      	mov	r6, r2
 800649e:	e7bd      	b.n	800641c <_printf_i+0x128>
 80064a0:	6833      	ldr	r3, [r6, #0]
 80064a2:	6825      	ldr	r5, [r4, #0]
 80064a4:	6961      	ldr	r1, [r4, #20]
 80064a6:	1d18      	adds	r0, r3, #4
 80064a8:	6030      	str	r0, [r6, #0]
 80064aa:	062e      	lsls	r6, r5, #24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	d501      	bpl.n	80064b4 <_printf_i+0x1c0>
 80064b0:	6019      	str	r1, [r3, #0]
 80064b2:	e002      	b.n	80064ba <_printf_i+0x1c6>
 80064b4:	0668      	lsls	r0, r5, #25
 80064b6:	d5fb      	bpl.n	80064b0 <_printf_i+0x1bc>
 80064b8:	8019      	strh	r1, [r3, #0]
 80064ba:	2300      	movs	r3, #0
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	4616      	mov	r6, r2
 80064c0:	e7bc      	b.n	800643c <_printf_i+0x148>
 80064c2:	6833      	ldr	r3, [r6, #0]
 80064c4:	1d1a      	adds	r2, r3, #4
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	681e      	ldr	r6, [r3, #0]
 80064ca:	6862      	ldr	r2, [r4, #4]
 80064cc:	2100      	movs	r1, #0
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7f9 fe7e 	bl	80001d0 <memchr>
 80064d4:	b108      	cbz	r0, 80064da <_printf_i+0x1e6>
 80064d6:	1b80      	subs	r0, r0, r6
 80064d8:	6060      	str	r0, [r4, #4]
 80064da:	6863      	ldr	r3, [r4, #4]
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	2300      	movs	r3, #0
 80064e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e4:	e7aa      	b.n	800643c <_printf_i+0x148>
 80064e6:	6923      	ldr	r3, [r4, #16]
 80064e8:	4632      	mov	r2, r6
 80064ea:	4649      	mov	r1, r9
 80064ec:	4640      	mov	r0, r8
 80064ee:	47d0      	blx	sl
 80064f0:	3001      	adds	r0, #1
 80064f2:	d0ad      	beq.n	8006450 <_printf_i+0x15c>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	079b      	lsls	r3, r3, #30
 80064f8:	d413      	bmi.n	8006522 <_printf_i+0x22e>
 80064fa:	68e0      	ldr	r0, [r4, #12]
 80064fc:	9b03      	ldr	r3, [sp, #12]
 80064fe:	4298      	cmp	r0, r3
 8006500:	bfb8      	it	lt
 8006502:	4618      	movlt	r0, r3
 8006504:	e7a6      	b.n	8006454 <_printf_i+0x160>
 8006506:	2301      	movs	r3, #1
 8006508:	4632      	mov	r2, r6
 800650a:	4649      	mov	r1, r9
 800650c:	4640      	mov	r0, r8
 800650e:	47d0      	blx	sl
 8006510:	3001      	adds	r0, #1
 8006512:	d09d      	beq.n	8006450 <_printf_i+0x15c>
 8006514:	3501      	adds	r5, #1
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	9903      	ldr	r1, [sp, #12]
 800651a:	1a5b      	subs	r3, r3, r1
 800651c:	42ab      	cmp	r3, r5
 800651e:	dcf2      	bgt.n	8006506 <_printf_i+0x212>
 8006520:	e7eb      	b.n	80064fa <_printf_i+0x206>
 8006522:	2500      	movs	r5, #0
 8006524:	f104 0619 	add.w	r6, r4, #25
 8006528:	e7f5      	b.n	8006516 <_printf_i+0x222>
 800652a:	bf00      	nop
 800652c:	080068ad 	.word	0x080068ad
 8006530:	080068be 	.word	0x080068be

08006534 <__sflush_r>:
 8006534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	0716      	lsls	r6, r2, #28
 800653e:	4605      	mov	r5, r0
 8006540:	460c      	mov	r4, r1
 8006542:	d454      	bmi.n	80065ee <__sflush_r+0xba>
 8006544:	684b      	ldr	r3, [r1, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	dc02      	bgt.n	8006550 <__sflush_r+0x1c>
 800654a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	dd48      	ble.n	80065e2 <__sflush_r+0xae>
 8006550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006552:	2e00      	cmp	r6, #0
 8006554:	d045      	beq.n	80065e2 <__sflush_r+0xae>
 8006556:	2300      	movs	r3, #0
 8006558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800655c:	682f      	ldr	r7, [r5, #0]
 800655e:	6a21      	ldr	r1, [r4, #32]
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	d030      	beq.n	80065c6 <__sflush_r+0x92>
 8006564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	0759      	lsls	r1, r3, #29
 800656a:	d505      	bpl.n	8006578 <__sflush_r+0x44>
 800656c:	6863      	ldr	r3, [r4, #4]
 800656e:	1ad2      	subs	r2, r2, r3
 8006570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006572:	b10b      	cbz	r3, 8006578 <__sflush_r+0x44>
 8006574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006576:	1ad2      	subs	r2, r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800657c:	6a21      	ldr	r1, [r4, #32]
 800657e:	4628      	mov	r0, r5
 8006580:	47b0      	blx	r6
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	d106      	bne.n	8006596 <__sflush_r+0x62>
 8006588:	6829      	ldr	r1, [r5, #0]
 800658a:	291d      	cmp	r1, #29
 800658c:	d82b      	bhi.n	80065e6 <__sflush_r+0xb2>
 800658e:	4a2a      	ldr	r2, [pc, #168]	@ (8006638 <__sflush_r+0x104>)
 8006590:	410a      	asrs	r2, r1
 8006592:	07d6      	lsls	r6, r2, #31
 8006594:	d427      	bmi.n	80065e6 <__sflush_r+0xb2>
 8006596:	2200      	movs	r2, #0
 8006598:	6062      	str	r2, [r4, #4]
 800659a:	04d9      	lsls	r1, r3, #19
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	6022      	str	r2, [r4, #0]
 80065a0:	d504      	bpl.n	80065ac <__sflush_r+0x78>
 80065a2:	1c42      	adds	r2, r0, #1
 80065a4:	d101      	bne.n	80065aa <__sflush_r+0x76>
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	b903      	cbnz	r3, 80065ac <__sflush_r+0x78>
 80065aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80065ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065ae:	602f      	str	r7, [r5, #0]
 80065b0:	b1b9      	cbz	r1, 80065e2 <__sflush_r+0xae>
 80065b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065b6:	4299      	cmp	r1, r3
 80065b8:	d002      	beq.n	80065c0 <__sflush_r+0x8c>
 80065ba:	4628      	mov	r0, r5
 80065bc:	f7ff fbf2 	bl	8005da4 <_free_r>
 80065c0:	2300      	movs	r3, #0
 80065c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80065c4:	e00d      	b.n	80065e2 <__sflush_r+0xae>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b0      	blx	r6
 80065cc:	4602      	mov	r2, r0
 80065ce:	1c50      	adds	r0, r2, #1
 80065d0:	d1c9      	bne.n	8006566 <__sflush_r+0x32>
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0c6      	beq.n	8006566 <__sflush_r+0x32>
 80065d8:	2b1d      	cmp	r3, #29
 80065da:	d001      	beq.n	80065e0 <__sflush_r+0xac>
 80065dc:	2b16      	cmp	r3, #22
 80065de:	d11e      	bne.n	800661e <__sflush_r+0xea>
 80065e0:	602f      	str	r7, [r5, #0]
 80065e2:	2000      	movs	r0, #0
 80065e4:	e022      	b.n	800662c <__sflush_r+0xf8>
 80065e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ea:	b21b      	sxth	r3, r3
 80065ec:	e01b      	b.n	8006626 <__sflush_r+0xf2>
 80065ee:	690f      	ldr	r7, [r1, #16]
 80065f0:	2f00      	cmp	r7, #0
 80065f2:	d0f6      	beq.n	80065e2 <__sflush_r+0xae>
 80065f4:	0793      	lsls	r3, r2, #30
 80065f6:	680e      	ldr	r6, [r1, #0]
 80065f8:	bf08      	it	eq
 80065fa:	694b      	ldreq	r3, [r1, #20]
 80065fc:	600f      	str	r7, [r1, #0]
 80065fe:	bf18      	it	ne
 8006600:	2300      	movne	r3, #0
 8006602:	eba6 0807 	sub.w	r8, r6, r7
 8006606:	608b      	str	r3, [r1, #8]
 8006608:	f1b8 0f00 	cmp.w	r8, #0
 800660c:	dde9      	ble.n	80065e2 <__sflush_r+0xae>
 800660e:	6a21      	ldr	r1, [r4, #32]
 8006610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006612:	4643      	mov	r3, r8
 8006614:	463a      	mov	r2, r7
 8006616:	4628      	mov	r0, r5
 8006618:	47b0      	blx	r6
 800661a:	2800      	cmp	r0, #0
 800661c:	dc08      	bgt.n	8006630 <__sflush_r+0xfc>
 800661e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	f04f 30ff 	mov.w	r0, #4294967295
 800662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006630:	4407      	add	r7, r0
 8006632:	eba8 0800 	sub.w	r8, r8, r0
 8006636:	e7e7      	b.n	8006608 <__sflush_r+0xd4>
 8006638:	dfbffffe 	.word	0xdfbffffe

0800663c <_fflush_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	690b      	ldr	r3, [r1, #16]
 8006640:	4605      	mov	r5, r0
 8006642:	460c      	mov	r4, r1
 8006644:	b913      	cbnz	r3, 800664c <_fflush_r+0x10>
 8006646:	2500      	movs	r5, #0
 8006648:	4628      	mov	r0, r5
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	b118      	cbz	r0, 8006656 <_fflush_r+0x1a>
 800664e:	6a03      	ldr	r3, [r0, #32]
 8006650:	b90b      	cbnz	r3, 8006656 <_fflush_r+0x1a>
 8006652:	f7ff f9ad 	bl	80059b0 <__sinit>
 8006656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0f3      	beq.n	8006646 <_fflush_r+0xa>
 800665e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006660:	07d0      	lsls	r0, r2, #31
 8006662:	d404      	bmi.n	800666e <_fflush_r+0x32>
 8006664:	0599      	lsls	r1, r3, #22
 8006666:	d402      	bmi.n	800666e <_fflush_r+0x32>
 8006668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800666a:	f7ff fb98 	bl	8005d9e <__retarget_lock_acquire_recursive>
 800666e:	4628      	mov	r0, r5
 8006670:	4621      	mov	r1, r4
 8006672:	f7ff ff5f 	bl	8006534 <__sflush_r>
 8006676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006678:	07da      	lsls	r2, r3, #31
 800667a:	4605      	mov	r5, r0
 800667c:	d4e4      	bmi.n	8006648 <_fflush_r+0xc>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	059b      	lsls	r3, r3, #22
 8006682:	d4e1      	bmi.n	8006648 <_fflush_r+0xc>
 8006684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006686:	f7ff fb8b 	bl	8005da0 <__retarget_lock_release_recursive>
 800668a:	e7dd      	b.n	8006648 <_fflush_r+0xc>

0800668c <__swhatbuf_r>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	460c      	mov	r4, r1
 8006690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006694:	2900      	cmp	r1, #0
 8006696:	b096      	sub	sp, #88	@ 0x58
 8006698:	4615      	mov	r5, r2
 800669a:	461e      	mov	r6, r3
 800669c:	da0d      	bge.n	80066ba <__swhatbuf_r+0x2e>
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066a4:	f04f 0100 	mov.w	r1, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2340      	movne	r3, #64	@ 0x40
 80066ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066b0:	2000      	movs	r0, #0
 80066b2:	6031      	str	r1, [r6, #0]
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	b016      	add	sp, #88	@ 0x58
 80066b8:	bd70      	pop	{r4, r5, r6, pc}
 80066ba:	466a      	mov	r2, sp
 80066bc:	f000 f848 	bl	8006750 <_fstat_r>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	dbec      	blt.n	800669e <__swhatbuf_r+0x12>
 80066c4:	9901      	ldr	r1, [sp, #4]
 80066c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066ce:	4259      	negs	r1, r3
 80066d0:	4159      	adcs	r1, r3
 80066d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066d6:	e7eb      	b.n	80066b0 <__swhatbuf_r+0x24>

080066d8 <__smakebuf_r>:
 80066d8:	898b      	ldrh	r3, [r1, #12]
 80066da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066dc:	079d      	lsls	r5, r3, #30
 80066de:	4606      	mov	r6, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	d507      	bpl.n	80066f4 <__smakebuf_r+0x1c>
 80066e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	2301      	movs	r3, #1
 80066ee:	6163      	str	r3, [r4, #20]
 80066f0:	b003      	add	sp, #12
 80066f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066f4:	ab01      	add	r3, sp, #4
 80066f6:	466a      	mov	r2, sp
 80066f8:	f7ff ffc8 	bl	800668c <__swhatbuf_r>
 80066fc:	9f00      	ldr	r7, [sp, #0]
 80066fe:	4605      	mov	r5, r0
 8006700:	4639      	mov	r1, r7
 8006702:	4630      	mov	r0, r6
 8006704:	f7ff fbba 	bl	8005e7c <_malloc_r>
 8006708:	b948      	cbnz	r0, 800671e <__smakebuf_r+0x46>
 800670a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800670e:	059a      	lsls	r2, r3, #22
 8006710:	d4ee      	bmi.n	80066f0 <__smakebuf_r+0x18>
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	f043 0302 	orr.w	r3, r3, #2
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	e7e2      	b.n	80066e4 <__smakebuf_r+0xc>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	6020      	str	r0, [r4, #0]
 8006722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800672e:	b15b      	cbz	r3, 8006748 <__smakebuf_r+0x70>
 8006730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006734:	4630      	mov	r0, r6
 8006736:	f000 f81d 	bl	8006774 <_isatty_r>
 800673a:	b128      	cbz	r0, 8006748 <__smakebuf_r+0x70>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	431d      	orrs	r5, r3
 800674c:	81a5      	strh	r5, [r4, #12]
 800674e:	e7cf      	b.n	80066f0 <__smakebuf_r+0x18>

08006750 <_fstat_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d07      	ldr	r5, [pc, #28]	@ (8006770 <_fstat_r+0x20>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	4611      	mov	r1, r2
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	f7fa fb26 	bl	8000dae <_fstat>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	d102      	bne.n	800676c <_fstat_r+0x1c>
 8006766:	682b      	ldr	r3, [r5, #0]
 8006768:	b103      	cbz	r3, 800676c <_fstat_r+0x1c>
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	bd38      	pop	{r3, r4, r5, pc}
 800676e:	bf00      	nop
 8006770:	20000300 	.word	0x20000300

08006774 <_isatty_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d06      	ldr	r5, [pc, #24]	@ (8006790 <_isatty_r+0x1c>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	f7fa fb25 	bl	8000dce <_isatty>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_isatty_r+0x1a>
 8006788:	682b      	ldr	r3, [r5, #0]
 800678a:	b103      	cbz	r3, 800678e <_isatty_r+0x1a>
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	20000300 	.word	0x20000300

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	@ (80067b0 <_sbrk_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fa fb2e 	bl	8000e00 <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	20000300 	.word	0x20000300

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
